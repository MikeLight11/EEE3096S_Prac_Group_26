
build/debug/EEE2046Prac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000cc4  08000cc4  00001cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d04  08000d04  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  08000d04  08000d04  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d04  08000d04  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d04  08000d04  00001d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d08  08000d08  00001d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000d0c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08000d1c  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000d1c  00002090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d03  00000000  00000000  00002071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001784  00000000  00000000  0000bd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000066c2  00000000  00000000  0000d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000880  00000000  00000000  00013bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000731  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093ce  00000000  00000000  00014b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002b80  00000000  00000000  0001df3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014f8  00000000  00000000  00020ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000197  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	@ 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			@ (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			@ (mov r8, r8)

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c06      	ldr	r4, [pc, #24]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d107      	bne.n	80001f2 <__do_global_dtors_aux+0x1a>
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <__do_global_dtors_aux+0x16>
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x24>)
 80001ea:	e000      	b.n	80001ee <__do_global_dtors_aux+0x16>
 80001ec:	bf00      	nop
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	20000010 	.word	0x20000010
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08000cac 	.word	0x08000cac

08000200 <frame_dummy>:
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <frame_dummy+0x14>)
 8000202:	b510      	push	{r4, lr}
 8000204:	2b00      	cmp	r3, #0
 8000206:	d003      	beq.n	8000210 <frame_dummy+0x10>
 8000208:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x18>)
 800020a:	4804      	ldr	r0, [pc, #16]	@ (800021c <frame_dummy+0x1c>)
 800020c:	e000      	b.n	8000210 <frame_dummy+0x10>
 800020e:	bf00      	nop
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08000cac 	.word	0x08000cac

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46de      	mov	lr, fp
 8000224:	4657      	mov	r7, sl
 8000226:	464e      	mov	r6, r9
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	b08b      	sub	sp, #44	@ 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022e:	2218      	movs	r2, #24
 8000230:	2100      	movs	r1, #0
 8000232:	a804      	add	r0, sp, #16
 8000234:	f000 fd0d 	bl	8000c52 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000238:	4b59      	ldr	r3, [pc, #356]	@ (80003a0 <MX_GPIO_Init+0x180>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	400a      	ands	r2, r1
 8000248:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800024a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	2180      	movs	r1, #128	@ 0x80
 8000250:	0289      	lsls	r1, r1, #10
 8000252:	430a      	orrs	r2, r1
 8000254:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	400a      	ands	r2, r1
 800025a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800025c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2180      	movs	r1, #128	@ 0x80
 8000262:	02c9      	lsls	r1, r1, #11
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	400b      	ands	r3, r1
 800026c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800026e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000270:	4d4c      	ldr	r5, [pc, #304]	@ (80003a4 <MX_GPIO_Init+0x184>)
 8000272:	2601      	movs	r6, #1
 8000274:	62ae      	str	r6, [r5, #40]	@ 0x28
 8000276:	2302      	movs	r3, #2
 8000278:	469a      	mov	sl, r3
 800027a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800027c:	3302      	adds	r3, #2
 800027e:	4699      	mov	r9, r3
 8000280:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000282:	3304      	adds	r3, #4
 8000284:	4698      	mov	r8, r3
 8000286:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000288:	3308      	adds	r3, #8
 800028a:	469b      	mov	fp, r3
 800028c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800028e:	3310      	adds	r3, #16
 8000290:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000292:	2240      	movs	r2, #64	@ 0x40
 8000294:	62aa      	str	r2, [r5, #40]	@ 0x28
 8000296:	2180      	movs	r1, #128	@ 0x80
 8000298:	62a9      	str	r1, [r5, #40]	@ 0x28

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);

  /**/
  GPIO_InitStruct.Pin = Button0_Pin;
 800029a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800029c:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 800029e:	2790      	movs	r7, #144	@ 0x90
 80002a0:	05ff      	lsls	r7, r7, #23
 80002a2:	a804      	add	r0, sp, #16
 80002a4:	0001      	movs	r1, r0
 80002a6:	0038      	movs	r0, r7
 80002a8:	f000 fc46 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button1_Pin;
 80002ac:	4650      	mov	r0, sl
 80002ae:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80002b0:	2400      	movs	r4, #0
 80002b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80002b4:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80002b6:	a804      	add	r0, sp, #16
 80002b8:	0001      	movs	r1, r0
 80002ba:	0038      	movs	r0, r7
 80002bc:	f000 fc3c 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button2_Pin;
 80002c0:	4648      	mov	r0, r9
 80002c2:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80002c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80002c6:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 80002c8:	a804      	add	r0, sp, #16
 80002ca:	0001      	movs	r1, r0
 80002cc:	0038      	movs	r0, r7
 80002ce:	f000 fc33 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button3_Pin;
 80002d2:	4640      	mov	r0, r8
 80002d4:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80002d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80002d8:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80002da:	a804      	add	r0, sp, #16
 80002dc:	0001      	movs	r1, r0
 80002de:	0038      	movs	r0, r7
 80002e0:	f000 fc2a 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 80002e4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002e6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002e8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ea:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002ec:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80002ee:	a804      	add	r0, sp, #16
 80002f0:	0001      	movs	r1, r0
 80002f2:	0028      	movs	r0, r5
 80002f4:	f000 fc20 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80002f8:	4650      	mov	r0, sl
 80002fa:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000300:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000302:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000304:	a804      	add	r0, sp, #16
 8000306:	0001      	movs	r1, r0
 8000308:	0028      	movs	r0, r5
 800030a:	f000 fc15 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 800030e:	4648      	mov	r0, r9
 8000310:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000312:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000314:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000316:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000318:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800031a:	a804      	add	r0, sp, #16
 800031c:	0001      	movs	r1, r0
 800031e:	0028      	movs	r0, r5
 8000320:	f000 fc0a 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8000324:	4640      	mov	r0, r8
 8000326:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000328:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800032a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800032c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800032e:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000330:	a804      	add	r0, sp, #16
 8000332:	0001      	movs	r1, r0
 8000334:	0028      	movs	r0, r5
 8000336:	f000 fbff 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 800033a:	4658      	mov	r0, fp
 800033c:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800033e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000340:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000342:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000344:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000346:	a804      	add	r0, sp, #16
 8000348:	0001      	movs	r1, r0
 800034a:	0028      	movs	r0, r5
 800034c:	f000 fbf4 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 8000350:	2320      	movs	r3, #32
 8000352:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000354:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000356:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000358:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800035a:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 800035c:	ab04      	add	r3, sp, #16
 800035e:	0019      	movs	r1, r3
 8000360:	0028      	movs	r0, r5
 8000362:	f000 fbe9 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 8000366:	2240      	movs	r2, #64	@ 0x40
 8000368:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800036a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800036c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800036e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000370:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8000372:	ab04      	add	r3, sp, #16
 8000374:	0019      	movs	r1, r3
 8000376:	0028      	movs	r0, r5
 8000378:	f000 fbde 	bl	8000b38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 800037c:	2180      	movs	r1, #128	@ 0x80
 800037e:	9104      	str	r1, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000380:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000382:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000384:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000386:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8000388:	a904      	add	r1, sp, #16
 800038a:	0028      	movs	r0, r5
 800038c:	f000 fbd4 	bl	8000b38 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000390:	b00b      	add	sp, #44	@ 0x2c
 8000392:	bcf0      	pop	{r4, r5, r6, r7}
 8000394:	46bb      	mov	fp, r7
 8000396:	46b2      	mov	sl, r6
 8000398:	46a9      	mov	r9, r5
 800039a:	46a0      	mov	r8, r4
 800039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000
 80003a4:	48000400 	.word	0x48000400

080003a8 <TIM16_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM16_IRQHandler(void)
{
 80003a8:	b510      	push	{r4, lr}
  // Acknowledge interrupt
	HAL_TIM_IRQHandler(&htim16);
 80003aa:	4855      	ldr	r0, [pc, #340]	@ (8000500 <TIM16_IRQHandler+0x158>)
 80003ac:	f000 fa97 	bl	80008de <HAL_TIM_IRQHandler>

	// TODO: Change LED pattern
  if (PA1_state == 1) {
 80003b0:	4b54      	ldr	r3, [pc, #336]	@ (8000504 <TIM16_IRQHandler+0x15c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d004      	beq.n	80003c2 <TIM16_IRQHandler+0x1a>
    } else if (led_position <= 0) {
      led_position = 0;
      led_direction = 1;   // Change direction to move right
    }

  } else if (PA2_state == 1) {
 80003b8:	4b53      	ldr	r3, [pc, #332]	@ (8000508 <TIM16_IRQHandler+0x160>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d04f      	beq.n	8000460 <TIM16_IRQHandler+0xb8>
    }
  } else if (PA3_state == 1) {
    // Button 3 pressed
  }

}
 80003c0:	bd10      	pop	{r4, pc}
 80003c2:	4b52      	ldr	r3, [pc, #328]	@ (800050c <TIM16_IRQHandler+0x164>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80003c8:	3201      	adds	r2, #1
 80003ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80003cc:	3202      	adds	r2, #2
 80003ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d0:	3204      	adds	r2, #4
 80003d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d4:	3208      	adds	r2, #8
 80003d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80003d8:	3210      	adds	r2, #16
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
 80003dc:	3220      	adds	r2, #32
 80003de:	629a      	str	r2, [r3, #40]	@ 0x28
 80003e0:	3240      	adds	r2, #64	@ 0x40
 80003e2:	629a      	str	r2, [r3, #40]	@ 0x28
    switch(led_position) {
 80003e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000510 <TIM16_IRQHandler+0x168>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d806      	bhi.n	80003fa <TIM16_IRQHandler+0x52>
 80003ec:	009a      	lsls	r2, r3, #2
 80003ee:	4949      	ldr	r1, [pc, #292]	@ (8000514 <TIM16_IRQHandler+0x16c>)
 80003f0:	588a      	ldr	r2, [r1, r2]
 80003f2:	4697      	mov	pc, r2
  WRITE_REG(GPIOx->BSRR, PinMask);
 80003f4:	4a45      	ldr	r2, [pc, #276]	@ (800050c <TIM16_IRQHandler+0x164>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	6191      	str	r1, [r2, #24]
    led_position += led_direction;
 80003fa:	4a47      	ldr	r2, [pc, #284]	@ (8000518 <TIM16_IRQHandler+0x170>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	189b      	adds	r3, r3, r2
 8000400:	4a43      	ldr	r2, [pc, #268]	@ (8000510 <TIM16_IRQHandler+0x168>)
 8000402:	6013      	str	r3, [r2, #0]
    if (led_position >= 7) {
 8000404:	2b06      	cmp	r3, #6
 8000406:	dd22      	ble.n	800044e <TIM16_IRQHandler+0xa6>
      led_position = 7;
 8000408:	0013      	movs	r3, r2
 800040a:	2207      	movs	r2, #7
 800040c:	601a      	str	r2, [r3, #0]
      led_direction = -1;  // Change direction to move left
 800040e:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <TIM16_IRQHandler+0x170>)
 8000410:	3a08      	subs	r2, #8
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e7d4      	b.n	80003c0 <TIM16_IRQHandler+0x18>
 8000416:	4a3d      	ldr	r2, [pc, #244]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000418:	2102      	movs	r1, #2
 800041a:	6191      	str	r1, [r2, #24]
}
 800041c:	e7ed      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800041e:	4a3b      	ldr	r2, [pc, #236]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000420:	2104      	movs	r1, #4
 8000422:	6191      	str	r1, [r2, #24]
}
 8000424:	e7e9      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000426:	4a39      	ldr	r2, [pc, #228]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000428:	2108      	movs	r1, #8
 800042a:	6191      	str	r1, [r2, #24]
}
 800042c:	e7e5      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800042e:	4a37      	ldr	r2, [pc, #220]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000430:	2110      	movs	r1, #16
 8000432:	6191      	str	r1, [r2, #24]
}
 8000434:	e7e1      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000436:	4a35      	ldr	r2, [pc, #212]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000438:	2120      	movs	r1, #32
 800043a:	6191      	str	r1, [r2, #24]
}
 800043c:	e7dd      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800043e:	4a33      	ldr	r2, [pc, #204]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000440:	2140      	movs	r1, #64	@ 0x40
 8000442:	6191      	str	r1, [r2, #24]
}
 8000444:	e7d9      	b.n	80003fa <TIM16_IRQHandler+0x52>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000446:	4a31      	ldr	r2, [pc, #196]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000448:	2180      	movs	r1, #128	@ 0x80
 800044a:	6191      	str	r1, [r2, #24]
}
 800044c:	e7d5      	b.n	80003fa <TIM16_IRQHandler+0x52>
    } else if (led_position <= 0) {
 800044e:	2b00      	cmp	r3, #0
 8000450:	dcb6      	bgt.n	80003c0 <TIM16_IRQHandler+0x18>
      led_position = 0;
 8000452:	4b2f      	ldr	r3, [pc, #188]	@ (8000510 <TIM16_IRQHandler+0x168>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
      led_direction = 1;   // Change direction to move right
 8000458:	4b2f      	ldr	r3, [pc, #188]	@ (8000518 <TIM16_IRQHandler+0x170>)
 800045a:	3201      	adds	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	e7af      	b.n	80003c0 <TIM16_IRQHandler+0x18>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000460:	4b2a      	ldr	r3, [pc, #168]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000462:	2201      	movs	r2, #1
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	3201      	adds	r2, #1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	3202      	adds	r2, #2
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	3204      	adds	r2, #4
 8000470:	619a      	str	r2, [r3, #24]
 8000472:	3208      	adds	r2, #8
 8000474:	619a      	str	r2, [r3, #24]
 8000476:	3210      	adds	r2, #16
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	3220      	adds	r2, #32
 800047c:	619a      	str	r2, [r3, #24]
 800047e:	3240      	adds	r2, #64	@ 0x40
 8000480:	619a      	str	r2, [r3, #24]
    switch(led_position) {
 8000482:	4b23      	ldr	r3, [pc, #140]	@ (8000510 <TIM16_IRQHandler+0x168>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d806      	bhi.n	8000498 <TIM16_IRQHandler+0xf0>
 800048a:	009a      	lsls	r2, r3, #2
 800048c:	4923      	ldr	r1, [pc, #140]	@ (800051c <TIM16_IRQHandler+0x174>)
 800048e:	588a      	ldr	r2, [r1, r2]
 8000490:	4697      	mov	pc, r2
  WRITE_REG(GPIOx->BRR, PinMask);
 8000492:	4a1e      	ldr	r2, [pc, #120]	@ (800050c <TIM16_IRQHandler+0x164>)
 8000494:	2101      	movs	r1, #1
 8000496:	6291      	str	r1, [r2, #40]	@ 0x28
    led_position += led_direction;
 8000498:	4a1f      	ldr	r2, [pc, #124]	@ (8000518 <TIM16_IRQHandler+0x170>)
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	189b      	adds	r3, r3, r2
 800049e:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <TIM16_IRQHandler+0x168>)
 80004a0:	6013      	str	r3, [r2, #0]
    if (led_position >= 7) {
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	dd22      	ble.n	80004ec <TIM16_IRQHandler+0x144>
      led_position = 7;
 80004a6:	0013      	movs	r3, r2
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
      led_direction = -1;  // Change direction to move left
 80004ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <TIM16_IRQHandler+0x170>)
 80004ae:	3a08      	subs	r2, #8
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	e785      	b.n	80003c0 <TIM16_IRQHandler+0x18>
 80004b4:	4a15      	ldr	r2, [pc, #84]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004b6:	2102      	movs	r1, #2
 80004b8:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004ba:	e7ed      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004bc:	4a13      	ldr	r2, [pc, #76]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004be:	2104      	movs	r1, #4
 80004c0:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004c2:	e7e9      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004c6:	2108      	movs	r1, #8
 80004c8:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004ca:	e7e5      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004cc:	4a0f      	ldr	r2, [pc, #60]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004ce:	2110      	movs	r1, #16
 80004d0:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004d2:	e7e1      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004d6:	2120      	movs	r1, #32
 80004d8:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004da:	e7dd      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004dc:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004de:	2140      	movs	r1, #64	@ 0x40
 80004e0:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004e2:	e7d9      	b.n	8000498 <TIM16_IRQHandler+0xf0>
  WRITE_REG(GPIOx->BRR, PinMask);
 80004e4:	4a09      	ldr	r2, [pc, #36]	@ (800050c <TIM16_IRQHandler+0x164>)
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	6291      	str	r1, [r2, #40]	@ 0x28
}
 80004ea:	e7d5      	b.n	8000498 <TIM16_IRQHandler+0xf0>
    } else if (led_position <= 0) {
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dd00      	ble.n	80004f2 <TIM16_IRQHandler+0x14a>
 80004f0:	e766      	b.n	80003c0 <TIM16_IRQHandler+0x18>
      led_position = 0;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <TIM16_IRQHandler+0x168>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
      led_direction = 1;   // Change direction to move right
 80004f8:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <TIM16_IRQHandler+0x170>)
 80004fa:	3201      	adds	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	e75f      	b.n	80003c0 <TIM16_IRQHandler+0x18>
 8000500:	20000044 	.word	0x20000044
 8000504:	2000003c 	.word	0x2000003c
 8000508:	20000038 	.word	0x20000038
 800050c:	48000400 	.word	0x48000400
 8000510:	2000002c 	.word	0x2000002c
 8000514:	08000cc4 	.word	0x08000cc4
 8000518:	20000000 	.word	0x20000000
 800051c:	08000ce4 	.word	0x08000ce4

08000520 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000522:	e7fe      	b.n	8000522 <Error_Handler+0x2>

08000524 <MX_TIM16_Init>:
{
 8000524:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8000526:	480c      	ldr	r0, [pc, #48]	@ (8000558 <MX_TIM16_Init+0x34>)
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <MX_TIM16_Init+0x38>)
 800052a:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 8000-1;
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_TIM16_Init+0x3c>)
 800052e:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	2300      	movs	r3, #0
 8000532:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 1000-1;
 8000534:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <MX_TIM16_Init+0x40>)
 8000536:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800053a:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800053c:	3380      	adds	r3, #128	@ 0x80
 800053e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000540:	f000 fac4 	bl	8000acc <HAL_TIM_Base_Init>
 8000544:	2800      	cmp	r0, #0
 8000546:	d104      	bne.n	8000552 <MX_TIM16_Init+0x2e>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <MX_TIM16_Init+0x44>)
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	0392      	lsls	r2, r2, #14
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000552:	f7ff ffe5 	bl	8000520 <Error_Handler>
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	20000044 	.word	0x20000044
 800055c:	40014400 	.word	0x40014400
 8000560:	00001f3f 	.word	0x00001f3f
 8000564:	000003e7 	.word	0x000003e7
 8000568:	e000e100 	.word	0xe000e100

0800056c <SystemClock_Config>:
{
 800056c:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800056e:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <SystemClock_Config+0x6c>)
 8000570:	6813      	ldr	r3, [r2, #0]
 8000572:	2101      	movs	r1, #1
 8000574:	438b      	bics	r3, r1
 8000576:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <SystemClock_Config+0x6c>)
 800057a:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800057c:	07db      	lsls	r3, r3, #31
 800057e:	d4fb      	bmi.n	8000578 <SystemClock_Config+0xc>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000580:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <SystemClock_Config+0x70>)
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	2101      	movs	r1, #1
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <SystemClock_Config+0x70>)
 800058c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800058e:	079b      	lsls	r3, r3, #30
 8000590:	d5fb      	bpl.n	800058a <SystemClock_Config+0x1e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <SystemClock_Config+0x70>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	21f8      	movs	r1, #248	@ 0xf8
 8000598:	438a      	bics	r2, r1
 800059a:	3978      	subs	r1, #120	@ 0x78
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	3170      	adds	r1, #112	@ 0x70
 80005a4:	438a      	bics	r2, r1
 80005a6:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <SystemClock_Config+0x74>)
 80005ac:	400a      	ands	r2, r1
 80005ae:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	2103      	movs	r1, #3
 80005b4:	438a      	bics	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <SystemClock_Config+0x70>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	220c      	movs	r2, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80005be:	421a      	tst	r2, r3
 80005c0:	d1fa      	bne.n	80005b8 <SystemClock_Config+0x4c>
  LL_SetSystemCoreClock(8000000);
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <SystemClock_Config+0x78>)
 80005c4:	f000 fb14 	bl	8000bf0 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f887 	bl	80006dc <HAL_InitTick>
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d100      	bne.n	80005d4 <SystemClock_Config+0x68>
}
 80005d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005d4:	f7ff ffa4 	bl	8000520 <Error_Handler>
 80005d8:	40022000 	.word	0x40022000
 80005dc:	40021000 	.word	0x40021000
 80005e0:	fffff8ff 	.word	0xfffff8ff
 80005e4:	007a1200 	.word	0x007a1200

080005e8 <main>:
{
 80005e8:	b510      	push	{r4, lr}
  HAL_Init();
 80005ea:	f000 f89f 	bl	800072c <HAL_Init>
  SystemClock_Config();
 80005ee:	f7ff ffbd 	bl	800056c <SystemClock_Config>
  MX_GPIO_Init();
 80005f2:	f7ff fe15 	bl	8000220 <MX_GPIO_Init>
  MX_TIM16_Init();
 80005f6:	f7ff ff95 	bl	8000524 <MX_TIM16_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80005fa:	4831      	ldr	r0, [pc, #196]	@ (80006c0 <main+0xd8>)
 80005fc:	f000 f934 	bl	8000868 <HAL_TIM_Base_Start_IT>
 8000600:	e034      	b.n	800066c <main+0x84>
    } else if (PA2_state == 0 && !LL_GPIO_IsInputPinSet(Button2_GPIO_Port, Button2_Pin)) {
 8000602:	4a30      	ldr	r2, [pc, #192]	@ (80006c4 <main+0xdc>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	2a00      	cmp	r2, #0
 8000608:	d10d      	bne.n	8000626 <main+0x3e>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800060a:	2290      	movs	r2, #144	@ 0x90
 800060c:	05d2      	lsls	r2, r2, #23
 800060e:	6912      	ldr	r2, [r2, #16]
 8000610:	0752      	lsls	r2, r2, #29
 8000612:	d408      	bmi.n	8000626 <main+0x3e>
        PA1_state = 0;
 8000614:	4a2c      	ldr	r2, [pc, #176]	@ (80006c8 <main+0xe0>)
 8000616:	2100      	movs	r1, #0
 8000618:	6011      	str	r1, [r2, #0]
        PA2_state = 1;
 800061a:	4a2a      	ldr	r2, [pc, #168]	@ (80006c4 <main+0xdc>)
 800061c:	2001      	movs	r0, #1
 800061e:	6010      	str	r0, [r2, #0]
        PA3_state = 0;
 8000620:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <main+0xe4>)
 8000622:	6011      	str	r1, [r2, #0]
 8000624:	e03a      	b.n	800069c <main+0xb4>
    } else if (PA3_state == 0 && !LL_GPIO_IsInputPinSet(Button3_GPIO_Port, Button3_Pin)) {
 8000626:	4a29      	ldr	r2, [pc, #164]	@ (80006cc <main+0xe4>)
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	2a00      	cmp	r2, #0
 800062c:	d136      	bne.n	800069c <main+0xb4>
 800062e:	2290      	movs	r2, #144	@ 0x90
 8000630:	05d2      	lsls	r2, r2, #23
 8000632:	6912      	ldr	r2, [r2, #16]
 8000634:	0712      	lsls	r2, r2, #28
 8000636:	d431      	bmi.n	800069c <main+0xb4>
        PA1_state = 0;
 8000638:	4a23      	ldr	r2, [pc, #140]	@ (80006c8 <main+0xe0>)
 800063a:	2100      	movs	r1, #0
 800063c:	6011      	str	r1, [r2, #0]
        PA2_state = 0;
 800063e:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <main+0xdc>)
 8000640:	6011      	str	r1, [r2, #0]
        PA3_state = 1;
 8000642:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <main+0xe4>)
 8000644:	3101      	adds	r1, #1
 8000646:	6011      	str	r1, [r2, #0]
 8000648:	e028      	b.n	800069c <main+0xb4>
            htim16.Init.Period = 500 - 1;
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <main+0xd8>)
 800064c:	22f4      	movs	r2, #244	@ 0xf4
 800064e:	32ff      	adds	r2, #255	@ 0xff
 8000650:	60da      	str	r2, [r3, #12]
            delay_mode = 0;
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <main+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Init(&htim16);
 8000658:	4819      	ldr	r0, [pc, #100]	@ (80006c0 <main+0xd8>)
 800065a:	f000 fa37 	bl	8000acc <HAL_TIM_Base_Init>
 800065e:	2390      	movs	r3, #144	@ 0x90
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	691a      	ldr	r2, [r3, #16]
 8000664:	2301      	movs	r3, #1
 8000666:	4013      	ands	r3, r2
    PA0_state = LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin);
 8000668:	4a1a      	ldr	r2, [pc, #104]	@ (80006d4 <main+0xec>)
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	2390      	movs	r3, #144	@ 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	691a      	ldr	r2, [r3, #16]
 8000672:	2301      	movs	r3, #1
 8000674:	4013      	ands	r3, r2
    PA0_state = LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin);
 8000676:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <main+0xec>)
 8000678:	6013      	str	r3, [r2, #0]
    if (PA1_state == 0 && !LL_GPIO_IsInputPinSet(Button1_GPIO_Port, Button1_Pin)) {
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <main+0xe0>)
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	2a00      	cmp	r2, #0
 8000680:	d1bf      	bne.n	8000602 <main+0x1a>
 8000682:	2290      	movs	r2, #144	@ 0x90
 8000684:	05d2      	lsls	r2, r2, #23
 8000686:	6912      	ldr	r2, [r2, #16]
 8000688:	0792      	lsls	r2, r2, #30
 800068a:	d4ba      	bmi.n	8000602 <main+0x1a>
        PA1_state = 1;
 800068c:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <main+0xe0>)
 800068e:	2101      	movs	r1, #1
 8000690:	6011      	str	r1, [r2, #0]
        PA2_state = 0;
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <main+0xdc>)
 8000694:	2100      	movs	r1, #0
 8000696:	6011      	str	r1, [r2, #0]
        PA3_state = 0;
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <main+0xe4>)
 800069a:	6011      	str	r1, [r2, #0]
    if (PA0_state == 0 && !LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin)) {
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1de      	bne.n	800065e <main+0x76>
 80006a0:	2390      	movs	r3, #144	@ 0x90
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	07db      	lsls	r3, r3, #31
 80006a8:	d4d9      	bmi.n	800065e <main+0x76>
        if (delay_mode == 0) {
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <main+0xe8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1cb      	bne.n	800064a <main+0x62>
            htim16.Init.Period = 1000 - 1;
 80006b2:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <main+0xd8>)
 80006b4:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <main+0xf0>)
 80006b6:	60da      	str	r2, [r3, #12]
            delay_mode = 1;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <main+0xe8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e7cb      	b.n	8000658 <main+0x70>
 80006c0:	20000044 	.word	0x20000044
 80006c4:	20000038 	.word	0x20000038
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000030 	.word	0x20000030
 80006d4:	20000040 	.word	0x20000040
 80006d8:	000003e7 	.word	0x000003e7

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <HAL_InitTick+0x44>)
 80006e2:	7819      	ldrb	r1, [r3, #0]
 80006e4:	20fa      	movs	r0, #250	@ 0xfa
 80006e6:	0080      	lsls	r0, r0, #2
 80006e8:	f7ff fcea 	bl	80000c0 <__udivsi3>
 80006ec:	0001      	movs	r1, r0
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <HAL_InitTick+0x48>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	f7ff fce5 	bl	80000c0 <__udivsi3>
 80006f6:	f000 f885 	bl	8000804 <HAL_SYSTICK_Config>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d10d      	bne.n	800071a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	2c03      	cmp	r4, #3
 8000700:	d901      	bls.n	8000706 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
 8000704:	e00a      	b.n	800071c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000706:	3001      	adds	r0, #1
 8000708:	2200      	movs	r2, #0
 800070a:	0021      	movs	r1, r4
 800070c:	4240      	negs	r0, r0
 800070e:	f000 f875 	bl	80007fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <HAL_InitTick+0x4c>)
 8000714:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000716:	2000      	movs	r0, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x40>
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
}
 800071c:	bd10      	pop	{r4, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000004 	.word	0x20000004
 8000724:	2000000c 	.word	0x2000000c
 8000728:	20000008 	.word	0x20000008

0800072c <HAL_Init>:
{
 800072c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072e:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <HAL_Init+0x1c>)
 8000730:	6813      	ldr	r3, [r2, #0]
 8000732:	2110      	movs	r1, #16
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000738:	2003      	movs	r0, #3
 800073a:	f7ff ffcf 	bl	80006dc <HAL_InitTick>
  HAL_MspInit();
 800073e:	f000 f865 	bl	800080c <HAL_MspInit>
}
 8000742:	2000      	movs	r0, #0
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x10>)
 800074e:	6811      	ldr	r1, [r2, #0]
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <HAL_IncTick+0x14>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	185b      	adds	r3, r3, r1
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	4770      	bx	lr
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	2000008c 	.word	0x2000008c
 8000760:	20000004 	.word	0x20000004

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000766:	2800      	cmp	r0, #0
 8000768:	db11      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076a:	0883      	lsrs	r3, r0, #2
 800076c:	4d13      	ldr	r5, [pc, #76]	@ (80007bc <__NVIC_SetPriority+0x58>)
 800076e:	33c0      	adds	r3, #192	@ 0xc0
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	595c      	ldr	r4, [r3, r5]
 8000774:	2203      	movs	r2, #3
 8000776:	4010      	ands	r0, r2
 8000778:	00c0      	lsls	r0, r0, #3
 800077a:	32fc      	adds	r2, #252	@ 0xfc
 800077c:	0016      	movs	r6, r2
 800077e:	4086      	lsls	r6, r0
 8000780:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000782:	0189      	lsls	r1, r1, #6
 8000784:	400a      	ands	r2, r1
 8000786:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000788:	4322      	orrs	r2, r4
 800078a:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078e:	230f      	movs	r3, #15
 8000790:	4003      	ands	r3, r0
 8000792:	3b08      	subs	r3, #8
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	3306      	adds	r3, #6
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4a09      	ldr	r2, [pc, #36]	@ (80007c0 <__NVIC_SetPriority+0x5c>)
 800079c:	4694      	mov	ip, r2
 800079e:	4463      	add	r3, ip
 80007a0:	685c      	ldr	r4, [r3, #4]
 80007a2:	2203      	movs	r2, #3
 80007a4:	4010      	ands	r0, r2
 80007a6:	00c0      	lsls	r0, r0, #3
 80007a8:	32fc      	adds	r2, #252	@ 0xfc
 80007aa:	0015      	movs	r5, r2
 80007ac:	4085      	lsls	r5, r0
 80007ae:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b0:	0189      	lsls	r1, r1, #6
 80007b2:	400a      	ands	r2, r1
 80007b4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b6:	4322      	orrs	r2, r4
 80007b8:	605a      	str	r2, [r3, #4]
}
 80007ba:	e7e7      	b.n	800078c <__NVIC_SetPriority+0x28>
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	3801      	subs	r0, #1
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	045b      	lsls	r3, r3, #17
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d20f      	bcs.n	80007ee <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <SysTick_Config+0x30>)
 80007d0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <SysTick_Config+0x34>)
 80007d4:	6a03      	ldr	r3, [r0, #32]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	21c0      	movs	r1, #192	@ 0xc0
 80007dc:	0609      	lsls	r1, r1, #24
 80007de:	430b      	orrs	r3, r1
 80007e0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e2:	2300      	movs	r3, #0
 80007e4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	3307      	adds	r3, #7
 80007e8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ea:	2000      	movs	r0, #0
}
 80007ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2001      	movs	r0, #1
 80007f0:	e7fc      	b.n	80007ec <SysTick_Config+0x28>
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	e000e010 	.word	0xe000e010
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007fe:	f7ff ffb1 	bl	8000764 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000802:	bd10      	pop	{r4, pc}

08000804 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000804:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 8000806:	f7ff ffdd 	bl	80007c4 <SysTick_Config>
}
 800080a:	bd10      	pop	{r4, pc}

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_MspInit+0x2c>)
 8000810:	6999      	ldr	r1, [r3, #24]
 8000812:	2201      	movs	r2, #1
 8000814:	4311      	orrs	r1, r2
 8000816:	6199      	str	r1, [r3, #24]
 8000818:	6999      	ldr	r1, [r3, #24]
 800081a:	400a      	ands	r2, r1
 800081c:	9200      	str	r2, [sp, #0]
 800081e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	0549      	lsls	r1, r1, #21
 8000826:	430a      	orrs	r2, r1
 8000828:	61da      	str	r2, [r3, #28]
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	400b      	ands	r3, r1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	b002      	add	sp, #8
 8000834:	4770      	bx	lr
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM16)
 800083e:	6802      	ldr	r2, [r0, #0]
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_TIM_Base_MspInit+0x24>)
 8000842:	429a      	cmp	r2, r3
 8000844:	d001      	beq.n	800084a <HAL_TIM_Base_MspInit+0xe>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000846:	b002      	add	sp, #8
 8000848:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_ENABLE();
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_TIM_Base_MspInit+0x28>)
 800084c:	699a      	ldr	r2, [r3, #24]
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	0289      	lsls	r1, r1, #10
 8000852:	430a      	orrs	r2, r1
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	400b      	ands	r3, r1
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9b01      	ldr	r3, [sp, #4]
}
 800085e:	e7f2      	b.n	8000846 <HAL_TIM_Base_MspInit+0xa>
 8000860:	40014400 	.word	0x40014400
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000868:	233d      	movs	r3, #61	@ 0x3d
 800086a:	5cc3      	ldrb	r3, [r0, r3]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d126      	bne.n	80008be <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000870:	333c      	adds	r3, #60	@ 0x3c
 8000872:	2202      	movs	r2, #2
 8000874:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000876:	6802      	ldr	r2, [r0, #0]
 8000878:	68d3      	ldr	r3, [r2, #12]
 800087a:	2101      	movs	r1, #1
 800087c:	430b      	orrs	r3, r1
 800087e:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <HAL_TIM_Base_Start_IT+0x60>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d00f      	beq.n	80008a8 <HAL_TIM_Base_Start_IT+0x40>
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	05d2      	lsls	r2, r2, #23
 800088c:	4293      	cmp	r3, r2
 800088e:	d00b      	beq.n	80008a8 <HAL_TIM_Base_Start_IT+0x40>
 8000890:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_TIM_Base_Start_IT+0x64>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d008      	beq.n	80008a8 <HAL_TIM_Base_Start_IT+0x40>
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_TIM_Base_Start_IT+0x68>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d005      	beq.n	80008a8 <HAL_TIM_Base_Start_IT+0x40>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
 80008a6:	e00b      	b.n	80008c0 <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80008a8:	6899      	ldr	r1, [r3, #8]
 80008aa:	2207      	movs	r2, #7
 80008ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80008ae:	2a06      	cmp	r2, #6
 80008b0:	d007      	beq.n	80008c2 <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80008ba:	2000      	movs	r0, #0
 80008bc:	e000      	b.n	80008c0 <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
}
 80008c0:	4770      	bx	lr
  return HAL_OK;
 80008c2:	2000      	movs	r0, #0
 80008c4:	e7fc      	b.n	80008c0 <HAL_TIM_Base_Start_IT+0x58>
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	40012c00 	.word	0x40012c00
 80008cc:	40000400 	.word	0x40000400
 80008d0:	40014000 	.word	0x40014000

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80008d4:	4770      	bx	lr

080008d6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80008d6:	4770      	bx	lr

080008d8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80008d8:	4770      	bx	lr

080008da <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80008da:	4770      	bx	lr

080008dc <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80008dc:	4770      	bx	lr

080008de <HAL_TIM_IRQHandler>:
{
 80008de:	b570      	push	{r4, r5, r6, lr}
 80008e0:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80008e2:	6803      	ldr	r3, [r0, #0]
 80008e4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80008e6:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80008e8:	07aa      	lsls	r2, r5, #30
 80008ea:	d50e      	bpl.n	800090a <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80008ec:	07b2      	lsls	r2, r6, #30
 80008ee:	d50c      	bpl.n	800090a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80008f0:	2203      	movs	r2, #3
 80008f2:	4252      	negs	r2, r2
 80008f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80008fa:	6803      	ldr	r3, [r0, #0]
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	079b      	lsls	r3, r3, #30
 8000900:	d051      	beq.n	80009a6 <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 8000902:	f7ff ffe9 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000906:	2300      	movs	r3, #0
 8000908:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800090a:	076b      	lsls	r3, r5, #29
 800090c:	d512      	bpl.n	8000934 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800090e:	0773      	lsls	r3, r6, #29
 8000910:	d510      	bpl.n	8000934 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	4252      	negs	r2, r2
 8000918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800091a:	2302      	movs	r3, #2
 800091c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	23c0      	movs	r3, #192	@ 0xc0
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	421a      	tst	r2, r3
 8000928:	d043      	beq.n	80009b2 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 800092a:	0020      	movs	r0, r4
 800092c:	f7ff ffd4 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000930:	2300      	movs	r3, #0
 8000932:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000934:	072b      	lsls	r3, r5, #28
 8000936:	d510      	bpl.n	800095a <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000938:	0733      	lsls	r3, r6, #28
 800093a:	d50e      	bpl.n	800095a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	2209      	movs	r2, #9
 8000940:	4252      	negs	r2, r2
 8000942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000944:	2304      	movs	r3, #4
 8000946:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	079b      	lsls	r3, r3, #30
 800094e:	d037      	beq.n	80009c0 <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 8000950:	0020      	movs	r0, r4
 8000952:	f7ff ffc1 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000956:	2300      	movs	r3, #0
 8000958:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800095a:	06eb      	lsls	r3, r5, #27
 800095c:	d512      	bpl.n	8000984 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800095e:	06f3      	lsls	r3, r6, #27
 8000960:	d510      	bpl.n	8000984 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	2211      	movs	r2, #17
 8000966:	4252      	negs	r2, r2
 8000968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800096a:	2308      	movs	r3, #8
 800096c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	69da      	ldr	r2, [r3, #28]
 8000972:	23c0      	movs	r3, #192	@ 0xc0
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	421a      	tst	r2, r3
 8000978:	d029      	beq.n	80009ce <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 800097a:	0020      	movs	r0, r4
 800097c:	f7ff ffac 	bl	80008d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000980:	2300      	movs	r3, #0
 8000982:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000984:	07eb      	lsls	r3, r5, #31
 8000986:	d501      	bpl.n	800098c <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8000988:	07f3      	lsls	r3, r6, #31
 800098a:	d427      	bmi.n	80009dc <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800098c:	062b      	lsls	r3, r5, #24
 800098e:	d501      	bpl.n	8000994 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000990:	0633      	lsls	r3, r6, #24
 8000992:	d42b      	bmi.n	80009ec <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000994:	066b      	lsls	r3, r5, #25
 8000996:	d501      	bpl.n	800099c <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8000998:	0673      	lsls	r3, r6, #25
 800099a:	d42f      	bmi.n	80009fc <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800099c:	06ad      	lsls	r5, r5, #26
 800099e:	d501      	bpl.n	80009a4 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80009a0:	06b6      	lsls	r6, r6, #26
 80009a2:	d433      	bmi.n	8000a0c <HAL_TIM_IRQHandler+0x12e>
}
 80009a4:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80009a6:	f7ff ff96 	bl	80008d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff ff95 	bl	80008da <HAL_TIM_PWM_PulseFinishedCallback>
 80009b0:	e7a9      	b.n	8000906 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80009b2:	0020      	movs	r0, r4
 80009b4:	f7ff ff8f 	bl	80008d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009b8:	0020      	movs	r0, r4
 80009ba:	f7ff ff8e 	bl	80008da <HAL_TIM_PWM_PulseFinishedCallback>
 80009be:	e7b7      	b.n	8000930 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80009c0:	0020      	movs	r0, r4
 80009c2:	f7ff ff88 	bl	80008d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff ff87 	bl	80008da <HAL_TIM_PWM_PulseFinishedCallback>
 80009cc:	e7c3      	b.n	8000956 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80009ce:	0020      	movs	r0, r4
 80009d0:	f7ff ff81 	bl	80008d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009d4:	0020      	movs	r0, r4
 80009d6:	f7ff ff80 	bl	80008da <HAL_TIM_PWM_PulseFinishedCallback>
 80009da:	e7d1      	b.n	8000980 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	2202      	movs	r2, #2
 80009e0:	4252      	negs	r2, r2
 80009e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80009e4:	0020      	movs	r0, r4
 80009e6:	f7ff ff75 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
 80009ea:	e7cf      	b.n	800098c <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	2281      	movs	r2, #129	@ 0x81
 80009f0:	4252      	negs	r2, r2
 80009f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 f896 	bl	8000b26 <HAL_TIMEx_BreakCallback>
 80009fa:	e7cb      	b.n	8000994 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	2241      	movs	r2, #65	@ 0x41
 8000a00:	4252      	negs	r2, r2
 8000a02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000a04:	0020      	movs	r0, r4
 8000a06:	f7ff ff69 	bl	80008dc <HAL_TIM_TriggerCallback>
 8000a0a:	e7c7      	b.n	800099c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	2221      	movs	r2, #33	@ 0x21
 8000a10:	4252      	negs	r2, r2
 8000a12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000a14:	0020      	movs	r0, r4
 8000a16:	f000 f885 	bl	8000b24 <HAL_TIMEx_CommutCallback>
}
 8000a1a:	e7c3      	b.n	80009a4 <HAL_TIM_IRQHandler+0xc6>

08000a1c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000a1c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000a1e:	4a24      	ldr	r2, [pc, #144]	@ (8000ab0 <TIM_Base_SetConfig+0x94>)
 8000a20:	4290      	cmp	r0, r2
 8000a22:	d006      	beq.n	8000a32 <TIM_Base_SetConfig+0x16>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	05d2      	lsls	r2, r2, #23
 8000a28:	4290      	cmp	r0, r2
 8000a2a:	d002      	beq.n	8000a32 <TIM_Base_SetConfig+0x16>
 8000a2c:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <TIM_Base_SetConfig+0x98>)
 8000a2e:	4290      	cmp	r0, r2
 8000a30:	d103      	bne.n	8000a3a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000a32:	2270      	movs	r2, #112	@ 0x70
 8000a34:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8000a36:	684a      	ldr	r2, [r1, #4]
 8000a38:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <TIM_Base_SetConfig+0x94>)
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d012      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	05d2      	lsls	r2, r2, #23
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d00e      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <TIM_Base_SetConfig+0x98>)
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d00b      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <TIM_Base_SetConfig+0x9c>)
 8000a50:	4290      	cmp	r0, r2
 8000a52:	d008      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <TIM_Base_SetConfig+0xa0>)
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d005      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a5a:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <TIM_Base_SetConfig+0xa4>)
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	d002      	beq.n	8000a66 <TIM_Base_SetConfig+0x4a>
 8000a60:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <TIM_Base_SetConfig+0xa8>)
 8000a62:	4290      	cmp	r0, r2
 8000a64:	d103      	bne.n	8000a6e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000a66:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <TIM_Base_SetConfig+0xac>)
 8000a68:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a6a:	68cb      	ldr	r3, [r1, #12]
 8000a6c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	4393      	bics	r3, r2
 8000a72:	694a      	ldr	r2, [r1, #20]
 8000a74:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000a76:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000a78:	688b      	ldr	r3, [r1, #8]
 8000a7a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000a7c:	680b      	ldr	r3, [r1, #0]
 8000a7e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <TIM_Base_SetConfig+0x94>)
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d008      	beq.n	8000a98 <TIM_Base_SetConfig+0x7c>
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <TIM_Base_SetConfig+0xa0>)
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	d005      	beq.n	8000a98 <TIM_Base_SetConfig+0x7c>
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <TIM_Base_SetConfig+0xa4>)
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d002      	beq.n	8000a98 <TIM_Base_SetConfig+0x7c>
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <TIM_Base_SetConfig+0xa8>)
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d101      	bne.n	8000a9c <TIM_Base_SetConfig+0x80>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000a98:	690b      	ldr	r3, [r1, #16]
 8000a9a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8000aa0:	6902      	ldr	r2, [r0, #16]
 8000aa2:	4213      	tst	r3, r2
 8000aa4:	d003      	beq.n	8000aae <TIM_Base_SetConfig+0x92>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8000aa6:	6903      	ldr	r3, [r0, #16]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4393      	bics	r3, r2
 8000aac:	6103      	str	r3, [r0, #16]
  }
}
 8000aae:	4770      	bx	lr
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	40000400 	.word	0x40000400
 8000ab8:	40002000 	.word	0x40002000
 8000abc:	40014000 	.word	0x40014000
 8000ac0:	40014400 	.word	0x40014400
 8000ac4:	40014800 	.word	0x40014800
 8000ac8:	fffffcff 	.word	0xfffffcff

08000acc <HAL_TIM_Base_Init>:
{
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8000ad0:	d026      	beq.n	8000b20 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000ad2:	233d      	movs	r3, #61	@ 0x3d
 8000ad4:	5cc3      	ldrb	r3, [r0, r3]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d01c      	beq.n	8000b14 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ada:	253d      	movs	r5, #61	@ 0x3d
 8000adc:	2302      	movs	r3, #2
 8000ade:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ae0:	0021      	movs	r1, r4
 8000ae2:	c901      	ldmia	r1!, {r0}
 8000ae4:	f7ff ff9a 	bl	8000a1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	2246      	movs	r2, #70	@ 0x46
 8000aec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000aee:	3a08      	subs	r2, #8
 8000af0:	54a3      	strb	r3, [r4, r2]
 8000af2:	3201      	adds	r2, #1
 8000af4:	54a3      	strb	r3, [r4, r2]
 8000af6:	3201      	adds	r2, #1
 8000af8:	54a3      	strb	r3, [r4, r2]
 8000afa:	3201      	adds	r2, #1
 8000afc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000afe:	3201      	adds	r2, #1
 8000b00:	54a3      	strb	r3, [r4, r2]
 8000b02:	3201      	adds	r2, #1
 8000b04:	54a3      	strb	r3, [r4, r2]
 8000b06:	3201      	adds	r2, #1
 8000b08:	54a3      	strb	r3, [r4, r2]
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8000b0e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
}
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8000b14:	333c      	adds	r3, #60	@ 0x3c
 8000b16:	2200      	movs	r2, #0
 8000b18:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8000b1a:	f7ff fe8f 	bl	800083c <HAL_TIM_Base_MspInit>
 8000b1e:	e7dc      	b.n	8000ada <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
 8000b22:	e7f6      	b.n	8000b12 <HAL_TIM_Base_Init+0x46>

08000b24 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000b24:	4770      	bx	lr

08000b26 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000b26:	4770      	bx	lr

08000b28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler>

08000b2a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler>

08000b2c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f7ff fe0b 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bd10      	pop	{r4, pc}

08000b38 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000b3a:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b3c:	e016      	b.n	8000b6c <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b3e:	690b      	ldr	r3, [r1, #16]
 8000b40:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000b42:	68c4      	ldr	r4, [r0, #12]
 8000b44:	002b      	movs	r3, r5
 8000b46:	436b      	muls	r3, r5
 8000b48:	005e      	lsls	r6, r3, #1
 8000b4a:	18f6      	adds	r6, r6, r3
 8000b4c:	43f7      	mvns	r7, r6
 8000b4e:	43b4      	bics	r4, r6
 8000b50:	4666      	mov	r6, ip
 8000b52:	435e      	muls	r6, r3
 8000b54:	4334      	orrs	r4, r6
 8000b56:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000b58:	684c      	ldr	r4, [r1, #4]
 8000b5a:	2c02      	cmp	r4, #2
 8000b5c:	d026      	beq.n	8000bac <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000b5e:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000b60:	6804      	ldr	r4, [r0, #0]
 8000b62:	403c      	ands	r4, r7
 8000b64:	436b      	muls	r3, r5
 8000b66:	4323      	orrs	r3, r4
 8000b68:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8000b6a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b6c:	680c      	ldr	r4, [r1, #0]
 8000b6e:	0023      	movs	r3, r4
 8000b70:	40d3      	lsrs	r3, r2
 8000b72:	d03b      	beq.n	8000bec <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000b74:	2301      	movs	r3, #1
 8000b76:	4093      	lsls	r3, r2
 8000b78:	0025      	movs	r5, r4
 8000b7a:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 8000b7c:	421c      	tst	r4, r3
 8000b7e:	d0f4      	beq.n	8000b6a <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b80:	684b      	ldr	r3, [r1, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d8da      	bhi.n	8000b3e <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b88:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000b8a:	6883      	ldr	r3, [r0, #8]
 8000b8c:	002c      	movs	r4, r5
 8000b8e:	436c      	muls	r4, r5
 8000b90:	0066      	lsls	r6, r4, #1
 8000b92:	1936      	adds	r6, r6, r4
 8000b94:	43b3      	bics	r3, r6
 8000b96:	437c      	muls	r4, r7
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000b9c:	680e      	ldr	r6, [r1, #0]
 8000b9e:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ba0:	6843      	ldr	r3, [r0, #4]
 8000ba2:	43b3      	bics	r3, r6
 8000ba4:	4374      	muls	r4, r6
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	6043      	str	r3, [r0, #4]
}
 8000baa:	e7c8      	b.n	8000b3e <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8000bac:	2dff      	cmp	r5, #255	@ 0xff
 8000bae:	d80d      	bhi.n	8000bcc <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bb0:	694c      	ldr	r4, [r1, #20]
 8000bb2:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000bb4:	6a06      	ldr	r6, [r0, #32]
 8000bb6:	001c      	movs	r4, r3
 8000bb8:	436c      	muls	r4, r5
 8000bba:	436c      	muls	r4, r5
 8000bbc:	0125      	lsls	r5, r4, #4
 8000bbe:	1b2d      	subs	r5, r5, r4
 8000bc0:	43ae      	bics	r6, r5
 8000bc2:	4665      	mov	r5, ip
 8000bc4:	436c      	muls	r4, r5
 8000bc6:	4334      	orrs	r4, r6
 8000bc8:	6204      	str	r4, [r0, #32]
}
 8000bca:	e7c8      	b.n	8000b5e <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bcc:	694c      	ldr	r4, [r1, #20]
 8000bce:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000bd0:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8000bd2:	0a2d      	lsrs	r5, r5, #8
 8000bd4:	002c      	movs	r4, r5
 8000bd6:	436c      	muls	r4, r5
 8000bd8:	436c      	muls	r4, r5
 8000bda:	436c      	muls	r4, r5
 8000bdc:	0125      	lsls	r5, r4, #4
 8000bde:	1b2d      	subs	r5, r5, r4
 8000be0:	43ae      	bics	r6, r5
 8000be2:	4665      	mov	r5, ip
 8000be4:	436c      	muls	r4, r5
 8000be6:	4334      	orrs	r4, r6
 8000be8:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8000bea:	e7b8      	b.n	8000b5e <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8000bec:	2000      	movs	r0, #0
 8000bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bf0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000bf0:	4b01      	ldr	r3, [pc, #4]	@ (8000bf8 <LL_SetSystemCoreClock+0x8>)
 8000bf2:	6018      	str	r0, [r3, #0]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	2000000c 	.word	0x2000000c

08000bfc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bfc:	4770      	bx	lr
	...

08000c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000c04:	f7ff fffa 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f000 f819 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fcd9 	bl	80005e8 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c44:	08000d0c 	.word	0x08000d0c
  ldr r2, =_sbss
 8000c48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c4c:	20000090 	.word	0x20000090

08000c50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_COMP_IRQHandler>

08000c52 <memset>:
 8000c52:	0003      	movs	r3, r0
 8000c54:	1882      	adds	r2, r0, r2
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d100      	bne.n	8000c5c <memset+0xa>
 8000c5a:	4770      	bx	lr
 8000c5c:	7019      	strb	r1, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	e7f9      	b.n	8000c56 <memset+0x4>
	...

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2600      	movs	r6, #0
 8000c68:	4c0c      	ldr	r4, [pc, #48]	@ (8000c9c <__libc_init_array+0x38>)
 8000c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ca0 <__libc_init_array+0x3c>)
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	2600      	movs	r6, #0
 8000c76:	f000 f819 	bl	8000cac <_init>
 8000c7a:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <__libc_init_array+0x40>)
 8000c7c:	4d0a      	ldr	r5, [pc, #40]	@ (8000ca8 <__libc_init_array+0x44>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	00b3      	lsls	r3, r6, #2
 8000c8a:	58eb      	ldr	r3, [r5, r3]
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	00b3      	lsls	r3, r6, #2
 8000c94:	58eb      	ldr	r3, [r5, r3]
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08000d04 	.word	0x08000d04
 8000ca0:	08000d04 	.word	0x08000d04
 8000ca4:	08000d08 	.word	0x08000d08
 8000ca8:	08000d04 	.word	0x08000d04

08000cac <_init>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr

08000cb8 <_fini>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr
