
build/debug/EEE2046Prac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002324  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080023e4  080023e4  000033e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800257c  0800257c  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  0800257c  0800257c  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800257c  0800257c  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002580  08002580  00003580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002584  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000006c  080025f0  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080025f0  00004248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a69f  00000000  00000000  000040cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001984  00000000  00000000  0000e76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006a1d  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000910  00000000  00000000  00016b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007da  00000000  00000000  00017420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c1c  00000000  00000000  00017bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000320e  00000000  00000000  00021816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015e0  00000000  00000000  00024a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000197  00000000  00000000  00026004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__gnu_thumb1_case_shi>:
 80000c0:	b403      	push	{r0, r1}
 80000c2:	4671      	mov	r1, lr
 80000c4:	0849      	lsrs	r1, r1, #1
 80000c6:	0040      	lsls	r0, r0, #1
 80000c8:	0049      	lsls	r1, r1, #1
 80000ca:	5e09      	ldrsh	r1, [r1, r0]
 80000cc:	0049      	lsls	r1, r1, #1
 80000ce:	448e      	add	lr, r1
 80000d0:	bc03      	pop	{r0, r1}
 80000d2:	4770      	bx	lr

080000d4 <__udivsi3>:
 80000d4:	2200      	movs	r2, #0
 80000d6:	0843      	lsrs	r3, r0, #1
 80000d8:	428b      	cmp	r3, r1
 80000da:	d374      	bcc.n	80001c6 <__udivsi3+0xf2>
 80000dc:	0903      	lsrs	r3, r0, #4
 80000de:	428b      	cmp	r3, r1
 80000e0:	d35f      	bcc.n	80001a2 <__udivsi3+0xce>
 80000e2:	0a03      	lsrs	r3, r0, #8
 80000e4:	428b      	cmp	r3, r1
 80000e6:	d344      	bcc.n	8000172 <__udivsi3+0x9e>
 80000e8:	0b03      	lsrs	r3, r0, #12
 80000ea:	428b      	cmp	r3, r1
 80000ec:	d328      	bcc.n	8000140 <__udivsi3+0x6c>
 80000ee:	0c03      	lsrs	r3, r0, #16
 80000f0:	428b      	cmp	r3, r1
 80000f2:	d30d      	bcc.n	8000110 <__udivsi3+0x3c>
 80000f4:	22ff      	movs	r2, #255	@ 0xff
 80000f6:	0209      	lsls	r1, r1, #8
 80000f8:	ba12      	rev	r2, r2
 80000fa:	0c03      	lsrs	r3, r0, #16
 80000fc:	428b      	cmp	r3, r1
 80000fe:	d302      	bcc.n	8000106 <__udivsi3+0x32>
 8000100:	1212      	asrs	r2, r2, #8
 8000102:	0209      	lsls	r1, r1, #8
 8000104:	d065      	beq.n	80001d2 <__udivsi3+0xfe>
 8000106:	0b03      	lsrs	r3, r0, #12
 8000108:	428b      	cmp	r3, r1
 800010a:	d319      	bcc.n	8000140 <__udivsi3+0x6c>
 800010c:	e000      	b.n	8000110 <__udivsi3+0x3c>
 800010e:	0a09      	lsrs	r1, r1, #8
 8000110:	0bc3      	lsrs	r3, r0, #15
 8000112:	428b      	cmp	r3, r1
 8000114:	d301      	bcc.n	800011a <__udivsi3+0x46>
 8000116:	03cb      	lsls	r3, r1, #15
 8000118:	1ac0      	subs	r0, r0, r3
 800011a:	4152      	adcs	r2, r2
 800011c:	0b83      	lsrs	r3, r0, #14
 800011e:	428b      	cmp	r3, r1
 8000120:	d301      	bcc.n	8000126 <__udivsi3+0x52>
 8000122:	038b      	lsls	r3, r1, #14
 8000124:	1ac0      	subs	r0, r0, r3
 8000126:	4152      	adcs	r2, r2
 8000128:	0b43      	lsrs	r3, r0, #13
 800012a:	428b      	cmp	r3, r1
 800012c:	d301      	bcc.n	8000132 <__udivsi3+0x5e>
 800012e:	034b      	lsls	r3, r1, #13
 8000130:	1ac0      	subs	r0, r0, r3
 8000132:	4152      	adcs	r2, r2
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d301      	bcc.n	800013e <__udivsi3+0x6a>
 800013a:	030b      	lsls	r3, r1, #12
 800013c:	1ac0      	subs	r0, r0, r3
 800013e:	4152      	adcs	r2, r2
 8000140:	0ac3      	lsrs	r3, r0, #11
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x76>
 8000146:	02cb      	lsls	r3, r1, #11
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0a83      	lsrs	r3, r0, #10
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x82>
 8000152:	028b      	lsls	r3, r1, #10
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0a43      	lsrs	r3, r0, #9
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x8e>
 800015e:	024b      	lsls	r3, r1, #9
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0a03      	lsrs	r3, r0, #8
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x9a>
 800016a:	020b      	lsls	r3, r1, #8
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	d2cd      	bcs.n	800010e <__udivsi3+0x3a>
 8000172:	09c3      	lsrs	r3, r0, #7
 8000174:	428b      	cmp	r3, r1
 8000176:	d301      	bcc.n	800017c <__udivsi3+0xa8>
 8000178:	01cb      	lsls	r3, r1, #7
 800017a:	1ac0      	subs	r0, r0, r3
 800017c:	4152      	adcs	r2, r2
 800017e:	0983      	lsrs	r3, r0, #6
 8000180:	428b      	cmp	r3, r1
 8000182:	d301      	bcc.n	8000188 <__udivsi3+0xb4>
 8000184:	018b      	lsls	r3, r1, #6
 8000186:	1ac0      	subs	r0, r0, r3
 8000188:	4152      	adcs	r2, r2
 800018a:	0943      	lsrs	r3, r0, #5
 800018c:	428b      	cmp	r3, r1
 800018e:	d301      	bcc.n	8000194 <__udivsi3+0xc0>
 8000190:	014b      	lsls	r3, r1, #5
 8000192:	1ac0      	subs	r0, r0, r3
 8000194:	4152      	adcs	r2, r2
 8000196:	0903      	lsrs	r3, r0, #4
 8000198:	428b      	cmp	r3, r1
 800019a:	d301      	bcc.n	80001a0 <__udivsi3+0xcc>
 800019c:	010b      	lsls	r3, r1, #4
 800019e:	1ac0      	subs	r0, r0, r3
 80001a0:	4152      	adcs	r2, r2
 80001a2:	08c3      	lsrs	r3, r0, #3
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xd8>
 80001a8:	00cb      	lsls	r3, r1, #3
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0883      	lsrs	r3, r0, #2
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xe4>
 80001b4:	008b      	lsls	r3, r1, #2
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0843      	lsrs	r3, r0, #1
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xf0>
 80001c0:	004b      	lsls	r3, r1, #1
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	1a41      	subs	r1, r0, r1
 80001c8:	d200      	bcs.n	80001cc <__udivsi3+0xf8>
 80001ca:	4601      	mov	r1, r0
 80001cc:	4152      	adcs	r2, r2
 80001ce:	4610      	mov	r0, r2
 80001d0:	4770      	bx	lr
 80001d2:	e7ff      	b.n	80001d4 <__udivsi3+0x100>
 80001d4:	b501      	push	{r0, lr}
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 f8f0 	bl	80003bc <__aeabi_idiv0>
 80001dc:	bd02      	pop	{r1, pc}
 80001de:	46c0      	nop			@ (mov r8, r8)

080001e0 <__aeabi_uidivmod>:
 80001e0:	2900      	cmp	r1, #0
 80001e2:	d0f7      	beq.n	80001d4 <__udivsi3+0x100>
 80001e4:	e776      	b.n	80000d4 <__udivsi3>
 80001e6:	4770      	bx	lr

080001e8 <__divsi3>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	430b      	orrs	r3, r1
 80001ec:	d47f      	bmi.n	80002ee <__divsi3+0x106>
 80001ee:	2200      	movs	r2, #0
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d374      	bcc.n	80002e0 <__divsi3+0xf8>
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d35f      	bcc.n	80002bc <__divsi3+0xd4>
 80001fc:	0a03      	lsrs	r3, r0, #8
 80001fe:	428b      	cmp	r3, r1
 8000200:	d344      	bcc.n	800028c <__divsi3+0xa4>
 8000202:	0b03      	lsrs	r3, r0, #12
 8000204:	428b      	cmp	r3, r1
 8000206:	d328      	bcc.n	800025a <__divsi3+0x72>
 8000208:	0c03      	lsrs	r3, r0, #16
 800020a:	428b      	cmp	r3, r1
 800020c:	d30d      	bcc.n	800022a <__divsi3+0x42>
 800020e:	22ff      	movs	r2, #255	@ 0xff
 8000210:	0209      	lsls	r1, r1, #8
 8000212:	ba12      	rev	r2, r2
 8000214:	0c03      	lsrs	r3, r0, #16
 8000216:	428b      	cmp	r3, r1
 8000218:	d302      	bcc.n	8000220 <__divsi3+0x38>
 800021a:	1212      	asrs	r2, r2, #8
 800021c:	0209      	lsls	r1, r1, #8
 800021e:	d065      	beq.n	80002ec <__divsi3+0x104>
 8000220:	0b03      	lsrs	r3, r0, #12
 8000222:	428b      	cmp	r3, r1
 8000224:	d319      	bcc.n	800025a <__divsi3+0x72>
 8000226:	e000      	b.n	800022a <__divsi3+0x42>
 8000228:	0a09      	lsrs	r1, r1, #8
 800022a:	0bc3      	lsrs	r3, r0, #15
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__divsi3+0x4c>
 8000230:	03cb      	lsls	r3, r1, #15
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0b83      	lsrs	r3, r0, #14
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__divsi3+0x58>
 800023c:	038b      	lsls	r3, r1, #14
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0b43      	lsrs	r3, r0, #13
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__divsi3+0x64>
 8000248:	034b      	lsls	r3, r1, #13
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0b03      	lsrs	r3, r0, #12
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x70>
 8000254:	030b      	lsls	r3, r1, #12
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0ac3      	lsrs	r3, r0, #11
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x7c>
 8000260:	02cb      	lsls	r3, r1, #11
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0a83      	lsrs	r3, r0, #10
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x88>
 800026c:	028b      	lsls	r3, r1, #10
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0a43      	lsrs	r3, r0, #9
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x94>
 8000278:	024b      	lsls	r3, r1, #9
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0a03      	lsrs	r3, r0, #8
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0xa0>
 8000284:	020b      	lsls	r3, r1, #8
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	d2cd      	bcs.n	8000228 <__divsi3+0x40>
 800028c:	09c3      	lsrs	r3, r0, #7
 800028e:	428b      	cmp	r3, r1
 8000290:	d301      	bcc.n	8000296 <__divsi3+0xae>
 8000292:	01cb      	lsls	r3, r1, #7
 8000294:	1ac0      	subs	r0, r0, r3
 8000296:	4152      	adcs	r2, r2
 8000298:	0983      	lsrs	r3, r0, #6
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0xba>
 800029e:	018b      	lsls	r3, r1, #6
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	0943      	lsrs	r3, r0, #5
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d301      	bcc.n	80002ae <__divsi3+0xc6>
 80002aa:	014b      	lsls	r3, r1, #5
 80002ac:	1ac0      	subs	r0, r0, r3
 80002ae:	4152      	adcs	r2, r2
 80002b0:	0903      	lsrs	r3, r0, #4
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__divsi3+0xd2>
 80002b6:	010b      	lsls	r3, r1, #4
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	08c3      	lsrs	r3, r0, #3
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xde>
 80002c2:	00cb      	lsls	r3, r1, #3
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xea>
 80002ce:	008b      	lsls	r3, r1, #2
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0843      	lsrs	r3, r0, #1
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xf6>
 80002da:	004b      	lsls	r3, r1, #1
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	1a41      	subs	r1, r0, r1
 80002e2:	d200      	bcs.n	80002e6 <__divsi3+0xfe>
 80002e4:	4601      	mov	r1, r0
 80002e6:	4152      	adcs	r2, r2
 80002e8:	4610      	mov	r0, r2
 80002ea:	4770      	bx	lr
 80002ec:	e05d      	b.n	80003aa <__divsi3+0x1c2>
 80002ee:	0fca      	lsrs	r2, r1, #31
 80002f0:	d000      	beq.n	80002f4 <__divsi3+0x10c>
 80002f2:	4249      	negs	r1, r1
 80002f4:	1003      	asrs	r3, r0, #32
 80002f6:	d300      	bcc.n	80002fa <__divsi3+0x112>
 80002f8:	4240      	negs	r0, r0
 80002fa:	4053      	eors	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	469c      	mov	ip, r3
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d32d      	bcc.n	8000362 <__divsi3+0x17a>
 8000306:	0a03      	lsrs	r3, r0, #8
 8000308:	428b      	cmp	r3, r1
 800030a:	d312      	bcc.n	8000332 <__divsi3+0x14a>
 800030c:	22fc      	movs	r2, #252	@ 0xfc
 800030e:	0189      	lsls	r1, r1, #6
 8000310:	ba12      	rev	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d30c      	bcc.n	8000332 <__divsi3+0x14a>
 8000318:	0189      	lsls	r1, r1, #6
 800031a:	1192      	asrs	r2, r2, #6
 800031c:	428b      	cmp	r3, r1
 800031e:	d308      	bcc.n	8000332 <__divsi3+0x14a>
 8000320:	0189      	lsls	r1, r1, #6
 8000322:	1192      	asrs	r2, r2, #6
 8000324:	428b      	cmp	r3, r1
 8000326:	d304      	bcc.n	8000332 <__divsi3+0x14a>
 8000328:	0189      	lsls	r1, r1, #6
 800032a:	d03a      	beq.n	80003a2 <__divsi3+0x1ba>
 800032c:	1192      	asrs	r2, r2, #6
 800032e:	e000      	b.n	8000332 <__divsi3+0x14a>
 8000330:	0989      	lsrs	r1, r1, #6
 8000332:	09c3      	lsrs	r3, r0, #7
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x154>
 8000338:	01cb      	lsls	r3, r1, #7
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0983      	lsrs	r3, r0, #6
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x160>
 8000344:	018b      	lsls	r3, r1, #6
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	0943      	lsrs	r3, r0, #5
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x16c>
 8000350:	014b      	lsls	r3, r1, #5
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0903      	lsrs	r3, r0, #4
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x178>
 800035c:	010b      	lsls	r3, r1, #4
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	08c3      	lsrs	r3, r0, #3
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x184>
 8000368:	00cb      	lsls	r3, r1, #3
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0883      	lsrs	r3, r0, #2
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x190>
 8000374:	008b      	lsls	r3, r1, #2
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	d2d9      	bcs.n	8000330 <__divsi3+0x148>
 800037c:	0843      	lsrs	r3, r0, #1
 800037e:	428b      	cmp	r3, r1
 8000380:	d301      	bcc.n	8000386 <__divsi3+0x19e>
 8000382:	004b      	lsls	r3, r1, #1
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	4152      	adcs	r2, r2
 8000388:	1a41      	subs	r1, r0, r1
 800038a:	d200      	bcs.n	800038e <__divsi3+0x1a6>
 800038c:	4601      	mov	r1, r0
 800038e:	4663      	mov	r3, ip
 8000390:	4152      	adcs	r2, r2
 8000392:	105b      	asrs	r3, r3, #1
 8000394:	4610      	mov	r0, r2
 8000396:	d301      	bcc.n	800039c <__divsi3+0x1b4>
 8000398:	4240      	negs	r0, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d500      	bpl.n	80003a0 <__divsi3+0x1b8>
 800039e:	4249      	negs	r1, r1
 80003a0:	4770      	bx	lr
 80003a2:	4663      	mov	r3, ip
 80003a4:	105b      	asrs	r3, r3, #1
 80003a6:	d300      	bcc.n	80003aa <__divsi3+0x1c2>
 80003a8:	4240      	negs	r0, r0
 80003aa:	b501      	push	{r0, lr}
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 f805 	bl	80003bc <__aeabi_idiv0>
 80003b2:	bd02      	pop	{r1, pc}

080003b4 <__aeabi_idivmod>:
 80003b4:	2900      	cmp	r1, #0
 80003b6:	d0f8      	beq.n	80003aa <__divsi3+0x1c2>
 80003b8:	e716      	b.n	80001e8 <__divsi3>
 80003ba:	4770      	bx	lr

080003bc <__aeabi_idiv0>:
 80003bc:	4770      	bx	lr
 80003be:	46c0      	nop			@ (mov r8, r8)

080003c0 <__do_global_dtors_aux>:
 80003c0:	b510      	push	{r4, lr}
 80003c2:	4c06      	ldr	r4, [pc, #24]	@ (80003dc <__do_global_dtors_aux+0x1c>)
 80003c4:	7823      	ldrb	r3, [r4, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d107      	bne.n	80003da <__do_global_dtors_aux+0x1a>
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <__do_global_dtors_aux+0x20>)
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d002      	beq.n	80003d6 <__do_global_dtors_aux+0x16>
 80003d0:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <__do_global_dtors_aux+0x24>)
 80003d2:	e000      	b.n	80003d6 <__do_global_dtors_aux+0x16>
 80003d4:	bf00      	nop
 80003d6:	2301      	movs	r3, #1
 80003d8:	7023      	strb	r3, [r4, #0]
 80003da:	bd10      	pop	{r4, pc}
 80003dc:	2000006c 	.word	0x2000006c
 80003e0:	00000000 	.word	0x00000000
 80003e4:	080023cc 	.word	0x080023cc

080003e8 <frame_dummy>:
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <frame_dummy+0x14>)
 80003ea:	b510      	push	{r4, lr}
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d003      	beq.n	80003f8 <frame_dummy+0x10>
 80003f0:	4903      	ldr	r1, [pc, #12]	@ (8000400 <frame_dummy+0x18>)
 80003f2:	4804      	ldr	r0, [pc, #16]	@ (8000404 <frame_dummy+0x1c>)
 80003f4:	e000      	b.n	80003f8 <frame_dummy+0x10>
 80003f6:	bf00      	nop
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	00000000 	.word	0x00000000
 8000400:	20000070 	.word	0x20000070
 8000404:	080023cc 	.word	0x080023cc

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46de      	mov	lr, fp
 800040c:	4657      	mov	r7, sl
 800040e:	464e      	mov	r6, r9
 8000410:	4645      	mov	r5, r8
 8000412:	b5e0      	push	{r5, r6, r7, lr}
 8000414:	b08b      	sub	sp, #44	@ 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	2218      	movs	r2, #24
 8000418:	2100      	movs	r1, #0
 800041a:	a804      	add	r0, sp, #16
 800041c:	f001 f896 	bl	800154c <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000420:	4b59      	ldr	r3, [pc, #356]	@ (8000588 <MX_GPIO_Init+0x180>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	03c9      	lsls	r1, r1, #15
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	400a      	ands	r2, r1
 8000430:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000432:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	2180      	movs	r1, #128	@ 0x80
 8000438:	0289      	lsls	r1, r1, #10
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	400a      	ands	r2, r1
 8000442:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000444:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2180      	movs	r1, #128	@ 0x80
 800044a:	02c9      	lsls	r1, r1, #11
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	400b      	ands	r3, r1
 8000454:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000456:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000458:	4d4c      	ldr	r5, [pc, #304]	@ (800058c <MX_GPIO_Init+0x184>)
 800045a:	2601      	movs	r6, #1
 800045c:	62ae      	str	r6, [r5, #40]	@ 0x28
 800045e:	2302      	movs	r3, #2
 8000460:	469a      	mov	sl, r3
 8000462:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000464:	3302      	adds	r3, #2
 8000466:	4699      	mov	r9, r3
 8000468:	62ab      	str	r3, [r5, #40]	@ 0x28
 800046a:	3304      	adds	r3, #4
 800046c:	4698      	mov	r8, r3
 800046e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000470:	3308      	adds	r3, #8
 8000472:	469b      	mov	fp, r3
 8000474:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000476:	3310      	adds	r3, #16
 8000478:	62ab      	str	r3, [r5, #40]	@ 0x28
 800047a:	2240      	movs	r2, #64	@ 0x40
 800047c:	62aa      	str	r2, [r5, #40]	@ 0x28
 800047e:	2180      	movs	r1, #128	@ 0x80
 8000480:	62a9      	str	r1, [r5, #40]	@ 0x28

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);

  /**/
  GPIO_InitStruct.Pin = Button0_Pin;
 8000482:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000484:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 8000486:	2790      	movs	r7, #144	@ 0x90
 8000488:	05ff      	lsls	r7, r7, #23
 800048a:	a804      	add	r0, sp, #16
 800048c:	0001      	movs	r1, r0
 800048e:	0038      	movs	r0, r7
 8000490:	f000 fe80 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button1_Pin;
 8000494:	4650      	mov	r0, sl
 8000496:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000498:	2400      	movs	r4, #0
 800049a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800049c:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 800049e:	a804      	add	r0, sp, #16
 80004a0:	0001      	movs	r1, r0
 80004a2:	0038      	movs	r0, r7
 80004a4:	f000 fe76 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button2_Pin;
 80004a8:	4648      	mov	r0, r9
 80004aa:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004ae:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 80004b0:	a804      	add	r0, sp, #16
 80004b2:	0001      	movs	r1, r0
 80004b4:	0038      	movs	r0, r7
 80004b6:	f000 fe6d 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button3_Pin;
 80004ba:	4640      	mov	r0, r8
 80004bc:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004be:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004c0:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80004c2:	a804      	add	r0, sp, #16
 80004c4:	0001      	movs	r1, r0
 80004c6:	0038      	movs	r0, r7
 80004c8:	f000 fe64 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 80004cc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ce:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d4:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80004d6:	a804      	add	r0, sp, #16
 80004d8:	0001      	movs	r1, r0
 80004da:	0028      	movs	r0, r5
 80004dc:	f000 fe5a 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 80004e0:	4650      	mov	r0, sl
 80004e2:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004e4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004e6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004e8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ea:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80004ec:	a804      	add	r0, sp, #16
 80004ee:	0001      	movs	r1, r0
 80004f0:	0028      	movs	r0, r5
 80004f2:	f000 fe4f 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 80004f6:	4648      	mov	r0, r9
 80004f8:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004fa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004fc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004fe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000500:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000502:	a804      	add	r0, sp, #16
 8000504:	0001      	movs	r1, r0
 8000506:	0028      	movs	r0, r5
 8000508:	f000 fe44 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 800050c:	4640      	mov	r0, r8
 800050e:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000510:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000512:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000514:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000516:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000518:	a804      	add	r0, sp, #16
 800051a:	0001      	movs	r1, r0
 800051c:	0028      	movs	r0, r5
 800051e:	f000 fe39 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8000522:	4658      	mov	r0, fp
 8000524:	9004      	str	r0, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000526:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000528:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800052a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800052c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800052e:	a804      	add	r0, sp, #16
 8000530:	0001      	movs	r1, r0
 8000532:	0028      	movs	r0, r5
 8000534:	f000 fe2e 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 8000538:	2320      	movs	r3, #32
 800053a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800053c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800053e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000540:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000542:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8000544:	ab04      	add	r3, sp, #16
 8000546:	0019      	movs	r1, r3
 8000548:	0028      	movs	r0, r5
 800054a:	f000 fe23 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 800054e:	2240      	movs	r2, #64	@ 0x40
 8000550:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000552:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000556:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000558:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 800055a:	ab04      	add	r3, sp, #16
 800055c:	0019      	movs	r1, r3
 800055e:	0028      	movs	r0, r5
 8000560:	f000 fe18 	bl	8001194 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	9104      	str	r1, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000568:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800056a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800056c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800056e:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8000570:	a904      	add	r1, sp, #16
 8000572:	0028      	movs	r0, r5
 8000574:	f000 fe0e 	bl	8001194 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	b00b      	add	sp, #44	@ 0x2c
 800057a:	bcf0      	pop	{r4, r5, r6, r7}
 800057c:	46bb      	mov	fp, r7
 800057e:	46b2      	mov	sl, r6
 8000580:	46a9      	mov	r9, r5
 8000582:	46a0      	mov	r8, r4
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40021000 	.word	0x40021000
 800058c:	48000400 	.word	0x48000400

08000590 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8000590:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 8000592:	0043      	lsls	r3, r0, #1
 8000594:	1818      	adds	r0, r3, r0
	  for(counter = 0; counter<microseconds; counter++)
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	e004      	b.n	80005a6 <delay+0x16>
	  {
	    __asm("nop");
 800059c:	46c0      	nop			@ (mov r8, r8)
	    __asm("nop");
 800059e:	46c0      	nop			@ (mov r8, r8)
	  for(counter = 0; counter<microseconds; counter++)
 80005a0:	9b01      	ldr	r3, [sp, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	9b01      	ldr	r3, [sp, #4]
 80005a8:	4283      	cmp	r3, r0
 80005aa:	d3f7      	bcc.n	800059c <delay+0xc>
	  }
}
 80005ac:	b002      	add	sp, #8
 80005ae:	4770      	bx	lr

080005b0 <pulse_strobe>:
{
 80005b0:	b570      	push	{r4, r5, r6, lr}
    delay(20);				// Delay
 80005b2:	2014      	movs	r0, #20
 80005b4:	f7ff ffec 	bl	8000590 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 80005b8:	4c0a      	ldr	r4, [pc, #40]	@ (80005e4 <pulse_strobe+0x34>)
 80005ba:	69a3      	ldr	r3, [r4, #24]
 80005bc:	2580      	movs	r5, #128	@ 0x80
 80005be:	022d      	lsls	r5, r5, #8
 80005c0:	432b      	orrs	r3, r5
 80005c2:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 80005c4:	2014      	movs	r0, #20
 80005c6:	f7ff ffe3 	bl	8000590 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 80005ca:	69a2      	ldr	r2, [r4, #24]
 80005cc:	2380      	movs	r3, #128	@ 0x80
 80005ce:	061b      	lsls	r3, r3, #24
 80005d0:	4313      	orrs	r3, r2
 80005d2:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 80005d4:	2014      	movs	r0, #20
 80005d6:	f7ff ffdb 	bl	8000590 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 80005da:	69a3      	ldr	r3, [r4, #24]
 80005dc:	431d      	orrs	r5, r3
 80005de:	61a5      	str	r5, [r4, #24]
}
 80005e0:	bd70      	pop	{r4, r5, r6, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	48000800 	.word	0x48000800

080005e8 <lcd_putchar>:
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	0004      	movs	r4, r0
	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 80005ec:	4a45      	ldr	r2, [pc, #276]	@ (8000704 <lcd_putchar+0x11c>)
 80005ee:	6991      	ldr	r1, [r2, #24]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	01db      	lsls	r3, r3, #7
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6193      	str	r3, [r2, #24]
        if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 80005f8:	b243      	sxtb	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db46      	blt.n	800068c <lcd_putchar+0xa4>
        	GPIOA->BSRR |= LCD_D7_RESET;
 80005fe:	2290      	movs	r2, #144	@ 0x90
 8000600:	05d2      	lsls	r2, r2, #23
 8000602:	6991      	ldr	r1, [r2, #24]
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	061b      	lsls	r3, r3, #24
 8000608:	430b      	orrs	r3, r1
 800060a:	6193      	str	r3, [r2, #24]
        if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)       
 800060c:	0663      	lsls	r3, r4, #25
 800060e:	d545      	bpl.n	800069c <lcd_putchar+0xb4>
            GPIOA->BSRR |= LCD_D6_SET;
 8000610:	2290      	movs	r2, #144	@ 0x90
 8000612:	05d2      	lsls	r2, r2, #23
 8000614:	6991      	ldr	r1, [r2, #24]
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	015b      	lsls	r3, r3, #5
 800061a:	430b      	orrs	r3, r1
 800061c:	6193      	str	r3, [r2, #24]
        if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 800061e:	06a3      	lsls	r3, r4, #26
 8000620:	d544      	bpl.n	80006ac <lcd_putchar+0xc4>
        	GPIOB->BSRR |= LCD_D5_SET;                 
 8000622:	4a39      	ldr	r2, [pc, #228]	@ (8000708 <lcd_putchar+0x120>)
 8000624:	6991      	ldr	r1, [r2, #24]
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	430b      	orrs	r3, r1
 800062c:	6193      	str	r3, [r2, #24]
        if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 800062e:	06e3      	lsls	r3, r4, #27
 8000630:	d543      	bpl.n	80006ba <lcd_putchar+0xd2>
        	GPIOB->BSRR |= LCD_D4_SET;
 8000632:	4a35      	ldr	r2, [pc, #212]	@ (8000708 <lcd_putchar+0x120>)
 8000634:	6991      	ldr	r1, [r2, #24]
 8000636:	2380      	movs	r3, #128	@ 0x80
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	430b      	orrs	r3, r1
 800063c:	6193      	str	r3, [r2, #24]
        pulse_strobe ();		// Send data
 800063e:	f7ff ffb7 	bl	80005b0 <pulse_strobe>
        if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 8000642:	0723      	lsls	r3, r4, #28
 8000644:	d540      	bpl.n	80006c8 <lcd_putchar+0xe0>
        	GPIOA->BSRR |= LCD_D7_SET;
 8000646:	2290      	movs	r2, #144	@ 0x90
 8000648:	05d2      	lsls	r2, r2, #23
 800064a:	6991      	ldr	r1, [r2, #24]
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	430b      	orrs	r3, r1
 8000652:	6193      	str	r3, [r2, #24]
        if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)         
 8000654:	0763      	lsls	r3, r4, #29
 8000656:	d53f      	bpl.n	80006d8 <lcd_putchar+0xf0>
            GPIOA->BSRR |= LCD_D6_SET;
 8000658:	2290      	movs	r2, #144	@ 0x90
 800065a:	05d2      	lsls	r2, r2, #23
 800065c:	6991      	ldr	r1, [r2, #24]
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	015b      	lsls	r3, r3, #5
 8000662:	430b      	orrs	r3, r1
 8000664:	6193      	str	r3, [r2, #24]
        if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 8000666:	07a3      	lsls	r3, r4, #30
 8000668:	d53e      	bpl.n	80006e8 <lcd_putchar+0x100>
        	GPIOB->BSRR |= LCD_D5_SET;       
 800066a:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <lcd_putchar+0x120>)
 800066c:	6991      	ldr	r1, [r2, #24]
 800066e:	2380      	movs	r3, #128	@ 0x80
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	430b      	orrs	r3, r1
 8000674:	6193      	str	r3, [r2, #24]
        if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 8000676:	07e4      	lsls	r4, r4, #31
 8000678:	d53d      	bpl.n	80006f6 <lcd_putchar+0x10e>
        	GPIOB->BSRR |= LCD_D4_SET;
 800067a:	4a23      	ldr	r2, [pc, #140]	@ (8000708 <lcd_putchar+0x120>)
 800067c:	6991      	ldr	r1, [r2, #24]
 800067e:	2380      	movs	r3, #128	@ 0x80
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	430b      	orrs	r3, r1
 8000684:	6193      	str	r3, [r2, #24]
        pulse_strobe();			// Send data
 8000686:	f7ff ff93 	bl	80005b0 <pulse_strobe>
}
 800068a:	bd10      	pop	{r4, pc}
        	GPIOA->BSRR |= LCD_D7_SET;
 800068c:	2290      	movs	r2, #144	@ 0x90
 800068e:	05d2      	lsls	r2, r2, #23
 8000690:	6991      	ldr	r1, [r2, #24]
 8000692:	2380      	movs	r3, #128	@ 0x80
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	430b      	orrs	r3, r1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	e7b7      	b.n	800060c <lcd_putchar+0x24>
            GPIOA->BSRR |= LCD_D6_RESET;
 800069c:	2290      	movs	r2, #144	@ 0x90
 800069e:	05d2      	lsls	r2, r2, #23
 80006a0:	6991      	ldr	r1, [r2, #24]
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	055b      	lsls	r3, r3, #21
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	e7b8      	b.n	800061e <lcd_putchar+0x36>
        	GPIOB->BSRR |= LCD_D5_RESET;
 80006ac:	4a16      	ldr	r2, [pc, #88]	@ (8000708 <lcd_putchar+0x120>)
 80006ae:	6991      	ldr	r1, [r2, #24]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	049b      	lsls	r3, r3, #18
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	e7b9      	b.n	800062e <lcd_putchar+0x46>
        	GPIOB->BSRR |= LCD_D4_RESET;
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <lcd_putchar+0x120>)
 80006bc:	6991      	ldr	r1, [r2, #24]
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	045b      	lsls	r3, r3, #17
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	e7ba      	b.n	800063e <lcd_putchar+0x56>
        	GPIOA->BSRR |= LCD_D7_RESET;
 80006c8:	2290      	movs	r2, #144	@ 0x90
 80006ca:	05d2      	lsls	r2, r2, #23
 80006cc:	6991      	ldr	r1, [r2, #24]
 80006ce:	2380      	movs	r3, #128	@ 0x80
 80006d0:	061b      	lsls	r3, r3, #24
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	e7bd      	b.n	8000654 <lcd_putchar+0x6c>
            GPIOA->BSRR |= LCD_D6_RESET;
 80006d8:	2290      	movs	r2, #144	@ 0x90
 80006da:	05d2      	lsls	r2, r2, #23
 80006dc:	6991      	ldr	r1, [r2, #24]
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	055b      	lsls	r3, r3, #21
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	e7be      	b.n	8000666 <lcd_putchar+0x7e>
        	GPIOB->BSRR |= LCD_D5_RESET;
 80006e8:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <lcd_putchar+0x120>)
 80006ea:	6991      	ldr	r1, [r2, #24]
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	049b      	lsls	r3, r3, #18
 80006f0:	430b      	orrs	r3, r1
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	e7bf      	b.n	8000676 <lcd_putchar+0x8e>
        	GPIOB->BSRR |= LCD_D4_RESET;
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <lcd_putchar+0x120>)
 80006f8:	6991      	ldr	r1, [r2, #24]
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	045b      	lsls	r3, r3, #17
 80006fe:	430b      	orrs	r3, r1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	e7c0      	b.n	8000686 <lcd_putchar+0x9e>
 8000704:	48000800 	.word	0x48000800
 8000708:	48000400 	.word	0x48000400

0800070c <lcd_putstring>:
{
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	0005      	movs	r5, r0
    unsigned char count = 0;
 8000710:	2400      	movs	r4, #0
    while (instring[count])		// Until the null terminator is reached
 8000712:	e003      	b.n	800071c <lcd_putstring+0x10>
    	lcd_putchar(instring[count]);	// Write each character to LCD
 8000714:	f7ff ff68 	bl	80005e8 <lcd_putchar>
	    count++;
 8000718:	3401      	adds	r4, #1
 800071a:	b2e4      	uxtb	r4, r4
    while (instring[count])		// Until the null terminator is reached
 800071c:	5d28      	ldrb	r0, [r5, r4]
 800071e:	2800      	cmp	r0, #0
 8000720:	d1f8      	bne.n	8000714 <lcd_putstring+0x8>
}
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <lcd_command>:
{
 8000724:	b510      	push	{r4, lr}
 8000726:	0004      	movs	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 8000728:	4a47      	ldr	r2, [pc, #284]	@ (8000848 <lcd_command+0x124>)
 800072a:	6991      	ldr	r1, [r2, #24]
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	430b      	orrs	r3, r1
 8000732:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 8000734:	b243      	sxtb	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	db49      	blt.n	80007ce <lcd_command+0xaa>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800073a:	2290      	movs	r2, #144	@ 0x90
 800073c:	05d2      	lsls	r2, r2, #23
 800073e:	6991      	ldr	r1, [r2, #24]
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	061b      	lsls	r3, r3, #24
 8000744:	430b      	orrs	r3, r1
 8000746:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 8000748:	0663      	lsls	r3, r4, #25
 800074a:	d548      	bpl.n	80007de <lcd_command+0xba>
        GPIOA->BSRR |= LCD_D6_SET;
 800074c:	2290      	movs	r2, #144	@ 0x90
 800074e:	05d2      	lsls	r2, r2, #23
 8000750:	6991      	ldr	r1, [r2, #24]
 8000752:	2380      	movs	r3, #128	@ 0x80
 8000754:	015b      	lsls	r3, r3, #5
 8000756:	430b      	orrs	r3, r1
 8000758:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 800075a:	06a3      	lsls	r3, r4, #26
 800075c:	d547      	bpl.n	80007ee <lcd_command+0xca>
    	GPIOB->BSRR |= LCD_D5_SET;	
 800075e:	4a3b      	ldr	r2, [pc, #236]	@ (800084c <lcd_command+0x128>)
 8000760:	6991      	ldr	r1, [r2, #24]
 8000762:	2380      	movs	r3, #128	@ 0x80
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	430b      	orrs	r3, r1
 8000768:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 800076a:	06e3      	lsls	r3, r4, #27
 800076c:	d546      	bpl.n	80007fc <lcd_command+0xd8>
    	GPIOB->BSRR |= LCD_D4_SET;
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <lcd_command+0x128>)
 8000770:	6991      	ldr	r1, [r2, #24]
 8000772:	2380      	movs	r3, #128	@ 0x80
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	430b      	orrs	r3, r1
 8000778:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 800077a:	f7ff ff19 	bl	80005b0 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 800077e:	0723      	lsls	r3, r4, #28
 8000780:	d543      	bpl.n	800080a <lcd_command+0xe6>
    	GPIOA->BSRR |= LCD_D7_SET;
 8000782:	2290      	movs	r2, #144	@ 0x90
 8000784:	05d2      	lsls	r2, r2, #23
 8000786:	6991      	ldr	r1, [r2, #24]
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	430b      	orrs	r3, r1
 800078e:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 8000790:	0763      	lsls	r3, r4, #29
 8000792:	d542      	bpl.n	800081a <lcd_command+0xf6>
        GPIOA->BSRR |= LCD_D6_SET;
 8000794:	2290      	movs	r2, #144	@ 0x90
 8000796:	05d2      	lsls	r2, r2, #23
 8000798:	6991      	ldr	r1, [r2, #24]
 800079a:	2380      	movs	r3, #128	@ 0x80
 800079c:	015b      	lsls	r3, r3, #5
 800079e:	430b      	orrs	r3, r1
 80007a0:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 80007a2:	07a3      	lsls	r3, r4, #30
 80007a4:	d541      	bpl.n	800082a <lcd_command+0x106>
    	GPIOB->BSRR |= LCD_D5_SET;         
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <lcd_command+0x128>)
 80007a8:	6991      	ldr	r1, [r2, #24]
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80007b2:	07e4      	lsls	r4, r4, #31
 80007b4:	d540      	bpl.n	8000838 <lcd_command+0x114>
    	GPIOB->BSRR |= LCD_D4_SET;
 80007b6:	4a25      	ldr	r2, [pc, #148]	@ (800084c <lcd_command+0x128>)
 80007b8:	6991      	ldr	r1, [r2, #24]
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	430b      	orrs	r3, r1
 80007c0:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 80007c2:	f7ff fef5 	bl	80005b0 <pulse_strobe>
    delay(3000);
 80007c6:	4822      	ldr	r0, [pc, #136]	@ (8000850 <lcd_command+0x12c>)
 80007c8:	f7ff fee2 	bl	8000590 <delay>
}
 80007cc:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 80007ce:	2290      	movs	r2, #144	@ 0x90
 80007d0:	05d2      	lsls	r2, r2, #23
 80007d2:	6991      	ldr	r1, [r2, #24]
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	430b      	orrs	r3, r1
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	e7b4      	b.n	8000748 <lcd_command+0x24>
        GPIOA->BSRR |= LCD_D6_RESET;
 80007de:	2290      	movs	r2, #144	@ 0x90
 80007e0:	05d2      	lsls	r2, r2, #23
 80007e2:	6991      	ldr	r1, [r2, #24]
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	055b      	lsls	r3, r3, #21
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	e7b5      	b.n	800075a <lcd_command+0x36>
    	GPIOB->BSRR |= LCD_D5_RESET;
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <lcd_command+0x128>)
 80007f0:	6991      	ldr	r1, [r2, #24]
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	049b      	lsls	r3, r3, #18
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	e7b6      	b.n	800076a <lcd_command+0x46>
    	GPIOB->BSRR |= LCD_D4_RESET;
 80007fc:	4a13      	ldr	r2, [pc, #76]	@ (800084c <lcd_command+0x128>)
 80007fe:	6991      	ldr	r1, [r2, #24]
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	045b      	lsls	r3, r3, #17
 8000804:	430b      	orrs	r3, r1
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	e7b7      	b.n	800077a <lcd_command+0x56>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800080a:	2290      	movs	r2, #144	@ 0x90
 800080c:	05d2      	lsls	r2, r2, #23
 800080e:	6991      	ldr	r1, [r2, #24]
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	061b      	lsls	r3, r3, #24
 8000814:	430b      	orrs	r3, r1
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	e7ba      	b.n	8000790 <lcd_command+0x6c>
        GPIOA->BSRR |= LCD_D6_RESET;
 800081a:	2290      	movs	r2, #144	@ 0x90
 800081c:	05d2      	lsls	r2, r2, #23
 800081e:	6991      	ldr	r1, [r2, #24]
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	055b      	lsls	r3, r3, #21
 8000824:	430b      	orrs	r3, r1
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	e7bb      	b.n	80007a2 <lcd_command+0x7e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <lcd_command+0x128>)
 800082c:	6991      	ldr	r1, [r2, #24]
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	049b      	lsls	r3, r3, #18
 8000832:	430b      	orrs	r3, r1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	e7bc      	b.n	80007b2 <lcd_command+0x8e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <lcd_command+0x128>)
 800083a:	6991      	ldr	r1, [r2, #24]
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	045b      	lsls	r3, r3, #17
 8000840:	430b      	orrs	r3, r1
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	e7bd      	b.n	80007c2 <lcd_command+0x9e>
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	48000800 	.word	0x48000800
 800084c:	48000400 	.word	0x48000400
 8000850:	00000bb8 	.word	0x00000bb8

08000854 <init_LCD>:
{
 8000854:	b510      	push	{r4, lr}
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <init_LCD+0x70>)
 8000858:	6959      	ldr	r1, [r3, #20]
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	0292      	lsls	r2, r2, #10
 800085e:	430a      	orrs	r2, r1
 8000860:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000862:	6959      	ldr	r1, [r3, #20]
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	02d2      	lsls	r2, r2, #11
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800086c:	6959      	ldr	r1, [r3, #20]
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	0312      	lsls	r2, r2, #12
 8000872:	430a      	orrs	r2, r1
 8000874:	615a      	str	r2, [r3, #20]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 8000876:	2290      	movs	r2, #144	@ 0x90
 8000878:	05d2      	lsls	r2, r2, #23
 800087a:	6811      	ldr	r1, [r2, #0]
 800087c:	2382      	movs	r3, #130	@ 0x82
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	430b      	orrs	r3, r1
 8000882:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 8000884:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <init_LCD+0x74>)
 8000886:	6811      	ldr	r1, [r2, #0]
 8000888:	23a0      	movs	r3, #160	@ 0xa0
 800088a:	02db      	lsls	r3, r3, #11
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 8000890:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <init_LCD+0x78>)
 8000892:	6811      	ldr	r1, [r2, #0]
 8000894:	23a0      	movs	r3, #160	@ 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	430b      	orrs	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <init_LCD+0x7c>)
 800089e:	f7ff fe77 	bl	8000590 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 80008a2:	2033      	movs	r0, #51	@ 0x33
 80008a4:	f7ff ff3e 	bl	8000724 <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 80008a8:	2032      	movs	r0, #50	@ 0x32
 80008aa:	f7ff ff3b 	bl	8000724 <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 80008ae:	200c      	movs	r0, #12
 80008b0:	f7ff ff38 	bl	8000724 <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 80008b4:	2028      	movs	r0, #40	@ 0x28
 80008b6:	f7ff ff35 	bl	8000724 <lcd_command>
    lcd_command(CLEAR);			// Clear display
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ff32 	bl	8000724 <lcd_command>
}
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400
 80008cc:	48000800 	.word	0x48000800
 80008d0:	00007530 	.word	0x00007530

080008d4 <TIM16_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM16_IRQHandler(void)
{
 80008d4:	b510      	push	{r4, lr}
  // Acknowledge interrupt
	HAL_TIM_IRQHandler(&htim16);
 80008d6:	4897      	ldr	r0, [pc, #604]	@ (8000b34 <TIM16_IRQHandler+0x260>)
 80008d8:	f000 fb2f 	bl	8000f3a <HAL_TIM_IRQHandler>

	// TODO: Change LED pattern
  if (PA1_state == 1) {
 80008dc:	4b96      	ldr	r3, [pc, #600]	@ (8000b38 <TIM16_IRQHandler+0x264>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d009      	beq.n	80008f8 <TIM16_IRQHandler+0x24>
    } else if (led_position <= 0) {
      led_position = 0;
      led_direction = 1; // left to right
    }

  } else if (PA2_state == 1) {
 80008e4:	4b95      	ldr	r3, [pc, #596]	@ (8000b3c <TIM16_IRQHandler+0x268>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d05a      	beq.n	80009a2 <TIM16_IRQHandler+0xce>
      led_direction = -1;  // right to left
    } else if (led_position <= 0) {
      led_position = 0;
      led_direction = 1;   // left to right
    }
  } else if (PA3_state == 1) {
 80008ec:	4b94      	ldr	r3, [pc, #592]	@ (8000b40 <TIM16_IRQHandler+0x26c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d100      	bne.n	80008f6 <TIM16_IRQHandler+0x22>
 80008f4:	e0ab      	b.n	8000a4e <TIM16_IRQHandler+0x17a>

      random_off_delay = rand() % 101; // Random delay between 0ms and 100ms
      delay(random_off_delay*1000);
    }
  }
}
 80008f6:	bd10      	pop	{r4, pc}
    lcd_command(CLEAR);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff ff13 	bl	8000724 <lcd_command>
    lcd_putstring("Button 1 pressed");
 80008fe:	4891      	ldr	r0, [pc, #580]	@ (8000b44 <TIM16_IRQHandler+0x270>)
 8000900:	f7ff ff04 	bl	800070c <lcd_putstring>
 8000904:	4b90      	ldr	r3, [pc, #576]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000906:	2201      	movs	r2, #1
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
 800090a:	3201      	adds	r2, #1
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
 800090e:	3202      	adds	r2, #2
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
 8000912:	3204      	adds	r2, #4
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
 8000916:	3208      	adds	r2, #8
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
 800091a:	3210      	adds	r2, #16
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
 800091e:	3220      	adds	r2, #32
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
 8000922:	3240      	adds	r2, #64	@ 0x40
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
    switch(led_position) {
 8000926:	4b89      	ldr	r3, [pc, #548]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b07      	cmp	r3, #7
 800092c:	d806      	bhi.n	800093c <TIM16_IRQHandler+0x68>
 800092e:	009a      	lsls	r2, r3, #2
 8000930:	4987      	ldr	r1, [pc, #540]	@ (8000b50 <TIM16_IRQHandler+0x27c>)
 8000932:	588a      	ldr	r2, [r1, r2]
 8000934:	4697      	mov	pc, r2
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000936:	4a84      	ldr	r2, [pc, #528]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000938:	2101      	movs	r1, #1
 800093a:	6191      	str	r1, [r2, #24]
    led_position += led_direction;
 800093c:	4a85      	ldr	r2, [pc, #532]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	189b      	adds	r3, r3, r2
 8000942:	4a82      	ldr	r2, [pc, #520]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 8000944:	6013      	str	r3, [r2, #0]
    if (led_position >= 7) {
 8000946:	2b06      	cmp	r3, #6
 8000948:	dd22      	ble.n	8000990 <TIM16_IRQHandler+0xbc>
      led_position = 7;
 800094a:	0013      	movs	r3, r2
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
      led_direction = -1; // right to left
 8000950:	4b80      	ldr	r3, [pc, #512]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 8000952:	3a08      	subs	r2, #8
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e7ce      	b.n	80008f6 <TIM16_IRQHandler+0x22>
 8000958:	4a7b      	ldr	r2, [pc, #492]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 800095a:	2102      	movs	r1, #2
 800095c:	6191      	str	r1, [r2, #24]
}
 800095e:	e7ed      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000960:	4a79      	ldr	r2, [pc, #484]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000962:	2104      	movs	r1, #4
 8000964:	6191      	str	r1, [r2, #24]
}
 8000966:	e7e9      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000968:	4a77      	ldr	r2, [pc, #476]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 800096a:	2108      	movs	r1, #8
 800096c:	6191      	str	r1, [r2, #24]
}
 800096e:	e7e5      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000970:	4a75      	ldr	r2, [pc, #468]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000972:	2110      	movs	r1, #16
 8000974:	6191      	str	r1, [r2, #24]
}
 8000976:	e7e1      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000978:	4a73      	ldr	r2, [pc, #460]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 800097a:	2120      	movs	r1, #32
 800097c:	6191      	str	r1, [r2, #24]
}
 800097e:	e7dd      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000980:	4a71      	ldr	r2, [pc, #452]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	6191      	str	r1, [r2, #24]
}
 8000986:	e7d9      	b.n	800093c <TIM16_IRQHandler+0x68>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000988:	4a6f      	ldr	r2, [pc, #444]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	6191      	str	r1, [r2, #24]
}
 800098e:	e7d5      	b.n	800093c <TIM16_IRQHandler+0x68>
    } else if (led_position <= 0) {
 8000990:	2b00      	cmp	r3, #0
 8000992:	dcb0      	bgt.n	80008f6 <TIM16_IRQHandler+0x22>
      led_position = 0;
 8000994:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
      led_direction = 1; // left to right
 800099a:	4b6e      	ldr	r3, [pc, #440]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 800099c:	3201      	adds	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e7a9      	b.n	80008f6 <TIM16_IRQHandler+0x22>
    lcd_command(CLEAR);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff febe 	bl	8000724 <lcd_command>
    lcd_putstring("Button 2 pressed");
 80009a8:	486b      	ldr	r0, [pc, #428]	@ (8000b58 <TIM16_IRQHandler+0x284>)
 80009aa:	f7ff feaf 	bl	800070c <lcd_putstring>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009ae:	4b66      	ldr	r3, [pc, #408]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	3201      	adds	r2, #1
 80009b6:	619a      	str	r2, [r3, #24]
 80009b8:	3202      	adds	r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
 80009bc:	3204      	adds	r2, #4
 80009be:	619a      	str	r2, [r3, #24]
 80009c0:	3208      	adds	r2, #8
 80009c2:	619a      	str	r2, [r3, #24]
 80009c4:	3210      	adds	r2, #16
 80009c6:	619a      	str	r2, [r3, #24]
 80009c8:	3220      	adds	r2, #32
 80009ca:	619a      	str	r2, [r3, #24]
 80009cc:	3240      	adds	r2, #64	@ 0x40
 80009ce:	619a      	str	r2, [r3, #24]
    switch(led_position) {
 80009d0:	4b5e      	ldr	r3, [pc, #376]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	d806      	bhi.n	80009e6 <TIM16_IRQHandler+0x112>
 80009d8:	009a      	lsls	r2, r3, #2
 80009da:	4960      	ldr	r1, [pc, #384]	@ (8000b5c <TIM16_IRQHandler+0x288>)
 80009dc:	588a      	ldr	r2, [r1, r2]
 80009de:	4697      	mov	pc, r2
  WRITE_REG(GPIOx->BRR, PinMask);
 80009e0:	4a59      	ldr	r2, [pc, #356]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	6291      	str	r1, [r2, #40]	@ 0x28
    led_position += led_direction;
 80009e6:	4a5b      	ldr	r2, [pc, #364]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	4a57      	ldr	r2, [pc, #348]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 80009ee:	6013      	str	r3, [r2, #0]
    if (led_position >= 7) {
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	dd22      	ble.n	8000a3a <TIM16_IRQHandler+0x166>
      led_position = 7;
 80009f4:	0013      	movs	r3, r2
 80009f6:	2207      	movs	r2, #7
 80009f8:	601a      	str	r2, [r3, #0]
      led_direction = -1;  // right to left
 80009fa:	4b56      	ldr	r3, [pc, #344]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 80009fc:	3a08      	subs	r2, #8
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	e779      	b.n	80008f6 <TIM16_IRQHandler+0x22>
 8000a02:	4a51      	ldr	r2, [pc, #324]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a08:	e7ed      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a10:	e7e9      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a12:	4a4d      	ldr	r2, [pc, #308]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a14:	2108      	movs	r1, #8
 8000a16:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a18:	e7e5      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a20:	e7e1      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a22:	4a49      	ldr	r2, [pc, #292]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a24:	2120      	movs	r1, #32
 8000a26:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a28:	e7dd      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a2a:	4a47      	ldr	r2, [pc, #284]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a30:	e7d9      	b.n	80009e6 <TIM16_IRQHandler+0x112>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a32:	4a45      	ldr	r2, [pc, #276]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	6291      	str	r1, [r2, #40]	@ 0x28
}
 8000a38:	e7d5      	b.n	80009e6 <TIM16_IRQHandler+0x112>
    } else if (led_position <= 0) {
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dd00      	ble.n	8000a40 <TIM16_IRQHandler+0x16c>
 8000a3e:	e75a      	b.n	80008f6 <TIM16_IRQHandler+0x22>
      led_position = 0;
 8000a40:	4b42      	ldr	r3, [pc, #264]	@ (8000b4c <TIM16_IRQHandler+0x278>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
      led_direction = 1;   // left to right
 8000a46:	4b43      	ldr	r3, [pc, #268]	@ (8000b54 <TIM16_IRQHandler+0x280>)
 8000a48:	3201      	adds	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e753      	b.n	80008f6 <TIM16_IRQHandler+0x22>
    lcd_command(CLEAR);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fe68 	bl	8000724 <lcd_command>
    lcd_putstring("Button 3 pressed");
 8000a54:	4842      	ldr	r0, [pc, #264]	@ (8000b60 <TIM16_IRQHandler+0x28c>)
 8000a56:	f7ff fe59 	bl	800070c <lcd_putstring>
    random_int = rand() % 256;
 8000a5a:	f000 fc29 	bl	80012b0 <rand>
 8000a5e:	17c2      	asrs	r2, r0, #31
 8000a60:	0e12      	lsrs	r2, r2, #24
 8000a62:	1880      	adds	r0, r0, r2
 8000a64:	23ff      	movs	r3, #255	@ 0xff
 8000a66:	4003      	ands	r3, r0
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b64 <TIM16_IRQHandler+0x290>)
 8000a6c:	6013      	str	r3, [r2, #0]
    GPIOB -> ODR = random_int;
 8000a6e:	4a36      	ldr	r2, [pc, #216]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000a70:	6153      	str	r3, [r2, #20]
    random_on_delay = rand() % 1401 + 100; // Random delay between 100ms and 1500ms
 8000a72:	f000 fc1d 	bl	80012b0 <rand>
 8000a76:	493c      	ldr	r1, [pc, #240]	@ (8000b68 <TIM16_IRQHandler+0x294>)
 8000a78:	f7ff fc9c 	bl	80003b4 <__aeabi_idivmod>
 8000a7c:	3164      	adds	r1, #100	@ 0x64
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <TIM16_IRQHandler+0x298>)
 8000a80:	6019      	str	r1, [r3, #0]
    delay(random_on_delay*100);
 8000a82:	2064      	movs	r0, #100	@ 0x64
 8000a84:	4348      	muls	r0, r1
 8000a86:	f7ff fd83 	bl	8000590 <delay>
    while (random_int != 0) {
 8000a8a:	e029      	b.n	8000ae0 <TIM16_IRQHandler+0x20c>
        index = rand() % 8;
 8000a8c:	f000 fc10 	bl	80012b0 <rand>
 8000a90:	17c2      	asrs	r2, r0, #31
 8000a92:	0f52      	lsrs	r2, r2, #29
 8000a94:	1880      	adds	r0, r0, r2
 8000a96:	2307      	movs	r3, #7
 8000a98:	4003      	ands	r3, r0
 8000a9a:	1a9b      	subs	r3, r3, r2
      while (!(random_int & (1 << index))) {
 8000a9c:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <TIM16_IRQHandler+0x290>)
 8000a9e:	6811      	ldr	r1, [r2, #0]
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	411a      	asrs	r2, r3
 8000aa4:	07d2      	lsls	r2, r2, #31
 8000aa6:	d5f1      	bpl.n	8000a8c <TIM16_IRQHandler+0x1b8>
      switch(index) {
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	d806      	bhi.n	8000aba <TIM16_IRQHandler+0x1e6>
 8000aac:	009a      	lsls	r2, r3, #2
 8000aae:	4830      	ldr	r0, [pc, #192]	@ (8000b70 <TIM16_IRQHandler+0x29c>)
 8000ab0:	5882      	ldr	r2, [r0, r2]
 8000ab2:	4697      	mov	pc, r2
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ab4:	4a24      	ldr	r2, [pc, #144]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	6290      	str	r0, [r2, #40]	@ 0x28
      random_int &= ~(1 << index); // Clear the bit for the LED that was turned off
 8000aba:	2201      	movs	r2, #1
 8000abc:	409a      	lsls	r2, r3
 8000abe:	4829      	ldr	r0, [pc, #164]	@ (8000b64 <TIM16_IRQHandler+0x290>)
 8000ac0:	4391      	bics	r1, r2
 8000ac2:	6001      	str	r1, [r0, #0]
      random_off_delay = rand() % 101; // Random delay between 0ms and 100ms
 8000ac4:	f000 fbf4 	bl	80012b0 <rand>
 8000ac8:	2165      	movs	r1, #101	@ 0x65
 8000aca:	f7ff fc73 	bl	80003b4 <__aeabi_idivmod>
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <TIM16_IRQHandler+0x2a0>)
 8000ad0:	6019      	str	r1, [r3, #0]
      delay(random_off_delay*1000);
 8000ad2:	0148      	lsls	r0, r1, #5
 8000ad4:	1a40      	subs	r0, r0, r1
 8000ad6:	0080      	lsls	r0, r0, #2
 8000ad8:	1840      	adds	r0, r0, r1
 8000ada:	00c0      	lsls	r0, r0, #3
 8000adc:	f7ff fd58 	bl	8000590 <delay>
    while (random_int != 0) {
 8000ae0:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <TIM16_IRQHandler+0x290>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d100      	bne.n	8000aea <TIM16_IRQHandler+0x216>
 8000ae8:	e705      	b.n	80008f6 <TIM16_IRQHandler+0x22>
      int index = rand() % 8;
 8000aea:	f000 fbe1 	bl	80012b0 <rand>
 8000aee:	17c2      	asrs	r2, r0, #31
 8000af0:	0f52      	lsrs	r2, r2, #29
 8000af2:	1880      	adds	r0, r0, r2
 8000af4:	2307      	movs	r3, #7
 8000af6:	4003      	ands	r3, r0
 8000af8:	1a9b      	subs	r3, r3, r2
      while (!(random_int & (1 << index))) {
 8000afa:	e7cf      	b.n	8000a9c <TIM16_IRQHandler+0x1c8>
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000afe:	2002      	movs	r0, #2
 8000b00:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b02:	e7da      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b04:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b06:	2004      	movs	r0, #4
 8000b08:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b0a:	e7d6      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b0e:	2008      	movs	r0, #8
 8000b10:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b12:	e7d2      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b14:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b16:	2010      	movs	r0, #16
 8000b18:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b1a:	e7ce      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b1e:	2020      	movs	r0, #32
 8000b20:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b22:	e7ca      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b26:	2040      	movs	r0, #64	@ 0x40
 8000b28:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b2a:	e7c6      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <TIM16_IRQHandler+0x274>)
 8000b2e:	2080      	movs	r0, #128	@ 0x80
 8000b30:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8000b32:	e7c2      	b.n	8000aba <TIM16_IRQHandler+0x1e6>
 8000b34:	200000ac 	.word	0x200000ac
 8000b38:	200000a4 	.word	0x200000a4
 8000b3c:	200000a0 	.word	0x200000a0
 8000b40:	2000009c 	.word	0x2000009c
 8000b44:	080023e4 	.word	0x080023e4
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	08002420 	.word	0x08002420
 8000b54:	20000000 	.word	0x20000000
 8000b58:	080023f8 	.word	0x080023f8
 8000b5c:	08002440 	.word	0x08002440
 8000b60:	0800240c 	.word	0x0800240c
 8000b64:	20000090 	.word	0x20000090
 8000b68:	00000579 	.word	0x00000579
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	08002460 	.word	0x08002460
 8000b74:	20000088 	.word	0x20000088

08000b78 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <Error_Handler+0x2>

08000b7c <MX_TIM16_Init>:
{
 8000b7c:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8000b7e:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <MX_TIM16_Init+0x34>)
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_TIM16_Init+0x38>)
 8000b82:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 8000-1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_TIM16_Init+0x3c>)
 8000b86:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 1000-1;
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <MX_TIM16_Init+0x40>)
 8000b8e:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b92:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b94:	3380      	adds	r3, #128	@ 0x80
 8000b96:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b98:	f000 fac6 	bl	8001128 <HAL_TIM_Base_Init>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d104      	bne.n	8000baa <MX_TIM16_Init+0x2e>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_TIM16_Init+0x44>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	0392      	lsls	r2, r2, #14
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000baa:	f7ff ffe5 	bl	8000b78 <Error_Handler>
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	200000ac 	.word	0x200000ac
 8000bb4:	40014400 	.word	0x40014400
 8000bb8:	00001f3f 	.word	0x00001f3f
 8000bbc:	000003e7 	.word	0x000003e7
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <SystemClock_Config>:
{
 8000bc4:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <SystemClock_Config+0x6c>)
 8000bc8:	6813      	ldr	r3, [r2, #0]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	438b      	bics	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bd0:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <SystemClock_Config+0x6c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000bd4:	07db      	lsls	r3, r3, #31
 8000bd6:	d4fb      	bmi.n	8000bd0 <SystemClock_Config+0xc>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bd8:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <SystemClock_Config+0x70>)
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	430b      	orrs	r3, r1
 8000be0:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <SystemClock_Config+0x70>)
 8000be4:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 8000be6:	079b      	lsls	r3, r3, #30
 8000be8:	d5fb      	bpl.n	8000be2 <SystemClock_Config+0x1e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <SystemClock_Config+0x70>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	21f8      	movs	r1, #248	@ 0xf8
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	3978      	subs	r1, #120	@ 0x78
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	3170      	adds	r1, #112	@ 0x70
 8000bfc:	438a      	bics	r2, r1
 8000bfe:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <SystemClock_Config+0x74>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <SystemClock_Config+0x70>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	220c      	movs	r2, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c16:	421a      	tst	r2, r3
 8000c18:	d1fa      	bne.n	8000c10 <SystemClock_Config+0x4c>
  LL_SetSystemCoreClock(8000000);
 8000c1a:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <SystemClock_Config+0x78>)
 8000c1c:	f000 fb16 	bl	800124c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f889 	bl	8000d38 <HAL_InitTick>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d100      	bne.n	8000c2c <SystemClock_Config+0x68>
}
 8000c2a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c2c:	f7ff ffa4 	bl	8000b78 <Error_Handler>
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	fffff8ff 	.word	0xfffff8ff
 8000c3c:	007a1200 	.word	0x007a1200

08000c40 <main>:
{
 8000c40:	b510      	push	{r4, lr}
  HAL_Init();
 8000c42:	f000 f8a1 	bl	8000d88 <HAL_Init>
  SystemClock_Config();
 8000c46:	f7ff ffbd 	bl	8000bc4 <SystemClock_Config>
  MX_GPIO_Init();
 8000c4a:	f7ff fbdd 	bl	8000408 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000c4e:	f7ff ff95 	bl	8000b7c <MX_TIM16_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000c52:	4832      	ldr	r0, [pc, #200]	@ (8000d1c <main+0xdc>)
 8000c54:	f000 f936 	bl	8000ec4 <HAL_TIM_Base_Start_IT>
  init_LCD(); // Initialize LCD display
 8000c58:	f7ff fdfc 	bl	8000854 <init_LCD>
 8000c5c:	e034      	b.n	8000cc8 <main+0x88>
    } else if (PA2_state == 0 && !LL_GPIO_IsInputPinSet(Button2_GPIO_Port, Button2_Pin)) {
 8000c5e:	4a30      	ldr	r2, [pc, #192]	@ (8000d20 <main+0xe0>)
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d10d      	bne.n	8000c82 <main+0x42>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000c66:	2290      	movs	r2, #144	@ 0x90
 8000c68:	05d2      	lsls	r2, r2, #23
 8000c6a:	6912      	ldr	r2, [r2, #16]
 8000c6c:	0752      	lsls	r2, r2, #29
 8000c6e:	d408      	bmi.n	8000c82 <main+0x42>
        PA1_state = 0;
 8000c70:	4a2c      	ldr	r2, [pc, #176]	@ (8000d24 <main+0xe4>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	6011      	str	r1, [r2, #0]
        PA2_state = 1;
 8000c76:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <main+0xe0>)
 8000c78:	2001      	movs	r0, #1
 8000c7a:	6010      	str	r0, [r2, #0]
        PA3_state = 0;
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <main+0xe8>)
 8000c7e:	6011      	str	r1, [r2, #0]
 8000c80:	e03a      	b.n	8000cf8 <main+0xb8>
    } else if (PA3_state == 0 && !LL_GPIO_IsInputPinSet(Button3_GPIO_Port, Button3_Pin)) {
 8000c82:	4a29      	ldr	r2, [pc, #164]	@ (8000d28 <main+0xe8>)
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d136      	bne.n	8000cf8 <main+0xb8>
 8000c8a:	2290      	movs	r2, #144	@ 0x90
 8000c8c:	05d2      	lsls	r2, r2, #23
 8000c8e:	6912      	ldr	r2, [r2, #16]
 8000c90:	0712      	lsls	r2, r2, #28
 8000c92:	d431      	bmi.n	8000cf8 <main+0xb8>
        PA1_state = 0;
 8000c94:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <main+0xe4>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	6011      	str	r1, [r2, #0]
        PA2_state = 0;
 8000c9a:	4a21      	ldr	r2, [pc, #132]	@ (8000d20 <main+0xe0>)
 8000c9c:	6011      	str	r1, [r2, #0]
        PA3_state = 1;
 8000c9e:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <main+0xe8>)
 8000ca0:	3101      	adds	r1, #1
 8000ca2:	6011      	str	r1, [r2, #0]
 8000ca4:	e028      	b.n	8000cf8 <main+0xb8>
            htim16.Init.Period = 500 - 1;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <main+0xdc>)
 8000ca8:	22f4      	movs	r2, #244	@ 0xf4
 8000caa:	32ff      	adds	r2, #255	@ 0xff
 8000cac:	60da      	str	r2, [r3, #12]
            delay_mode = 0;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <main+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Init(&htim16);
 8000cb4:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <main+0xdc>)
 8000cb6:	f000 fa37 	bl	8001128 <HAL_TIM_Base_Init>
 8000cba:	2390      	movs	r3, #144	@ 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4013      	ands	r3, r2
    PA0_state = LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin);
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <main+0xf0>)
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	2390      	movs	r3, #144	@ 0x90
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4013      	ands	r3, r2
    PA0_state = LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin);
 8000cd2:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <main+0xf0>)
 8000cd4:	6013      	str	r3, [r2, #0]
    if (PA1_state == 0 && !LL_GPIO_IsInputPinSet(Button1_GPIO_Port, Button1_Pin)) {
 8000cd6:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <main+0xe4>)
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d1bf      	bne.n	8000c5e <main+0x1e>
 8000cde:	2290      	movs	r2, #144	@ 0x90
 8000ce0:	05d2      	lsls	r2, r2, #23
 8000ce2:	6912      	ldr	r2, [r2, #16]
 8000ce4:	0792      	lsls	r2, r2, #30
 8000ce6:	d4ba      	bmi.n	8000c5e <main+0x1e>
        PA1_state = 1;
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <main+0xe4>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	6011      	str	r1, [r2, #0]
        PA2_state = 0;
 8000cee:	4a0c      	ldr	r2, [pc, #48]	@ (8000d20 <main+0xe0>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6011      	str	r1, [r2, #0]
        PA3_state = 0;
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d28 <main+0xe8>)
 8000cf6:	6011      	str	r1, [r2, #0]
    if (PA0_state == 0 && !LL_GPIO_IsInputPinSet(Button0_GPIO_Port, Button0_Pin)) {
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1de      	bne.n	8000cba <main+0x7a>
 8000cfc:	2390      	movs	r3, #144	@ 0x90
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	07db      	lsls	r3, r3, #31
 8000d04:	d4d9      	bmi.n	8000cba <main+0x7a>
        if (delay_mode == 0) {
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <main+0xec>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1cb      	bne.n	8000ca6 <main+0x66>
            htim16.Init.Period = 1000 - 1;
 8000d0e:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <main+0xdc>)
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <main+0xf4>)
 8000d12:	60da      	str	r2, [r3, #12]
            delay_mode = 1;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <main+0xec>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e7cb      	b.n	8000cb4 <main+0x74>
 8000d1c:	200000ac 	.word	0x200000ac
 8000d20:	200000a0 	.word	0x200000a0
 8000d24:	200000a4 	.word	0x200000a4
 8000d28:	2000009c 	.word	0x2000009c
 8000d2c:	20000098 	.word	0x20000098
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	000003e7 	.word	0x000003e7

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_InitTick+0x44>)
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	20fa      	movs	r0, #250	@ 0xfa
 8000d42:	0080      	lsls	r0, r0, #2
 8000d44:	f7ff f9c6 	bl	80000d4 <__udivsi3>
 8000d48:	0001      	movs	r1, r0
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_InitTick+0x48>)
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	f7ff f9c1 	bl	80000d4 <__udivsi3>
 8000d52:	f000 f885 	bl	8000e60 <HAL_SYSTICK_Config>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d10d      	bne.n	8000d76 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	2c03      	cmp	r4, #3
 8000d5c:	d901      	bls.n	8000d62 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d5e:	2001      	movs	r0, #1
 8000d60:	e00a      	b.n	8000d78 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	3001      	adds	r0, #1
 8000d64:	2200      	movs	r2, #0
 8000d66:	0021      	movs	r1, r4
 8000d68:	4240      	negs	r0, r0
 8000d6a:	f000 f875 	bl	8000e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_InitTick+0x4c>)
 8000d70:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000d72:	2000      	movs	r0, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
}
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_Init>:
{
 8000d88:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8a:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_Init+0x1c>)
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	2110      	movs	r1, #16
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f7ff ffcf 	bl	8000d38 <HAL_InitTick>
  HAL_MspInit();
 8000d9a:	f000 f865 	bl	8000e68 <HAL_MspInit>
}
 8000d9e:	2000      	movs	r0, #0
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000da8:	4a03      	ldr	r2, [pc, #12]	@ (8000db8 <HAL_IncTick+0x10>)
 8000daa:	6811      	ldr	r1, [r2, #0]
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <HAL_IncTick+0x14>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	185b      	adds	r3, r3, r1
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	4770      	bx	lr
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	200000f4 	.word	0x200000f4
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	db11      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc6:	0883      	lsrs	r3, r0, #2
 8000dc8:	4d13      	ldr	r5, [pc, #76]	@ (8000e18 <__NVIC_SetPriority+0x58>)
 8000dca:	33c0      	adds	r3, #192	@ 0xc0
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	595c      	ldr	r4, [r3, r5]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4010      	ands	r0, r2
 8000dd4:	00c0      	lsls	r0, r0, #3
 8000dd6:	32fc      	adds	r2, #252	@ 0xfc
 8000dd8:	0016      	movs	r6, r2
 8000dda:	4086      	lsls	r6, r0
 8000ddc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	0189      	lsls	r1, r1, #6
 8000de0:	400a      	ands	r2, r1
 8000de2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4322      	orrs	r2, r4
 8000de6:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	230f      	movs	r3, #15
 8000dec:	4003      	ands	r3, r0
 8000dee:	3b08      	subs	r3, #8
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <__NVIC_SetPriority+0x5c>)
 8000df8:	4694      	mov	ip, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	685c      	ldr	r4, [r3, #4]
 8000dfe:	2203      	movs	r2, #3
 8000e00:	4010      	ands	r0, r2
 8000e02:	00c0      	lsls	r0, r0, #3
 8000e04:	32fc      	adds	r2, #252	@ 0xfc
 8000e06:	0015      	movs	r5, r2
 8000e08:	4085      	lsls	r5, r0
 8000e0a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0c:	0189      	lsls	r1, r1, #6
 8000e0e:	400a      	ands	r2, r1
 8000e10:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e12:	4322      	orrs	r2, r4
 8000e14:	605a      	str	r2, [r3, #4]
}
 8000e16:	e7e7      	b.n	8000de8 <__NVIC_SetPriority+0x28>
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	3801      	subs	r0, #1
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	045b      	lsls	r3, r3, #17
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d20f      	bcs.n	8000e4a <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <SysTick_Config+0x30>)
 8000e2c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <SysTick_Config+0x34>)
 8000e30:	6a03      	ldr	r3, [r0, #32]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	21c0      	movs	r1, #192	@ 0xc0
 8000e38:	0609      	lsls	r1, r1, #24
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3e:	2300      	movs	r3, #0
 8000e40:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	3307      	adds	r3, #7
 8000e44:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e46:	2000      	movs	r0, #0
}
 8000e48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	e7fc      	b.n	8000e48 <SysTick_Config+0x28>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e5a:	f7ff ffb1 	bl	8000dc0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e5e:	bd10      	pop	{r4, pc}

08000e60 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e60:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 8000e62:	f7ff ffdd 	bl	8000e20 <SysTick_Config>
}
 8000e66:	bd10      	pop	{r4, pc}

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_MspInit+0x2c>)
 8000e6c:	6999      	ldr	r1, [r3, #24]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4311      	orrs	r1, r2
 8000e72:	6199      	str	r1, [r3, #24]
 8000e74:	6999      	ldr	r1, [r3, #24]
 8000e76:	400a      	ands	r2, r1
 8000e78:	9200      	str	r2, [sp, #0]
 8000e7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	0549      	lsls	r1, r1, #21
 8000e82:	430a      	orrs	r2, r1
 8000e84:	61da      	str	r2, [r3, #28]
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	400b      	ands	r3, r1
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	b002      	add	sp, #8
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM16)
 8000e9a:	6802      	ldr	r2, [r0, #0]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_TIM_Base_MspInit+0x24>)
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d001      	beq.n	8000ea6 <HAL_TIM_Base_MspInit+0xe>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000ea2:	b002      	add	sp, #8
 8000ea4:	4770      	bx	lr
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x28>)
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	0289      	lsls	r1, r1, #10
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	9b01      	ldr	r3, [sp, #4]
}
 8000eba:	e7f2      	b.n	8000ea2 <HAL_TIM_Base_MspInit+0xa>
 8000ebc:	40014400 	.word	0x40014400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000ec4:	233d      	movs	r3, #61	@ 0x3d
 8000ec6:	5cc3      	ldrb	r3, [r0, r3]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d126      	bne.n	8000f1a <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ecc:	333c      	adds	r3, #60	@ 0x3c
 8000ece:	2202      	movs	r2, #2
 8000ed0:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ed2:	6802      	ldr	r2, [r0, #0]
 8000ed4:	68d3      	ldr	r3, [r2, #12]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	4a11      	ldr	r2, [pc, #68]	@ (8000f24 <HAL_TIM_Base_Start_IT+0x60>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00f      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x40>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	05d2      	lsls	r2, r2, #23
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00b      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x40>
 8000eec:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_TIM_Base_Start_IT+0x64>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d008      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x40>
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_TIM_Base_Start_IT+0x68>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d005      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x40>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f00:	2000      	movs	r0, #0
 8000f02:	e00b      	b.n	8000f1c <HAL_TIM_Base_Start_IT+0x58>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f04:	6899      	ldr	r1, [r3, #8]
 8000f06:	2207      	movs	r2, #7
 8000f08:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f0a:	2a06      	cmp	r2, #6
 8000f0c:	d007      	beq.n	8000f1e <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000f16:	2000      	movs	r0, #0
 8000f18:	e000      	b.n	8000f1c <HAL_TIM_Base_Start_IT+0x58>
    return HAL_ERROR;
 8000f1a:	2001      	movs	r0, #1
}
 8000f1c:	4770      	bx	lr
  return HAL_OK;
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e7fc      	b.n	8000f1c <HAL_TIM_Base_Start_IT+0x58>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	40000400 	.word	0x40000400
 8000f2c:	40014000 	.word	0x40014000

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000f30:	4770      	bx	lr

08000f32 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f32:	4770      	bx	lr

08000f34 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000f34:	4770      	bx	lr

08000f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000f36:	4770      	bx	lr

08000f38 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000f38:	4770      	bx	lr

08000f3a <HAL_TIM_IRQHandler>:
{
 8000f3a:	b570      	push	{r4, r5, r6, lr}
 8000f3c:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8000f3e:	6803      	ldr	r3, [r0, #0]
 8000f40:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000f42:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000f44:	07aa      	lsls	r2, r5, #30
 8000f46:	d50e      	bpl.n	8000f66 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000f48:	07b2      	lsls	r2, r6, #30
 8000f4a:	d50c      	bpl.n	8000f66 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4252      	negs	r2, r2
 8000f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f56:	6803      	ldr	r3, [r0, #0]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	079b      	lsls	r3, r3, #30
 8000f5c:	d051      	beq.n	8001002 <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f5e:	f7ff ffe9 	bl	8000f34 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f62:	2300      	movs	r3, #0
 8000f64:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000f66:	076b      	lsls	r3, r5, #29
 8000f68:	d512      	bpl.n	8000f90 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000f6a:	0773      	lsls	r3, r6, #29
 8000f6c:	d510      	bpl.n	8000f90 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	2205      	movs	r2, #5
 8000f72:	4252      	negs	r2, r2
 8000f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	23c0      	movs	r3, #192	@ 0xc0
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	421a      	tst	r2, r3
 8000f84:	d043      	beq.n	800100e <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff ffd4 	bl	8000f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000f90:	072b      	lsls	r3, r5, #28
 8000f92:	d510      	bpl.n	8000fb6 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000f94:	0733      	lsls	r3, r6, #28
 8000f96:	d50e      	bpl.n	8000fb6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	4252      	negs	r2, r2
 8000f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	079b      	lsls	r3, r3, #30
 8000faa:	d037      	beq.n	800101c <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fac:	0020      	movs	r0, r4
 8000fae:	f7ff ffc1 	bl	8000f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8000fb6:	06eb      	lsls	r3, r5, #27
 8000fb8:	d512      	bpl.n	8000fe0 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8000fba:	06f3      	lsls	r3, r6, #27
 8000fbc:	d510      	bpl.n	8000fe0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	2211      	movs	r2, #17
 8000fc2:	4252      	negs	r2, r2
 8000fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	69da      	ldr	r2, [r3, #28]
 8000fce:	23c0      	movs	r3, #192	@ 0xc0
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	421a      	tst	r2, r3
 8000fd4:	d029      	beq.n	800102a <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f7ff ffac 	bl	8000f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000fe0:	07eb      	lsls	r3, r5, #31
 8000fe2:	d501      	bpl.n	8000fe8 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8000fe4:	07f3      	lsls	r3, r6, #31
 8000fe6:	d427      	bmi.n	8001038 <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8000fe8:	062b      	lsls	r3, r5, #24
 8000fea:	d501      	bpl.n	8000ff0 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000fec:	0633      	lsls	r3, r6, #24
 8000fee:	d42b      	bmi.n	8001048 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000ff0:	066b      	lsls	r3, r5, #25
 8000ff2:	d501      	bpl.n	8000ff8 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8000ff4:	0673      	lsls	r3, r6, #25
 8000ff6:	d42f      	bmi.n	8001058 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8000ff8:	06ad      	lsls	r5, r5, #26
 8000ffa:	d501      	bpl.n	8001000 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8000ffc:	06b6      	lsls	r6, r6, #26
 8000ffe:	d433      	bmi.n	8001068 <HAL_TIM_IRQHandler+0x12e>
}
 8001000:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001002:	f7ff ff96 	bl	8000f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001006:	0020      	movs	r0, r4
 8001008:	f7ff ff95 	bl	8000f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800100c:	e7a9      	b.n	8000f62 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800100e:	0020      	movs	r0, r4
 8001010:	f7ff ff8f 	bl	8000f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001014:	0020      	movs	r0, r4
 8001016:	f7ff ff8e 	bl	8000f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800101a:	e7b7      	b.n	8000f8c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800101c:	0020      	movs	r0, r4
 800101e:	f7ff ff88 	bl	8000f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001022:	0020      	movs	r0, r4
 8001024:	f7ff ff87 	bl	8000f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8001028:	e7c3      	b.n	8000fb2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800102a:	0020      	movs	r0, r4
 800102c:	f7ff ff81 	bl	8000f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001030:	0020      	movs	r0, r4
 8001032:	f7ff ff80 	bl	8000f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8001036:	e7d1      	b.n	8000fdc <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	4252      	negs	r2, r2
 800103e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001040:	0020      	movs	r0, r4
 8001042:	f7ff ff75 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
 8001046:	e7cf      	b.n	8000fe8 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	2281      	movs	r2, #129	@ 0x81
 800104c:	4252      	negs	r2, r2
 800104e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001050:	0020      	movs	r0, r4
 8001052:	f000 f896 	bl	8001182 <HAL_TIMEx_BreakCallback>
 8001056:	e7cb      	b.n	8000ff0 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	2241      	movs	r2, #65	@ 0x41
 800105c:	4252      	negs	r2, r2
 800105e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001060:	0020      	movs	r0, r4
 8001062:	f7ff ff69 	bl	8000f38 <HAL_TIM_TriggerCallback>
 8001066:	e7c7      	b.n	8000ff8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	2221      	movs	r2, #33	@ 0x21
 800106c:	4252      	negs	r2, r2
 800106e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001070:	0020      	movs	r0, r4
 8001072:	f000 f885 	bl	8001180 <HAL_TIMEx_CommutCallback>
}
 8001076:	e7c3      	b.n	8001000 <HAL_TIM_IRQHandler+0xc6>

08001078 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001078:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800107a:	4a24      	ldr	r2, [pc, #144]	@ (800110c <TIM_Base_SetConfig+0x94>)
 800107c:	4290      	cmp	r0, r2
 800107e:	d006      	beq.n	800108e <TIM_Base_SetConfig+0x16>
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	05d2      	lsls	r2, r2, #23
 8001084:	4290      	cmp	r0, r2
 8001086:	d002      	beq.n	800108e <TIM_Base_SetConfig+0x16>
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <TIM_Base_SetConfig+0x98>)
 800108a:	4290      	cmp	r0, r2
 800108c:	d103      	bne.n	8001096 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800108e:	2270      	movs	r2, #112	@ 0x70
 8001090:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001092:	684a      	ldr	r2, [r1, #4]
 8001094:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001096:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <TIM_Base_SetConfig+0x94>)
 8001098:	4290      	cmp	r0, r2
 800109a:	d012      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	05d2      	lsls	r2, r2, #23
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d00e      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 80010a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <TIM_Base_SetConfig+0x98>)
 80010a6:	4290      	cmp	r0, r2
 80010a8:	d00b      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 80010aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <TIM_Base_SetConfig+0x9c>)
 80010ac:	4290      	cmp	r0, r2
 80010ae:	d008      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 80010b0:	4a19      	ldr	r2, [pc, #100]	@ (8001118 <TIM_Base_SetConfig+0xa0>)
 80010b2:	4290      	cmp	r0, r2
 80010b4:	d005      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <TIM_Base_SetConfig+0xa4>)
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d002      	beq.n	80010c2 <TIM_Base_SetConfig+0x4a>
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <TIM_Base_SetConfig+0xa8>)
 80010be:	4290      	cmp	r0, r2
 80010c0:	d103      	bne.n	80010ca <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <TIM_Base_SetConfig+0xac>)
 80010c4:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010c6:	68cb      	ldr	r3, [r1, #12]
 80010c8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	4393      	bics	r3, r2
 80010ce:	694a      	ldr	r2, [r1, #20]
 80010d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80010d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010d4:	688b      	ldr	r3, [r1, #8]
 80010d6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010d8:	680b      	ldr	r3, [r1, #0]
 80010da:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <TIM_Base_SetConfig+0x94>)
 80010de:	4298      	cmp	r0, r3
 80010e0:	d008      	beq.n	80010f4 <TIM_Base_SetConfig+0x7c>
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <TIM_Base_SetConfig+0xa0>)
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d005      	beq.n	80010f4 <TIM_Base_SetConfig+0x7c>
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <TIM_Base_SetConfig+0xa4>)
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d002      	beq.n	80010f4 <TIM_Base_SetConfig+0x7c>
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <TIM_Base_SetConfig+0xa8>)
 80010f0:	4298      	cmp	r0, r3
 80010f2:	d101      	bne.n	80010f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010f4:	690b      	ldr	r3, [r1, #16]
 80010f6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010f8:	2301      	movs	r3, #1
 80010fa:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80010fc:	6902      	ldr	r2, [r0, #16]
 80010fe:	4213      	tst	r3, r2
 8001100:	d003      	beq.n	800110a <TIM_Base_SetConfig+0x92>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001102:	6903      	ldr	r3, [r0, #16]
 8001104:	2201      	movs	r2, #1
 8001106:	4393      	bics	r3, r2
 8001108:	6103      	str	r3, [r0, #16]
  }
}
 800110a:	4770      	bx	lr
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40000400 	.word	0x40000400
 8001114:	40002000 	.word	0x40002000
 8001118:	40014000 	.word	0x40014000
 800111c:	40014400 	.word	0x40014400
 8001120:	40014800 	.word	0x40014800
 8001124:	fffffcff 	.word	0xfffffcff

08001128 <HAL_TIM_Base_Init>:
{
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800112c:	d026      	beq.n	800117c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800112e:	233d      	movs	r3, #61	@ 0x3d
 8001130:	5cc3      	ldrb	r3, [r0, r3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01c      	beq.n	8001170 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001136:	253d      	movs	r5, #61	@ 0x3d
 8001138:	2302      	movs	r3, #2
 800113a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800113c:	0021      	movs	r1, r4
 800113e:	c901      	ldmia	r1!, {r0}
 8001140:	f7ff ff9a 	bl	8001078 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001144:	2301      	movs	r3, #1
 8001146:	2246      	movs	r2, #70	@ 0x46
 8001148:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800114a:	3a08      	subs	r2, #8
 800114c:	54a3      	strb	r3, [r4, r2]
 800114e:	3201      	adds	r2, #1
 8001150:	54a3      	strb	r3, [r4, r2]
 8001152:	3201      	adds	r2, #1
 8001154:	54a3      	strb	r3, [r4, r2]
 8001156:	3201      	adds	r2, #1
 8001158:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800115a:	3201      	adds	r2, #1
 800115c:	54a3      	strb	r3, [r4, r2]
 800115e:	3201      	adds	r2, #1
 8001160:	54a3      	strb	r3, [r4, r2]
 8001162:	3201      	adds	r2, #1
 8001164:	54a3      	strb	r3, [r4, r2]
 8001166:	3201      	adds	r2, #1
 8001168:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800116a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800116c:	2000      	movs	r0, #0
}
 800116e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001170:	333c      	adds	r3, #60	@ 0x3c
 8001172:	2200      	movs	r2, #0
 8001174:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001176:	f7ff fe8f 	bl	8000e98 <HAL_TIM_Base_MspInit>
 800117a:	e7dc      	b.n	8001136 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
 800117e:	e7f6      	b.n	800116e <HAL_TIM_Base_Init+0x46>

08001180 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001180:	4770      	bx	lr

08001182 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001182:	4770      	bx	lr

08001184 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler>

08001186 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler>

08001188 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f7ff fe0b 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bd10      	pop	{r4, pc}

08001194 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001196:	2200      	movs	r2, #0

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001198:	e016      	b.n	80011c8 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800119a:	690b      	ldr	r3, [r1, #16]
 800119c:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800119e:	68c4      	ldr	r4, [r0, #12]
 80011a0:	002b      	movs	r3, r5
 80011a2:	436b      	muls	r3, r5
 80011a4:	005e      	lsls	r6, r3, #1
 80011a6:	18f6      	adds	r6, r6, r3
 80011a8:	43f7      	mvns	r7, r6
 80011aa:	43b4      	bics	r4, r6
 80011ac:	4666      	mov	r6, ip
 80011ae:	435e      	muls	r6, r3
 80011b0:	4334      	orrs	r4, r6
 80011b2:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011b4:	684c      	ldr	r4, [r1, #4]
 80011b6:	2c02      	cmp	r4, #2
 80011b8:	d026      	beq.n	8001208 <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011ba:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80011bc:	6804      	ldr	r4, [r0, #0]
 80011be:	403c      	ands	r4, r7
 80011c0:	436b      	muls	r3, r5
 80011c2:	4323      	orrs	r3, r4
 80011c4:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80011c6:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011c8:	680c      	ldr	r4, [r1, #0]
 80011ca:	0023      	movs	r3, r4
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	d03b      	beq.n	8001248 <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80011d0:	2301      	movs	r3, #1
 80011d2:	4093      	lsls	r3, r2
 80011d4:	0025      	movs	r5, r4
 80011d6:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80011d8:	421c      	tst	r4, r3
 80011da:	d0f4      	beq.n	80011c6 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80011dc:	684b      	ldr	r3, [r1, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d8da      	bhi.n	800119a <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80011e4:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80011e6:	6883      	ldr	r3, [r0, #8]
 80011e8:	002c      	movs	r4, r5
 80011ea:	436c      	muls	r4, r5
 80011ec:	0066      	lsls	r6, r4, #1
 80011ee:	1936      	adds	r6, r6, r4
 80011f0:	43b3      	bics	r3, r6
 80011f2:	437c      	muls	r4, r7
 80011f4:	4323      	orrs	r3, r4
 80011f6:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80011f8:	680e      	ldr	r6, [r1, #0]
 80011fa:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80011fc:	6843      	ldr	r3, [r0, #4]
 80011fe:	43b3      	bics	r3, r6
 8001200:	4374      	muls	r4, r6
 8001202:	4323      	orrs	r3, r4
 8001204:	6043      	str	r3, [r0, #4]
}
 8001206:	e7c8      	b.n	800119a <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8001208:	2dff      	cmp	r5, #255	@ 0xff
 800120a:	d80d      	bhi.n	8001228 <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800120c:	694c      	ldr	r4, [r1, #20]
 800120e:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001210:	6a06      	ldr	r6, [r0, #32]
 8001212:	001c      	movs	r4, r3
 8001214:	436c      	muls	r4, r5
 8001216:	436c      	muls	r4, r5
 8001218:	0125      	lsls	r5, r4, #4
 800121a:	1b2d      	subs	r5, r5, r4
 800121c:	43ae      	bics	r6, r5
 800121e:	4665      	mov	r5, ip
 8001220:	436c      	muls	r4, r5
 8001222:	4334      	orrs	r4, r6
 8001224:	6204      	str	r4, [r0, #32]
}
 8001226:	e7c8      	b.n	80011ba <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001228:	694c      	ldr	r4, [r1, #20]
 800122a:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800122c:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 800122e:	0a2d      	lsrs	r5, r5, #8
 8001230:	002c      	movs	r4, r5
 8001232:	436c      	muls	r4, r5
 8001234:	436c      	muls	r4, r5
 8001236:	436c      	muls	r4, r5
 8001238:	0125      	lsls	r5, r4, #4
 800123a:	1b2d      	subs	r5, r5, r4
 800123c:	43ae      	bics	r6, r5
 800123e:	4665      	mov	r5, ip
 8001240:	436c      	muls	r4, r5
 8001242:	4334      	orrs	r4, r6
 8001244:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8001246:	e7b8      	b.n	80011ba <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8001248:	2000      	movs	r0, #0
 800124a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800124c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800124c:	4b01      	ldr	r3, [pc, #4]	@ (8001254 <LL_SetSystemCoreClock+0x8>)
 800124e:	6018      	str	r0, [r3, #0]
}
 8001250:	4770      	bx	lr
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	2000000c 	.word	0x2000000c

08001258 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001258:	4770      	bx	lr
	...

0800125c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800125c:	480d      	ldr	r0, [pc, #52]	@ (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff fffa 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128a:	f000 f9b5 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff fcd7 	bl	8000c40 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012a0:	08002584 	.word	0x08002584
  ldr r2, =_sbss
 80012a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012a8:	20000248 	.word	0x20000248

080012ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_COMP_IRQHandler>
	...

080012b0 <rand>:
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <rand+0x5c>)
 80012b2:	b510      	push	{r4, lr}
 80012b4:	681c      	ldr	r4, [r3, #0]
 80012b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d116      	bne.n	80012ea <rand+0x3a>
 80012bc:	2018      	movs	r0, #24
 80012be:	f000 fa2b 	bl	8001718 <malloc>
 80012c2:	1e02      	subs	r2, r0, #0
 80012c4:	6320      	str	r0, [r4, #48]	@ 0x30
 80012c6:	d104      	bne.n	80012d2 <rand+0x22>
 80012c8:	2152      	movs	r1, #82	@ 0x52
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <rand+0x60>)
 80012cc:	4811      	ldr	r0, [pc, #68]	@ (8001314 <rand+0x64>)
 80012ce:	f000 f9bb 	bl	8001648 <__assert_func>
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <rand+0x68>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	6003      	str	r3, [r0, #0]
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <rand+0x6c>)
 80012da:	6043      	str	r3, [r0, #4]
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <rand+0x70>)
 80012de:	6083      	str	r3, [r0, #8]
 80012e0:	230b      	movs	r3, #11
 80012e2:	8183      	strh	r3, [r0, #12]
 80012e4:	2001      	movs	r0, #1
 80012e6:	6110      	str	r0, [r2, #16]
 80012e8:	6151      	str	r1, [r2, #20]
 80012ea:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <rand+0x74>)
 80012ee:	6920      	ldr	r0, [r4, #16]
 80012f0:	6961      	ldr	r1, [r4, #20]
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <rand+0x78>)
 80012f4:	f001 f83c 	bl	8002370 <__aeabi_lmul>
 80012f8:	2201      	movs	r2, #1
 80012fa:	2300      	movs	r3, #0
 80012fc:	1880      	adds	r0, r0, r2
 80012fe:	4159      	adcs	r1, r3
 8001300:	6120      	str	r0, [r4, #16]
 8001302:	6161      	str	r1, [r4, #20]
 8001304:	0048      	lsls	r0, r1, #1
 8001306:	0840      	lsrs	r0, r0, #1
 8001308:	bd10      	pop	{r4, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	2000001c 	.word	0x2000001c
 8001310:	08002480 	.word	0x08002480
 8001314:	08002497 	.word	0x08002497
 8001318:	abcd330e 	.word	0xabcd330e
 800131c:	e66d1234 	.word	0xe66d1234
 8001320:	0005deec 	.word	0x0005deec
 8001324:	4c957f2d 	.word	0x4c957f2d
 8001328:	5851f42d 	.word	0x5851f42d

0800132c <std>:
 800132c:	2300      	movs	r3, #0
 800132e:	b510      	push	{r4, lr}
 8001330:	0004      	movs	r4, r0
 8001332:	6003      	str	r3, [r0, #0]
 8001334:	6043      	str	r3, [r0, #4]
 8001336:	6083      	str	r3, [r0, #8]
 8001338:	8181      	strh	r1, [r0, #12]
 800133a:	6643      	str	r3, [r0, #100]	@ 0x64
 800133c:	81c2      	strh	r2, [r0, #14]
 800133e:	6103      	str	r3, [r0, #16]
 8001340:	6143      	str	r3, [r0, #20]
 8001342:	6183      	str	r3, [r0, #24]
 8001344:	0019      	movs	r1, r3
 8001346:	2208      	movs	r2, #8
 8001348:	305c      	adds	r0, #92	@ 0x5c
 800134a:	f000 f8ff 	bl	800154c <memset>
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <std+0x50>)
 8001350:	6224      	str	r4, [r4, #32]
 8001352:	6263      	str	r3, [r4, #36]	@ 0x24
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <std+0x54>)
 8001356:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <std+0x58>)
 800135a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <std+0x5c>)
 800135e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <std+0x60>)
 8001362:	429c      	cmp	r4, r3
 8001364:	d005      	beq.n	8001372 <std+0x46>
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <std+0x64>)
 8001368:	429c      	cmp	r4, r3
 800136a:	d002      	beq.n	8001372 <std+0x46>
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <std+0x68>)
 800136e:	429c      	cmp	r4, r3
 8001370:	d103      	bne.n	800137a <std+0x4e>
 8001372:	0020      	movs	r0, r4
 8001374:	3058      	adds	r0, #88	@ 0x58
 8001376:	f000 f963 	bl	8001640 <__retarget_lock_init_recursive>
 800137a:	bd10      	pop	{r4, pc}
 800137c:	080014b5 	.word	0x080014b5
 8001380:	080014dd 	.word	0x080014dd
 8001384:	08001515 	.word	0x08001515
 8001388:	08001541 	.word	0x08001541
 800138c:	200000f8 	.word	0x200000f8
 8001390:	20000160 	.word	0x20000160
 8001394:	200001c8 	.word	0x200001c8

08001398 <stdio_exit_handler>:
 8001398:	b510      	push	{r4, lr}
 800139a:	4a03      	ldr	r2, [pc, #12]	@ (80013a8 <stdio_exit_handler+0x10>)
 800139c:	4903      	ldr	r1, [pc, #12]	@ (80013ac <stdio_exit_handler+0x14>)
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <stdio_exit_handler+0x18>)
 80013a0:	f000 f86c 	bl	800147c <_fwalk_sglue>
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	20000010 	.word	0x20000010
 80013ac:	0800199d 	.word	0x0800199d
 80013b0:	20000020 	.word	0x20000020

080013b4 <cleanup_stdio>:
 80013b4:	6841      	ldr	r1, [r0, #4]
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <cleanup_stdio+0x30>)
 80013b8:	b510      	push	{r4, lr}
 80013ba:	0004      	movs	r4, r0
 80013bc:	4299      	cmp	r1, r3
 80013be:	d001      	beq.n	80013c4 <cleanup_stdio+0x10>
 80013c0:	f000 faec 	bl	800199c <_fflush_r>
 80013c4:	68a1      	ldr	r1, [r4, #8]
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <cleanup_stdio+0x34>)
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d002      	beq.n	80013d2 <cleanup_stdio+0x1e>
 80013cc:	0020      	movs	r0, r4
 80013ce:	f000 fae5 	bl	800199c <_fflush_r>
 80013d2:	68e1      	ldr	r1, [r4, #12]
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <cleanup_stdio+0x38>)
 80013d6:	4299      	cmp	r1, r3
 80013d8:	d002      	beq.n	80013e0 <cleanup_stdio+0x2c>
 80013da:	0020      	movs	r0, r4
 80013dc:	f000 fade 	bl	800199c <_fflush_r>
 80013e0:	bd10      	pop	{r4, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	200000f8 	.word	0x200000f8
 80013e8:	20000160 	.word	0x20000160
 80013ec:	200001c8 	.word	0x200001c8

080013f0 <global_stdio_init.part.0>:
 80013f0:	b510      	push	{r4, lr}
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <global_stdio_init.part.0+0x28>)
 80013f4:	4a09      	ldr	r2, [pc, #36]	@ (800141c <global_stdio_init.part.0+0x2c>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4809      	ldr	r0, [pc, #36]	@ (8001420 <global_stdio_init.part.0+0x30>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f7ff ff95 	bl	800132c <std>
 8001402:	2201      	movs	r2, #1
 8001404:	2109      	movs	r1, #9
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <global_stdio_init.part.0+0x34>)
 8001408:	f7ff ff90 	bl	800132c <std>
 800140c:	2202      	movs	r2, #2
 800140e:	2112      	movs	r1, #18
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <global_stdio_init.part.0+0x38>)
 8001412:	f7ff ff8b 	bl	800132c <std>
 8001416:	bd10      	pop	{r4, pc}
 8001418:	20000230 	.word	0x20000230
 800141c:	08001399 	.word	0x08001399
 8001420:	200000f8 	.word	0x200000f8
 8001424:	20000160 	.word	0x20000160
 8001428:	200001c8 	.word	0x200001c8

0800142c <__sfp_lock_acquire>:
 800142c:	b510      	push	{r4, lr}
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <__sfp_lock_acquire+0xc>)
 8001430:	f000 f907 	bl	8001642 <__retarget_lock_acquire_recursive>
 8001434:	bd10      	pop	{r4, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000239 	.word	0x20000239

0800143c <__sfp_lock_release>:
 800143c:	b510      	push	{r4, lr}
 800143e:	4802      	ldr	r0, [pc, #8]	@ (8001448 <__sfp_lock_release+0xc>)
 8001440:	f000 f900 	bl	8001644 <__retarget_lock_release_recursive>
 8001444:	bd10      	pop	{r4, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	20000239 	.word	0x20000239

0800144c <__sinit>:
 800144c:	b510      	push	{r4, lr}
 800144e:	0004      	movs	r4, r0
 8001450:	f7ff ffec 	bl	800142c <__sfp_lock_acquire>
 8001454:	6a23      	ldr	r3, [r4, #32]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <__sinit+0x14>
 800145a:	f7ff ffef 	bl	800143c <__sfp_lock_release>
 800145e:	bd10      	pop	{r4, pc}
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__sinit+0x28>)
 8001462:	6223      	str	r3, [r4, #32]
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <__sinit+0x2c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f6      	bne.n	800145a <__sinit+0xe>
 800146c:	f7ff ffc0 	bl	80013f0 <global_stdio_init.part.0>
 8001470:	e7f3      	b.n	800145a <__sinit+0xe>
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	080013b5 	.word	0x080013b5
 8001478:	20000230 	.word	0x20000230

0800147c <_fwalk_sglue>:
 800147c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800147e:	0014      	movs	r4, r2
 8001480:	2600      	movs	r6, #0
 8001482:	9000      	str	r0, [sp, #0]
 8001484:	9101      	str	r1, [sp, #4]
 8001486:	68a5      	ldr	r5, [r4, #8]
 8001488:	6867      	ldr	r7, [r4, #4]
 800148a:	3f01      	subs	r7, #1
 800148c:	d504      	bpl.n	8001498 <_fwalk_sglue+0x1c>
 800148e:	6824      	ldr	r4, [r4, #0]
 8001490:	2c00      	cmp	r4, #0
 8001492:	d1f8      	bne.n	8001486 <_fwalk_sglue+0xa>
 8001494:	0030      	movs	r0, r6
 8001496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001498:	89ab      	ldrh	r3, [r5, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d908      	bls.n	80014b0 <_fwalk_sglue+0x34>
 800149e:	220e      	movs	r2, #14
 80014a0:	5eab      	ldrsh	r3, [r5, r2]
 80014a2:	3301      	adds	r3, #1
 80014a4:	d004      	beq.n	80014b0 <_fwalk_sglue+0x34>
 80014a6:	0029      	movs	r1, r5
 80014a8:	9800      	ldr	r0, [sp, #0]
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	4798      	blx	r3
 80014ae:	4306      	orrs	r6, r0
 80014b0:	3568      	adds	r5, #104	@ 0x68
 80014b2:	e7ea      	b.n	800148a <_fwalk_sglue+0xe>

080014b4 <__sread>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	000c      	movs	r4, r1
 80014b8:	250e      	movs	r5, #14
 80014ba:	5f49      	ldrsh	r1, [r1, r5]
 80014bc:	f000 f874 	bl	80015a8 <_read_r>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	db03      	blt.n	80014cc <__sread+0x18>
 80014c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80014c6:	181b      	adds	r3, r3, r0
 80014c8:	6563      	str	r3, [r4, #84]	@ 0x54
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	4a02      	ldr	r2, [pc, #8]	@ (80014d8 <__sread+0x24>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	81a3      	strh	r3, [r4, #12]
 80014d4:	e7f9      	b.n	80014ca <__sread+0x16>
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	ffffefff 	.word	0xffffefff

080014dc <__swrite>:
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	001f      	movs	r7, r3
 80014e0:	898b      	ldrh	r3, [r1, #12]
 80014e2:	0005      	movs	r5, r0
 80014e4:	000c      	movs	r4, r1
 80014e6:	0016      	movs	r6, r2
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	d505      	bpl.n	80014f8 <__swrite+0x1c>
 80014ec:	230e      	movs	r3, #14
 80014ee:	5ec9      	ldrsh	r1, [r1, r3]
 80014f0:	2200      	movs	r2, #0
 80014f2:	2302      	movs	r3, #2
 80014f4:	f000 f844 	bl	8001580 <_lseek_r>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <__swrite+0x34>)
 80014fc:	0028      	movs	r0, r5
 80014fe:	4013      	ands	r3, r2
 8001500:	81a3      	strh	r3, [r4, #12]
 8001502:	0032      	movs	r2, r6
 8001504:	230e      	movs	r3, #14
 8001506:	5ee1      	ldrsh	r1, [r4, r3]
 8001508:	003b      	movs	r3, r7
 800150a:	f000 f861 	bl	80015d0 <_write_r>
 800150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001510:	ffffefff 	.word	0xffffefff

08001514 <__sseek>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	000c      	movs	r4, r1
 8001518:	250e      	movs	r5, #14
 800151a:	5f49      	ldrsh	r1, [r1, r5]
 800151c:	f000 f830 	bl	8001580 <_lseek_r>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	1c42      	adds	r2, r0, #1
 8001524:	d103      	bne.n	800152e <__sseek+0x1a>
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <__sseek+0x28>)
 8001528:	4013      	ands	r3, r2
 800152a:	81a3      	strh	r3, [r4, #12]
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	0152      	lsls	r2, r2, #5
 8001532:	4313      	orrs	r3, r2
 8001534:	81a3      	strh	r3, [r4, #12]
 8001536:	6560      	str	r0, [r4, #84]	@ 0x54
 8001538:	e7f8      	b.n	800152c <__sseek+0x18>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	ffffefff 	.word	0xffffefff

08001540 <__sclose>:
 8001540:	b510      	push	{r4, lr}
 8001542:	230e      	movs	r3, #14
 8001544:	5ec9      	ldrsh	r1, [r1, r3]
 8001546:	f000 f809 	bl	800155c <_close_r>
 800154a:	bd10      	pop	{r4, pc}

0800154c <memset>:
 800154c:	0003      	movs	r3, r0
 800154e:	1882      	adds	r2, r0, r2
 8001550:	4293      	cmp	r3, r2
 8001552:	d100      	bne.n	8001556 <memset+0xa>
 8001554:	4770      	bx	lr
 8001556:	7019      	strb	r1, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	e7f9      	b.n	8001550 <memset+0x4>

0800155c <_close_r>:
 800155c:	2300      	movs	r3, #0
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	4d06      	ldr	r5, [pc, #24]	@ (800157c <_close_r+0x20>)
 8001562:	0004      	movs	r4, r0
 8001564:	0008      	movs	r0, r1
 8001566:	602b      	str	r3, [r5, #0]
 8001568:	f000 feb2 	bl	80022d0 <_close>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d103      	bne.n	8001578 <_close_r+0x1c>
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d000      	beq.n	8001578 <_close_r+0x1c>
 8001576:	6023      	str	r3, [r4, #0]
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	20000234 	.word	0x20000234

08001580 <_lseek_r>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	0004      	movs	r4, r0
 8001584:	0008      	movs	r0, r1
 8001586:	0011      	movs	r1, r2
 8001588:	001a      	movs	r2, r3
 800158a:	2300      	movs	r3, #0
 800158c:	4d05      	ldr	r5, [pc, #20]	@ (80015a4 <_lseek_r+0x24>)
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	f000 fec6 	bl	8002320 <_lseek>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	d103      	bne.n	80015a0 <_lseek_r+0x20>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d000      	beq.n	80015a0 <_lseek_r+0x20>
 800159e:	6023      	str	r3, [r4, #0]
 80015a0:	bd70      	pop	{r4, r5, r6, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	20000234 	.word	0x20000234

080015a8 <_read_r>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	0004      	movs	r4, r0
 80015ac:	0008      	movs	r0, r1
 80015ae:	0011      	movs	r1, r2
 80015b0:	001a      	movs	r2, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	4d05      	ldr	r5, [pc, #20]	@ (80015cc <_read_r+0x24>)
 80015b6:	602b      	str	r3, [r5, #0]
 80015b8:	f000 feba 	bl	8002330 <_read>
 80015bc:	1c43      	adds	r3, r0, #1
 80015be:	d103      	bne.n	80015c8 <_read_r+0x20>
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d000      	beq.n	80015c8 <_read_r+0x20>
 80015c6:	6023      	str	r3, [r4, #0]
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	20000234 	.word	0x20000234

080015d0 <_write_r>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	0004      	movs	r4, r0
 80015d4:	0008      	movs	r0, r1
 80015d6:	0011      	movs	r1, r2
 80015d8:	001a      	movs	r2, r3
 80015da:	2300      	movs	r3, #0
 80015dc:	4d05      	ldr	r5, [pc, #20]	@ (80015f4 <_write_r+0x24>)
 80015de:	602b      	str	r3, [r5, #0]
 80015e0:	f000 febc 	bl	800235c <_write>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d103      	bne.n	80015f0 <_write_r+0x20>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d000      	beq.n	80015f0 <_write_r+0x20>
 80015ee:	6023      	str	r3, [r4, #0]
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	20000234 	.word	0x20000234

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	2600      	movs	r6, #0
 80015fc:	4c0c      	ldr	r4, [pc, #48]	@ (8001630 <__libc_init_array+0x38>)
 80015fe:	4d0d      	ldr	r5, [pc, #52]	@ (8001634 <__libc_init_array+0x3c>)
 8001600:	1b64      	subs	r4, r4, r5
 8001602:	10a4      	asrs	r4, r4, #2
 8001604:	42a6      	cmp	r6, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	2600      	movs	r6, #0
 800160a:	f000 fedf 	bl	80023cc <_init>
 800160e:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <__libc_init_array+0x40>)
 8001610:	4d0a      	ldr	r5, [pc, #40]	@ (800163c <__libc_init_array+0x44>)
 8001612:	1b64      	subs	r4, r4, r5
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	42a6      	cmp	r6, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	00b3      	lsls	r3, r6, #2
 800161e:	58eb      	ldr	r3, [r5, r3]
 8001620:	4798      	blx	r3
 8001622:	3601      	adds	r6, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	00b3      	lsls	r3, r6, #2
 8001628:	58eb      	ldr	r3, [r5, r3]
 800162a:	4798      	blx	r3
 800162c:	3601      	adds	r6, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	0800257c 	.word	0x0800257c
 8001634:	0800257c 	.word	0x0800257c
 8001638:	08002580 	.word	0x08002580
 800163c:	0800257c 	.word	0x0800257c

08001640 <__retarget_lock_init_recursive>:
 8001640:	4770      	bx	lr

08001642 <__retarget_lock_acquire_recursive>:
 8001642:	4770      	bx	lr

08001644 <__retarget_lock_release_recursive>:
 8001644:	4770      	bx	lr
	...

08001648 <__assert_func>:
 8001648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800164a:	0014      	movs	r4, r2
 800164c:	001a      	movs	r2, r3
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <__assert_func+0x2c>)
 8001650:	0005      	movs	r5, r0
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	000e      	movs	r6, r1
 8001656:	68d8      	ldr	r0, [r3, #12]
 8001658:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <__assert_func+0x30>)
 800165a:	2c00      	cmp	r4, #0
 800165c:	d101      	bne.n	8001662 <__assert_func+0x1a>
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <__assert_func+0x34>)
 8001660:	001c      	movs	r4, r3
 8001662:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__assert_func+0x38>)
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	9402      	str	r4, [sp, #8]
 8001668:	002b      	movs	r3, r5
 800166a:	9600      	str	r6, [sp, #0]
 800166c:	f000 f9c2 	bl	80019f4 <fiprintf>
 8001670:	f000 f9e2 	bl	8001a38 <abort>
 8001674:	2000001c 	.word	0x2000001c
 8001678:	0800250c 	.word	0x0800250c
 800167c:	08002547 	.word	0x08002547
 8001680:	08002519 	.word	0x08002519

08001684 <_free_r>:
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	0005      	movs	r5, r0
 8001688:	1e0c      	subs	r4, r1, #0
 800168a:	d010      	beq.n	80016ae <_free_r+0x2a>
 800168c:	3c04      	subs	r4, #4
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da00      	bge.n	8001696 <_free_r+0x12>
 8001694:	18e4      	adds	r4, r4, r3
 8001696:	0028      	movs	r0, r5
 8001698:	f000 f8ea 	bl	8001870 <__malloc_lock>
 800169c:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <_free_r+0x90>)
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <_free_r+0x2c>
 80016a4:	6063      	str	r3, [r4, #4]
 80016a6:	6014      	str	r4, [r2, #0]
 80016a8:	0028      	movs	r0, r5
 80016aa:	f000 f8e9 	bl	8001880 <__malloc_unlock>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	42a3      	cmp	r3, r4
 80016b2:	d908      	bls.n	80016c6 <_free_r+0x42>
 80016b4:	6820      	ldr	r0, [r4, #0]
 80016b6:	1821      	adds	r1, r4, r0
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d1f3      	bne.n	80016a4 <_free_r+0x20>
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	1809      	adds	r1, r1, r0
 80016c2:	6021      	str	r1, [r4, #0]
 80016c4:	e7ee      	b.n	80016a4 <_free_r+0x20>
 80016c6:	001a      	movs	r2, r3
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_free_r+0x4e>
 80016ce:	42a3      	cmp	r3, r4
 80016d0:	d9f9      	bls.n	80016c6 <_free_r+0x42>
 80016d2:	6811      	ldr	r1, [r2, #0]
 80016d4:	1850      	adds	r0, r2, r1
 80016d6:	42a0      	cmp	r0, r4
 80016d8:	d10b      	bne.n	80016f2 <_free_r+0x6e>
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	1809      	adds	r1, r1, r0
 80016de:	1850      	adds	r0, r2, r1
 80016e0:	6011      	str	r1, [r2, #0]
 80016e2:	4283      	cmp	r3, r0
 80016e4:	d1e0      	bne.n	80016a8 <_free_r+0x24>
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	1841      	adds	r1, r0, r1
 80016ec:	6011      	str	r1, [r2, #0]
 80016ee:	6053      	str	r3, [r2, #4]
 80016f0:	e7da      	b.n	80016a8 <_free_r+0x24>
 80016f2:	42a0      	cmp	r0, r4
 80016f4:	d902      	bls.n	80016fc <_free_r+0x78>
 80016f6:	230c      	movs	r3, #12
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	e7d5      	b.n	80016a8 <_free_r+0x24>
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	1821      	adds	r1, r4, r0
 8001700:	428b      	cmp	r3, r1
 8001702:	d103      	bne.n	800170c <_free_r+0x88>
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	1809      	adds	r1, r1, r0
 800170a:	6021      	str	r1, [r4, #0]
 800170c:	6063      	str	r3, [r4, #4]
 800170e:	6054      	str	r4, [r2, #4]
 8001710:	e7ca      	b.n	80016a8 <_free_r+0x24>
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	20000240 	.word	0x20000240

08001718 <malloc>:
 8001718:	b510      	push	{r4, lr}
 800171a:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <malloc+0x10>)
 800171c:	0001      	movs	r1, r0
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	f000 f826 	bl	8001770 <_malloc_r>
 8001724:	bd10      	pop	{r4, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	2000001c 	.word	0x2000001c

0800172c <sbrk_aligned>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4e0f      	ldr	r6, [pc, #60]	@ (800176c <sbrk_aligned+0x40>)
 8001730:	000d      	movs	r5, r1
 8001732:	6831      	ldr	r1, [r6, #0]
 8001734:	0004      	movs	r4, r0
 8001736:	2900      	cmp	r1, #0
 8001738:	d102      	bne.n	8001740 <sbrk_aligned+0x14>
 800173a:	f000 f96b 	bl	8001a14 <_sbrk_r>
 800173e:	6030      	str	r0, [r6, #0]
 8001740:	0029      	movs	r1, r5
 8001742:	0020      	movs	r0, r4
 8001744:	f000 f966 	bl	8001a14 <_sbrk_r>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d103      	bne.n	8001754 <sbrk_aligned+0x28>
 800174c:	2501      	movs	r5, #1
 800174e:	426d      	negs	r5, r5
 8001750:	0028      	movs	r0, r5
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	2303      	movs	r3, #3
 8001756:	1cc5      	adds	r5, r0, #3
 8001758:	439d      	bics	r5, r3
 800175a:	42a8      	cmp	r0, r5
 800175c:	d0f8      	beq.n	8001750 <sbrk_aligned+0x24>
 800175e:	1a29      	subs	r1, r5, r0
 8001760:	0020      	movs	r0, r4
 8001762:	f000 f957 	bl	8001a14 <_sbrk_r>
 8001766:	3001      	adds	r0, #1
 8001768:	d1f2      	bne.n	8001750 <sbrk_aligned+0x24>
 800176a:	e7ef      	b.n	800174c <sbrk_aligned+0x20>
 800176c:	2000023c 	.word	0x2000023c

08001770 <_malloc_r>:
 8001770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001772:	2203      	movs	r2, #3
 8001774:	1ccb      	adds	r3, r1, #3
 8001776:	4393      	bics	r3, r2
 8001778:	3308      	adds	r3, #8
 800177a:	0005      	movs	r5, r0
 800177c:	001f      	movs	r7, r3
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d234      	bcs.n	80017ec <_malloc_r+0x7c>
 8001782:	270c      	movs	r7, #12
 8001784:	42b9      	cmp	r1, r7
 8001786:	d833      	bhi.n	80017f0 <_malloc_r+0x80>
 8001788:	0028      	movs	r0, r5
 800178a:	f000 f871 	bl	8001870 <__malloc_lock>
 800178e:	4e37      	ldr	r6, [pc, #220]	@ (800186c <_malloc_r+0xfc>)
 8001790:	6833      	ldr	r3, [r6, #0]
 8001792:	001c      	movs	r4, r3
 8001794:	2c00      	cmp	r4, #0
 8001796:	d12f      	bne.n	80017f8 <_malloc_r+0x88>
 8001798:	0039      	movs	r1, r7
 800179a:	0028      	movs	r0, r5
 800179c:	f7ff ffc6 	bl	800172c <sbrk_aligned>
 80017a0:	0004      	movs	r4, r0
 80017a2:	1c43      	adds	r3, r0, #1
 80017a4:	d15f      	bne.n	8001866 <_malloc_r+0xf6>
 80017a6:	6834      	ldr	r4, [r6, #0]
 80017a8:	9400      	str	r4, [sp, #0]
 80017aa:	9b00      	ldr	r3, [sp, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d14a      	bne.n	8001846 <_malloc_r+0xd6>
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d052      	beq.n	800185a <_malloc_r+0xea>
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	0028      	movs	r0, r5
 80017b8:	18e3      	adds	r3, r4, r3
 80017ba:	9900      	ldr	r1, [sp, #0]
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f000 f929 	bl	8001a14 <_sbrk_r>
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	4283      	cmp	r3, r0
 80017c6:	d148      	bne.n	800185a <_malloc_r+0xea>
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	0028      	movs	r0, r5
 80017cc:	1aff      	subs	r7, r7, r3
 80017ce:	0039      	movs	r1, r7
 80017d0:	f7ff ffac 	bl	800172c <sbrk_aligned>
 80017d4:	3001      	adds	r0, #1
 80017d6:	d040      	beq.n	800185a <_malloc_r+0xea>
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	19db      	adds	r3, r3, r7
 80017dc:	6023      	str	r3, [r4, #0]
 80017de:	6833      	ldr	r3, [r6, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d133      	bne.n	800184e <_malloc_r+0xde>
 80017e6:	9b00      	ldr	r3, [sp, #0]
 80017e8:	6033      	str	r3, [r6, #0]
 80017ea:	e019      	b.n	8001820 <_malloc_r+0xb0>
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dac9      	bge.n	8001784 <_malloc_r+0x14>
 80017f0:	230c      	movs	r3, #12
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	2000      	movs	r0, #0
 80017f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017f8:	6821      	ldr	r1, [r4, #0]
 80017fa:	1bc9      	subs	r1, r1, r7
 80017fc:	d420      	bmi.n	8001840 <_malloc_r+0xd0>
 80017fe:	290b      	cmp	r1, #11
 8001800:	d90a      	bls.n	8001818 <_malloc_r+0xa8>
 8001802:	19e2      	adds	r2, r4, r7
 8001804:	6027      	str	r7, [r4, #0]
 8001806:	42a3      	cmp	r3, r4
 8001808:	d104      	bne.n	8001814 <_malloc_r+0xa4>
 800180a:	6032      	str	r2, [r6, #0]
 800180c:	6863      	ldr	r3, [r4, #4]
 800180e:	6011      	str	r1, [r2, #0]
 8001810:	6053      	str	r3, [r2, #4]
 8001812:	e005      	b.n	8001820 <_malloc_r+0xb0>
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e7f9      	b.n	800180c <_malloc_r+0x9c>
 8001818:	6862      	ldr	r2, [r4, #4]
 800181a:	42a3      	cmp	r3, r4
 800181c:	d10e      	bne.n	800183c <_malloc_r+0xcc>
 800181e:	6032      	str	r2, [r6, #0]
 8001820:	0028      	movs	r0, r5
 8001822:	f000 f82d 	bl	8001880 <__malloc_unlock>
 8001826:	0020      	movs	r0, r4
 8001828:	2207      	movs	r2, #7
 800182a:	300b      	adds	r0, #11
 800182c:	1d23      	adds	r3, r4, #4
 800182e:	4390      	bics	r0, r2
 8001830:	1ac2      	subs	r2, r0, r3
 8001832:	4298      	cmp	r0, r3
 8001834:	d0df      	beq.n	80017f6 <_malloc_r+0x86>
 8001836:	1a1b      	subs	r3, r3, r0
 8001838:	50a3      	str	r3, [r4, r2]
 800183a:	e7dc      	b.n	80017f6 <_malloc_r+0x86>
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	e7ef      	b.n	8001820 <_malloc_r+0xb0>
 8001840:	0023      	movs	r3, r4
 8001842:	6864      	ldr	r4, [r4, #4]
 8001844:	e7a6      	b.n	8001794 <_malloc_r+0x24>
 8001846:	9c00      	ldr	r4, [sp, #0]
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	e7ad      	b.n	80017aa <_malloc_r+0x3a>
 800184e:	001a      	movs	r2, r3
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	42a3      	cmp	r3, r4
 8001854:	d1fb      	bne.n	800184e <_malloc_r+0xde>
 8001856:	2300      	movs	r3, #0
 8001858:	e7da      	b.n	8001810 <_malloc_r+0xa0>
 800185a:	230c      	movs	r3, #12
 800185c:	0028      	movs	r0, r5
 800185e:	602b      	str	r3, [r5, #0]
 8001860:	f000 f80e 	bl	8001880 <__malloc_unlock>
 8001864:	e7c6      	b.n	80017f4 <_malloc_r+0x84>
 8001866:	6007      	str	r7, [r0, #0]
 8001868:	e7da      	b.n	8001820 <_malloc_r+0xb0>
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	20000240 	.word	0x20000240

08001870 <__malloc_lock>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4802      	ldr	r0, [pc, #8]	@ (800187c <__malloc_lock+0xc>)
 8001874:	f7ff fee5 	bl	8001642 <__retarget_lock_acquire_recursive>
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	20000238 	.word	0x20000238

08001880 <__malloc_unlock>:
 8001880:	b510      	push	{r4, lr}
 8001882:	4802      	ldr	r0, [pc, #8]	@ (800188c <__malloc_unlock+0xc>)
 8001884:	f7ff fede 	bl	8001644 <__retarget_lock_release_recursive>
 8001888:	bd10      	pop	{r4, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	20000238 	.word	0x20000238

08001890 <__sflush_r>:
 8001890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001892:	220c      	movs	r2, #12
 8001894:	5e8b      	ldrsh	r3, [r1, r2]
 8001896:	0005      	movs	r5, r0
 8001898:	000c      	movs	r4, r1
 800189a:	071a      	lsls	r2, r3, #28
 800189c:	d456      	bmi.n	800194c <__sflush_r+0xbc>
 800189e:	684a      	ldr	r2, [r1, #4]
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc02      	bgt.n	80018aa <__sflush_r+0x1a>
 80018a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	dd4e      	ble.n	8001948 <__sflush_r+0xb8>
 80018aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80018ac:	2f00      	cmp	r7, #0
 80018ae:	d04b      	beq.n	8001948 <__sflush_r+0xb8>
 80018b0:	2200      	movs	r2, #0
 80018b2:	2080      	movs	r0, #128	@ 0x80
 80018b4:	682e      	ldr	r6, [r5, #0]
 80018b6:	602a      	str	r2, [r5, #0]
 80018b8:	001a      	movs	r2, r3
 80018ba:	0140      	lsls	r0, r0, #5
 80018bc:	6a21      	ldr	r1, [r4, #32]
 80018be:	4002      	ands	r2, r0
 80018c0:	4203      	tst	r3, r0
 80018c2:	d033      	beq.n	800192c <__sflush_r+0x9c>
 80018c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018c6:	89a3      	ldrh	r3, [r4, #12]
 80018c8:	075b      	lsls	r3, r3, #29
 80018ca:	d506      	bpl.n	80018da <__sflush_r+0x4a>
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <__sflush_r+0x4a>
 80018d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	2300      	movs	r3, #0
 80018dc:	0028      	movs	r0, r5
 80018de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80018e0:	6a21      	ldr	r1, [r4, #32]
 80018e2:	47b8      	blx	r7
 80018e4:	89a2      	ldrh	r2, [r4, #12]
 80018e6:	1c43      	adds	r3, r0, #1
 80018e8:	d106      	bne.n	80018f8 <__sflush_r+0x68>
 80018ea:	6829      	ldr	r1, [r5, #0]
 80018ec:	291d      	cmp	r1, #29
 80018ee:	d846      	bhi.n	800197e <__sflush_r+0xee>
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <__sflush_r+0x108>)
 80018f2:	40cb      	lsrs	r3, r1
 80018f4:	07db      	lsls	r3, r3, #31
 80018f6:	d542      	bpl.n	800197e <__sflush_r+0xee>
 80018f8:	2300      	movs	r3, #0
 80018fa:	6063      	str	r3, [r4, #4]
 80018fc:	6923      	ldr	r3, [r4, #16]
 80018fe:	6023      	str	r3, [r4, #0]
 8001900:	04d2      	lsls	r2, r2, #19
 8001902:	d505      	bpl.n	8001910 <__sflush_r+0x80>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d102      	bne.n	800190e <__sflush_r+0x7e>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <__sflush_r+0x80>
 800190e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001912:	602e      	str	r6, [r5, #0]
 8001914:	2900      	cmp	r1, #0
 8001916:	d017      	beq.n	8001948 <__sflush_r+0xb8>
 8001918:	0023      	movs	r3, r4
 800191a:	3344      	adds	r3, #68	@ 0x44
 800191c:	4299      	cmp	r1, r3
 800191e:	d002      	beq.n	8001926 <__sflush_r+0x96>
 8001920:	0028      	movs	r0, r5
 8001922:	f7ff feaf 	bl	8001684 <_free_r>
 8001926:	2300      	movs	r3, #0
 8001928:	6363      	str	r3, [r4, #52]	@ 0x34
 800192a:	e00d      	b.n	8001948 <__sflush_r+0xb8>
 800192c:	2301      	movs	r3, #1
 800192e:	0028      	movs	r0, r5
 8001930:	47b8      	blx	r7
 8001932:	0002      	movs	r2, r0
 8001934:	1c43      	adds	r3, r0, #1
 8001936:	d1c6      	bne.n	80018c6 <__sflush_r+0x36>
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0c3      	beq.n	80018c6 <__sflush_r+0x36>
 800193e:	2b1d      	cmp	r3, #29
 8001940:	d001      	beq.n	8001946 <__sflush_r+0xb6>
 8001942:	2b16      	cmp	r3, #22
 8001944:	d11a      	bne.n	800197c <__sflush_r+0xec>
 8001946:	602e      	str	r6, [r5, #0]
 8001948:	2000      	movs	r0, #0
 800194a:	e01e      	b.n	800198a <__sflush_r+0xfa>
 800194c:	690e      	ldr	r6, [r1, #16]
 800194e:	2e00      	cmp	r6, #0
 8001950:	d0fa      	beq.n	8001948 <__sflush_r+0xb8>
 8001952:	680f      	ldr	r7, [r1, #0]
 8001954:	600e      	str	r6, [r1, #0]
 8001956:	1bba      	subs	r2, r7, r6
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	079b      	lsls	r3, r3, #30
 800195e:	d100      	bne.n	8001962 <__sflush_r+0xd2>
 8001960:	694a      	ldr	r2, [r1, #20]
 8001962:	60a2      	str	r2, [r4, #8]
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	ddee      	ble.n	8001948 <__sflush_r+0xb8>
 800196a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800196c:	0032      	movs	r2, r6
 800196e:	001f      	movs	r7, r3
 8001970:	0028      	movs	r0, r5
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	6a21      	ldr	r1, [r4, #32]
 8001976:	47b8      	blx	r7
 8001978:	2800      	cmp	r0, #0
 800197a:	dc07      	bgt.n	800198c <__sflush_r+0xfc>
 800197c:	89a2      	ldrh	r2, [r4, #12]
 800197e:	2340      	movs	r3, #64	@ 0x40
 8001980:	2001      	movs	r0, #1
 8001982:	4313      	orrs	r3, r2
 8001984:	b21b      	sxth	r3, r3
 8001986:	81a3      	strh	r3, [r4, #12]
 8001988:	4240      	negs	r0, r0
 800198a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	1836      	adds	r6, r6, r0
 8001990:	1a1b      	subs	r3, r3, r0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	e7e6      	b.n	8001964 <__sflush_r+0xd4>
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	20400001 	.word	0x20400001

0800199c <_fflush_r>:
 800199c:	690b      	ldr	r3, [r1, #16]
 800199e:	b570      	push	{r4, r5, r6, lr}
 80019a0:	0005      	movs	r5, r0
 80019a2:	000c      	movs	r4, r1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_fflush_r+0x12>
 80019a8:	2500      	movs	r5, #0
 80019aa:	0028      	movs	r0, r5
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d004      	beq.n	80019bc <_fflush_r+0x20>
 80019b2:	6a03      	ldr	r3, [r0, #32]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <_fflush_r+0x20>
 80019b8:	f7ff fd48 	bl	800144c <__sinit>
 80019bc:	220c      	movs	r2, #12
 80019be:	5ea3      	ldrsh	r3, [r4, r2]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f1      	beq.n	80019a8 <_fflush_r+0xc>
 80019c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019c6:	07d2      	lsls	r2, r2, #31
 80019c8:	d404      	bmi.n	80019d4 <_fflush_r+0x38>
 80019ca:	059b      	lsls	r3, r3, #22
 80019cc:	d402      	bmi.n	80019d4 <_fflush_r+0x38>
 80019ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019d0:	f7ff fe37 	bl	8001642 <__retarget_lock_acquire_recursive>
 80019d4:	0028      	movs	r0, r5
 80019d6:	0021      	movs	r1, r4
 80019d8:	f7ff ff5a 	bl	8001890 <__sflush_r>
 80019dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019de:	0005      	movs	r5, r0
 80019e0:	07db      	lsls	r3, r3, #31
 80019e2:	d4e2      	bmi.n	80019aa <_fflush_r+0xe>
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	059b      	lsls	r3, r3, #22
 80019e8:	d4df      	bmi.n	80019aa <_fflush_r+0xe>
 80019ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019ec:	f7ff fe2a 	bl	8001644 <__retarget_lock_release_recursive>
 80019f0:	e7db      	b.n	80019aa <_fflush_r+0xe>
	...

080019f4 <fiprintf>:
 80019f4:	b40e      	push	{r1, r2, r3}
 80019f6:	b517      	push	{r0, r1, r2, r4, lr}
 80019f8:	4c05      	ldr	r4, [pc, #20]	@ (8001a10 <fiprintf+0x1c>)
 80019fa:	ab05      	add	r3, sp, #20
 80019fc:	cb04      	ldmia	r3!, {r2}
 80019fe:	0001      	movs	r1, r0
 8001a00:	6820      	ldr	r0, [r4, #0]
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	f000 f846 	bl	8001a94 <_vfiprintf_r>
 8001a08:	bc1e      	pop	{r1, r2, r3, r4}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	b003      	add	sp, #12
 8001a0e:	4718      	bx	r3
 8001a10:	2000001c 	.word	0x2000001c

08001a14 <_sbrk_r>:
 8001a14:	2300      	movs	r3, #0
 8001a16:	b570      	push	{r4, r5, r6, lr}
 8001a18:	4d06      	ldr	r5, [pc, #24]	@ (8001a34 <_sbrk_r+0x20>)
 8001a1a:	0004      	movs	r4, r0
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	602b      	str	r3, [r5, #0]
 8001a20:	f000 fc8e 	bl	8002340 <_sbrk>
 8001a24:	1c43      	adds	r3, r0, #1
 8001a26:	d103      	bne.n	8001a30 <_sbrk_r+0x1c>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d000      	beq.n	8001a30 <_sbrk_r+0x1c>
 8001a2e:	6023      	str	r3, [r4, #0]
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	20000234 	.word	0x20000234

08001a38 <abort>:
 8001a38:	2006      	movs	r0, #6
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	f000 fb8c 	bl	8002158 <raise>
 8001a40:	2001      	movs	r0, #1
 8001a42:	f000 fc93 	bl	800236c <_exit>

08001a46 <__sfputc_r>:
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6093      	str	r3, [r2, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da04      	bge.n	8001a5c <__sfputc_r+0x16>
 8001a52:	6994      	ldr	r4, [r2, #24]
 8001a54:	42a3      	cmp	r3, r4
 8001a56:	db07      	blt.n	8001a68 <__sfputc_r+0x22>
 8001a58:	290a      	cmp	r1, #10
 8001a5a:	d005      	beq.n	8001a68 <__sfputc_r+0x22>
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	1c58      	adds	r0, r3, #1
 8001a60:	6010      	str	r0, [r2, #0]
 8001a62:	7019      	strb	r1, [r3, #0]
 8001a64:	0008      	movs	r0, r1
 8001a66:	bd10      	pop	{r4, pc}
 8001a68:	f000 faac 	bl	8001fc4 <__swbuf_r>
 8001a6c:	0001      	movs	r1, r0
 8001a6e:	e7f9      	b.n	8001a64 <__sfputc_r+0x1e>

08001a70 <__sfputs_r>:
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	0006      	movs	r6, r0
 8001a74:	000f      	movs	r7, r1
 8001a76:	0014      	movs	r4, r2
 8001a78:	18d5      	adds	r5, r2, r3
 8001a7a:	42ac      	cmp	r4, r5
 8001a7c:	d101      	bne.n	8001a82 <__sfputs_r+0x12>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	e007      	b.n	8001a92 <__sfputs_r+0x22>
 8001a82:	7821      	ldrb	r1, [r4, #0]
 8001a84:	003a      	movs	r2, r7
 8001a86:	0030      	movs	r0, r6
 8001a88:	f7ff ffdd 	bl	8001a46 <__sfputc_r>
 8001a8c:	3401      	adds	r4, #1
 8001a8e:	1c43      	adds	r3, r0, #1
 8001a90:	d1f3      	bne.n	8001a7a <__sfputs_r+0xa>
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a94 <_vfiprintf_r>:
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b0a1      	sub	sp, #132	@ 0x84
 8001a98:	000f      	movs	r7, r1
 8001a9a:	0015      	movs	r5, r2
 8001a9c:	001e      	movs	r6, r3
 8001a9e:	9003      	str	r0, [sp, #12]
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d004      	beq.n	8001aae <_vfiprintf_r+0x1a>
 8001aa4:	6a03      	ldr	r3, [r0, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <_vfiprintf_r+0x1a>
 8001aaa:	f7ff fccf 	bl	800144c <__sinit>
 8001aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ab0:	07db      	lsls	r3, r3, #31
 8001ab2:	d405      	bmi.n	8001ac0 <_vfiprintf_r+0x2c>
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	059b      	lsls	r3, r3, #22
 8001ab8:	d402      	bmi.n	8001ac0 <_vfiprintf_r+0x2c>
 8001aba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001abc:	f7ff fdc1 	bl	8001642 <__retarget_lock_acquire_recursive>
 8001ac0:	89bb      	ldrh	r3, [r7, #12]
 8001ac2:	071b      	lsls	r3, r3, #28
 8001ac4:	d502      	bpl.n	8001acc <_vfiprintf_r+0x38>
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d113      	bne.n	8001af4 <_vfiprintf_r+0x60>
 8001acc:	0039      	movs	r1, r7
 8001ace:	9803      	ldr	r0, [sp, #12]
 8001ad0:	f000 faba 	bl	8002048 <__swsetup_r>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d00d      	beq.n	8001af4 <_vfiprintf_r+0x60>
 8001ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ada:	07db      	lsls	r3, r3, #31
 8001adc:	d503      	bpl.n	8001ae6 <_vfiprintf_r+0x52>
 8001ade:	2001      	movs	r0, #1
 8001ae0:	4240      	negs	r0, r0
 8001ae2:	b021      	add	sp, #132	@ 0x84
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	059b      	lsls	r3, r3, #22
 8001aea:	d4f8      	bmi.n	8001ade <_vfiprintf_r+0x4a>
 8001aec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001aee:	f7ff fda9 	bl	8001644 <__retarget_lock_release_recursive>
 8001af2:	e7f4      	b.n	8001ade <_vfiprintf_r+0x4a>
 8001af4:	2300      	movs	r3, #0
 8001af6:	ac08      	add	r4, sp, #32
 8001af8:	6163      	str	r3, [r4, #20]
 8001afa:	3320      	adds	r3, #32
 8001afc:	7663      	strb	r3, [r4, #25]
 8001afe:	3310      	adds	r3, #16
 8001b00:	76a3      	strb	r3, [r4, #26]
 8001b02:	9607      	str	r6, [sp, #28]
 8001b04:	002e      	movs	r6, r5
 8001b06:	7833      	ldrb	r3, [r6, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <_vfiprintf_r+0x7c>
 8001b0c:	2b25      	cmp	r3, #37	@ 0x25
 8001b0e:	d148      	bne.n	8001ba2 <_vfiprintf_r+0x10e>
 8001b10:	1b73      	subs	r3, r6, r5
 8001b12:	9305      	str	r3, [sp, #20]
 8001b14:	42ae      	cmp	r6, r5
 8001b16:	d00b      	beq.n	8001b30 <_vfiprintf_r+0x9c>
 8001b18:	002a      	movs	r2, r5
 8001b1a:	0039      	movs	r1, r7
 8001b1c:	9803      	ldr	r0, [sp, #12]
 8001b1e:	f7ff ffa7 	bl	8001a70 <__sfputs_r>
 8001b22:	3001      	adds	r0, #1
 8001b24:	d100      	bne.n	8001b28 <_vfiprintf_r+0x94>
 8001b26:	e0ae      	b.n	8001c86 <_vfiprintf_r+0x1f2>
 8001b28:	6963      	ldr	r3, [r4, #20]
 8001b2a:	9a05      	ldr	r2, [sp, #20]
 8001b2c:	189b      	adds	r3, r3, r2
 8001b2e:	6163      	str	r3, [r4, #20]
 8001b30:	7833      	ldrb	r3, [r6, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d100      	bne.n	8001b38 <_vfiprintf_r+0xa4>
 8001b36:	e0a6      	b.n	8001c86 <_vfiprintf_r+0x1f2>
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	4252      	negs	r2, r2
 8001b3e:	6062      	str	r2, [r4, #4]
 8001b40:	a904      	add	r1, sp, #16
 8001b42:	3254      	adds	r2, #84	@ 0x54
 8001b44:	1852      	adds	r2, r2, r1
 8001b46:	1c75      	adds	r5, r6, #1
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	60e3      	str	r3, [r4, #12]
 8001b4c:	60a3      	str	r3, [r4, #8]
 8001b4e:	7013      	strb	r3, [r2, #0]
 8001b50:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001b52:	4b59      	ldr	r3, [pc, #356]	@ (8001cb8 <_vfiprintf_r+0x224>)
 8001b54:	2205      	movs	r2, #5
 8001b56:	0018      	movs	r0, r3
 8001b58:	7829      	ldrb	r1, [r5, #0]
 8001b5a:	9305      	str	r3, [sp, #20]
 8001b5c:	f000 fb1c 	bl	8002198 <memchr>
 8001b60:	1c6e      	adds	r6, r5, #1
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d11f      	bne.n	8001ba6 <_vfiprintf_r+0x112>
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	06d3      	lsls	r3, r2, #27
 8001b6a:	d504      	bpl.n	8001b76 <_vfiprintf_r+0xe2>
 8001b6c:	2353      	movs	r3, #83	@ 0x53
 8001b6e:	a904      	add	r1, sp, #16
 8001b70:	185b      	adds	r3, r3, r1
 8001b72:	2120      	movs	r1, #32
 8001b74:	7019      	strb	r1, [r3, #0]
 8001b76:	0713      	lsls	r3, r2, #28
 8001b78:	d504      	bpl.n	8001b84 <_vfiprintf_r+0xf0>
 8001b7a:	2353      	movs	r3, #83	@ 0x53
 8001b7c:	a904      	add	r1, sp, #16
 8001b7e:	185b      	adds	r3, r3, r1
 8001b80:	212b      	movs	r1, #43	@ 0x2b
 8001b82:	7019      	strb	r1, [r3, #0]
 8001b84:	782b      	ldrb	r3, [r5, #0]
 8001b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b88:	d016      	beq.n	8001bb8 <_vfiprintf_r+0x124>
 8001b8a:	002e      	movs	r6, r5
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	200a      	movs	r0, #10
 8001b90:	68e3      	ldr	r3, [r4, #12]
 8001b92:	7832      	ldrb	r2, [r6, #0]
 8001b94:	1c75      	adds	r5, r6, #1
 8001b96:	3a30      	subs	r2, #48	@ 0x30
 8001b98:	2a09      	cmp	r2, #9
 8001b9a:	d950      	bls.n	8001c3e <_vfiprintf_r+0x1aa>
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d111      	bne.n	8001bc4 <_vfiprintf_r+0x130>
 8001ba0:	e017      	b.n	8001bd2 <_vfiprintf_r+0x13e>
 8001ba2:	3601      	adds	r6, #1
 8001ba4:	e7af      	b.n	8001b06 <_vfiprintf_r+0x72>
 8001ba6:	9b05      	ldr	r3, [sp, #20]
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	1ac0      	subs	r0, r0, r3
 8001bac:	2301      	movs	r3, #1
 8001bae:	4083      	lsls	r3, r0
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	0035      	movs	r5, r6
 8001bb4:	6023      	str	r3, [r4, #0]
 8001bb6:	e7cc      	b.n	8001b52 <_vfiprintf_r+0xbe>
 8001bb8:	9b07      	ldr	r3, [sp, #28]
 8001bba:	1d19      	adds	r1, r3, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	9107      	str	r1, [sp, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db01      	blt.n	8001bc8 <_vfiprintf_r+0x134>
 8001bc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001bc6:	e004      	b.n	8001bd2 <_vfiprintf_r+0x13e>
 8001bc8:	425b      	negs	r3, r3
 8001bca:	60e3      	str	r3, [r4, #12]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	7833      	ldrb	r3, [r6, #0]
 8001bd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bd6:	d10c      	bne.n	8001bf2 <_vfiprintf_r+0x15e>
 8001bd8:	7873      	ldrb	r3, [r6, #1]
 8001bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bdc:	d134      	bne.n	8001c48 <_vfiprintf_r+0x1b4>
 8001bde:	9b07      	ldr	r3, [sp, #28]
 8001be0:	3602      	adds	r6, #2
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	9207      	str	r2, [sp, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da01      	bge.n	8001bf0 <_vfiprintf_r+0x15c>
 8001bec:	2301      	movs	r3, #1
 8001bee:	425b      	negs	r3, r3
 8001bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bf2:	4d32      	ldr	r5, [pc, #200]	@ (8001cbc <_vfiprintf_r+0x228>)
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	0028      	movs	r0, r5
 8001bf8:	7831      	ldrb	r1, [r6, #0]
 8001bfa:	f000 facd 	bl	8002198 <memchr>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d006      	beq.n	8001c10 <_vfiprintf_r+0x17c>
 8001c02:	2340      	movs	r3, #64	@ 0x40
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	4083      	lsls	r3, r0
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	3601      	adds	r6, #1
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6023      	str	r3, [r4, #0]
 8001c10:	7831      	ldrb	r1, [r6, #0]
 8001c12:	2206      	movs	r2, #6
 8001c14:	482a      	ldr	r0, [pc, #168]	@ (8001cc0 <_vfiprintf_r+0x22c>)
 8001c16:	1c75      	adds	r5, r6, #1
 8001c18:	7621      	strb	r1, [r4, #24]
 8001c1a:	f000 fabd 	bl	8002198 <memchr>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d040      	beq.n	8001ca4 <_vfiprintf_r+0x210>
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <_vfiprintf_r+0x230>)
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d122      	bne.n	8001c6e <_vfiprintf_r+0x1da>
 8001c28:	2207      	movs	r2, #7
 8001c2a:	9b07      	ldr	r3, [sp, #28]
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	4393      	bics	r3, r2
 8001c30:	3308      	adds	r3, #8
 8001c32:	9307      	str	r3, [sp, #28]
 8001c34:	6963      	ldr	r3, [r4, #20]
 8001c36:	9a04      	ldr	r2, [sp, #16]
 8001c38:	189b      	adds	r3, r3, r2
 8001c3a:	6163      	str	r3, [r4, #20]
 8001c3c:	e762      	b.n	8001b04 <_vfiprintf_r+0x70>
 8001c3e:	4343      	muls	r3, r0
 8001c40:	002e      	movs	r6, r5
 8001c42:	2101      	movs	r1, #1
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	e7a4      	b.n	8001b92 <_vfiprintf_r+0xfe>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	3601      	adds	r6, #1
 8001c50:	6063      	str	r3, [r4, #4]
 8001c52:	7832      	ldrb	r2, [r6, #0]
 8001c54:	1c75      	adds	r5, r6, #1
 8001c56:	3a30      	subs	r2, #48	@ 0x30
 8001c58:	2a09      	cmp	r2, #9
 8001c5a:	d903      	bls.n	8001c64 <_vfiprintf_r+0x1d0>
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0c8      	beq.n	8001bf2 <_vfiprintf_r+0x15e>
 8001c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8001c62:	e7c6      	b.n	8001bf2 <_vfiprintf_r+0x15e>
 8001c64:	4341      	muls	r1, r0
 8001c66:	002e      	movs	r6, r5
 8001c68:	2301      	movs	r3, #1
 8001c6a:	1889      	adds	r1, r1, r2
 8001c6c:	e7f1      	b.n	8001c52 <_vfiprintf_r+0x1be>
 8001c6e:	aa07      	add	r2, sp, #28
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	0021      	movs	r1, r4
 8001c74:	003a      	movs	r2, r7
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <_vfiprintf_r+0x234>)
 8001c78:	9803      	ldr	r0, [sp, #12]
 8001c7a:	e000      	b.n	8001c7e <_vfiprintf_r+0x1ea>
 8001c7c:	bf00      	nop
 8001c7e:	9004      	str	r0, [sp, #16]
 8001c80:	9b04      	ldr	r3, [sp, #16]
 8001c82:	3301      	adds	r3, #1
 8001c84:	d1d6      	bne.n	8001c34 <_vfiprintf_r+0x1a0>
 8001c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c88:	07db      	lsls	r3, r3, #31
 8001c8a:	d405      	bmi.n	8001c98 <_vfiprintf_r+0x204>
 8001c8c:	89bb      	ldrh	r3, [r7, #12]
 8001c8e:	059b      	lsls	r3, r3, #22
 8001c90:	d402      	bmi.n	8001c98 <_vfiprintf_r+0x204>
 8001c92:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c94:	f7ff fcd6 	bl	8001644 <__retarget_lock_release_recursive>
 8001c98:	89bb      	ldrh	r3, [r7, #12]
 8001c9a:	065b      	lsls	r3, r3, #25
 8001c9c:	d500      	bpl.n	8001ca0 <_vfiprintf_r+0x20c>
 8001c9e:	e71e      	b.n	8001ade <_vfiprintf_r+0x4a>
 8001ca0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001ca2:	e71e      	b.n	8001ae2 <_vfiprintf_r+0x4e>
 8001ca4:	aa07      	add	r2, sp, #28
 8001ca6:	9200      	str	r2, [sp, #0]
 8001ca8:	0021      	movs	r1, r4
 8001caa:	003a      	movs	r2, r7
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <_vfiprintf_r+0x234>)
 8001cae:	9803      	ldr	r0, [sp, #12]
 8001cb0:	f000 f87c 	bl	8001dac <_printf_i>
 8001cb4:	e7e3      	b.n	8001c7e <_vfiprintf_r+0x1ea>
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	08002548 	.word	0x08002548
 8001cbc:	0800254e 	.word	0x0800254e
 8001cc0:	08002552 	.word	0x08002552
 8001cc4:	00000000 	.word	0x00000000
 8001cc8:	08001a71 	.word	0x08001a71

08001ccc <_printf_common>:
 8001ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cce:	0016      	movs	r6, r2
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	688a      	ldr	r2, [r1, #8]
 8001cd4:	690b      	ldr	r3, [r1, #16]
 8001cd6:	000c      	movs	r4, r1
 8001cd8:	9000      	str	r0, [sp, #0]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	da00      	bge.n	8001ce0 <_printf_common+0x14>
 8001cde:	0013      	movs	r3, r2
 8001ce0:	0022      	movs	r2, r4
 8001ce2:	6033      	str	r3, [r6, #0]
 8001ce4:	3243      	adds	r2, #67	@ 0x43
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d001      	beq.n	8001cf0 <_printf_common+0x24>
 8001cec:	3301      	adds	r3, #1
 8001cee:	6033      	str	r3, [r6, #0]
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	d502      	bpl.n	8001cfc <_printf_common+0x30>
 8001cf6:	6833      	ldr	r3, [r6, #0]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	6033      	str	r3, [r6, #0]
 8001cfc:	6822      	ldr	r2, [r4, #0]
 8001cfe:	2306      	movs	r3, #6
 8001d00:	0015      	movs	r5, r2
 8001d02:	401d      	ands	r5, r3
 8001d04:	421a      	tst	r2, r3
 8001d06:	d027      	beq.n	8001d58 <_printf_common+0x8c>
 8001d08:	0023      	movs	r3, r4
 8001d0a:	3343      	adds	r3, #67	@ 0x43
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	4193      	sbcs	r3, r2
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	0692      	lsls	r2, r2, #26
 8001d16:	d430      	bmi.n	8001d7a <_printf_common+0xae>
 8001d18:	0022      	movs	r2, r4
 8001d1a:	9901      	ldr	r1, [sp, #4]
 8001d1c:	9800      	ldr	r0, [sp, #0]
 8001d1e:	9d08      	ldr	r5, [sp, #32]
 8001d20:	3243      	adds	r2, #67	@ 0x43
 8001d22:	47a8      	blx	r5
 8001d24:	3001      	adds	r0, #1
 8001d26:	d025      	beq.n	8001d74 <_printf_common+0xa8>
 8001d28:	2206      	movs	r2, #6
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	2500      	movs	r5, #0
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d105      	bne.n	8001d40 <_printf_common+0x74>
 8001d34:	6833      	ldr	r3, [r6, #0]
 8001d36:	68e5      	ldr	r5, [r4, #12]
 8001d38:	1aed      	subs	r5, r5, r3
 8001d3a:	43eb      	mvns	r3, r5
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	401d      	ands	r5, r3
 8001d40:	68a3      	ldr	r3, [r4, #8]
 8001d42:	6922      	ldr	r2, [r4, #16]
 8001d44:	4293      	cmp	r3, r2
 8001d46:	dd01      	ble.n	8001d4c <_printf_common+0x80>
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	18ed      	adds	r5, r5, r3
 8001d4c:	2600      	movs	r6, #0
 8001d4e:	42b5      	cmp	r5, r6
 8001d50:	d120      	bne.n	8001d94 <_printf_common+0xc8>
 8001d52:	2000      	movs	r0, #0
 8001d54:	e010      	b.n	8001d78 <_printf_common+0xac>
 8001d56:	3501      	adds	r5, #1
 8001d58:	68e3      	ldr	r3, [r4, #12]
 8001d5a:	6832      	ldr	r2, [r6, #0]
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	42ab      	cmp	r3, r5
 8001d60:	ddd2      	ble.n	8001d08 <_printf_common+0x3c>
 8001d62:	0022      	movs	r2, r4
 8001d64:	2301      	movs	r3, #1
 8001d66:	9901      	ldr	r1, [sp, #4]
 8001d68:	9800      	ldr	r0, [sp, #0]
 8001d6a:	9f08      	ldr	r7, [sp, #32]
 8001d6c:	3219      	adds	r2, #25
 8001d6e:	47b8      	blx	r7
 8001d70:	3001      	adds	r0, #1
 8001d72:	d1f0      	bne.n	8001d56 <_printf_common+0x8a>
 8001d74:	2001      	movs	r0, #1
 8001d76:	4240      	negs	r0, r0
 8001d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d7a:	2030      	movs	r0, #48	@ 0x30
 8001d7c:	18e1      	adds	r1, r4, r3
 8001d7e:	3143      	adds	r1, #67	@ 0x43
 8001d80:	7008      	strb	r0, [r1, #0]
 8001d82:	0021      	movs	r1, r4
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	3145      	adds	r1, #69	@ 0x45
 8001d88:	7809      	ldrb	r1, [r1, #0]
 8001d8a:	18a2      	adds	r2, r4, r2
 8001d8c:	3243      	adds	r2, #67	@ 0x43
 8001d8e:	3302      	adds	r3, #2
 8001d90:	7011      	strb	r1, [r2, #0]
 8001d92:	e7c1      	b.n	8001d18 <_printf_common+0x4c>
 8001d94:	0022      	movs	r2, r4
 8001d96:	2301      	movs	r3, #1
 8001d98:	9901      	ldr	r1, [sp, #4]
 8001d9a:	9800      	ldr	r0, [sp, #0]
 8001d9c:	9f08      	ldr	r7, [sp, #32]
 8001d9e:	321a      	adds	r2, #26
 8001da0:	47b8      	blx	r7
 8001da2:	3001      	adds	r0, #1
 8001da4:	d0e6      	beq.n	8001d74 <_printf_common+0xa8>
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7d1      	b.n	8001d4e <_printf_common+0x82>
	...

08001dac <_printf_i>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b08b      	sub	sp, #44	@ 0x2c
 8001db0:	9206      	str	r2, [sp, #24]
 8001db2:	000a      	movs	r2, r1
 8001db4:	3243      	adds	r2, #67	@ 0x43
 8001db6:	9307      	str	r3, [sp, #28]
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	9203      	str	r2, [sp, #12]
 8001dbc:	7e0a      	ldrb	r2, [r1, #24]
 8001dbe:	000c      	movs	r4, r1
 8001dc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001dc2:	2a78      	cmp	r2, #120	@ 0x78
 8001dc4:	d809      	bhi.n	8001dda <_printf_i+0x2e>
 8001dc6:	2a62      	cmp	r2, #98	@ 0x62
 8001dc8:	d80b      	bhi.n	8001de2 <_printf_i+0x36>
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d100      	bne.n	8001dd0 <_printf_i+0x24>
 8001dce:	e0ba      	b.n	8001f46 <_printf_i+0x19a>
 8001dd0:	497a      	ldr	r1, [pc, #488]	@ (8001fbc <_printf_i+0x210>)
 8001dd2:	9104      	str	r1, [sp, #16]
 8001dd4:	2a58      	cmp	r2, #88	@ 0x58
 8001dd6:	d100      	bne.n	8001dda <_printf_i+0x2e>
 8001dd8:	e08e      	b.n	8001ef8 <_printf_i+0x14c>
 8001dda:	0025      	movs	r5, r4
 8001ddc:	3542      	adds	r5, #66	@ 0x42
 8001dde:	702a      	strb	r2, [r5, #0]
 8001de0:	e022      	b.n	8001e28 <_printf_i+0x7c>
 8001de2:	0010      	movs	r0, r2
 8001de4:	3863      	subs	r0, #99	@ 0x63
 8001de6:	2815      	cmp	r0, #21
 8001de8:	d8f7      	bhi.n	8001dda <_printf_i+0x2e>
 8001dea:	f7fe f969 	bl	80000c0 <__gnu_thumb1_case_shi>
 8001dee:	0016      	.short	0x0016
 8001df0:	fff6001f 	.word	0xfff6001f
 8001df4:	fff6fff6 	.word	0xfff6fff6
 8001df8:	001ffff6 	.word	0x001ffff6
 8001dfc:	fff6fff6 	.word	0xfff6fff6
 8001e00:	fff6fff6 	.word	0xfff6fff6
 8001e04:	0036009f 	.word	0x0036009f
 8001e08:	fff6007e 	.word	0xfff6007e
 8001e0c:	00b0fff6 	.word	0x00b0fff6
 8001e10:	0036fff6 	.word	0x0036fff6
 8001e14:	fff6fff6 	.word	0xfff6fff6
 8001e18:	0082      	.short	0x0082
 8001e1a:	0025      	movs	r5, r4
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	3542      	adds	r5, #66	@ 0x42
 8001e20:	1d11      	adds	r1, r2, #4
 8001e22:	6019      	str	r1, [r3, #0]
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	702b      	strb	r3, [r5, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e09e      	b.n	8001f6a <_printf_i+0x1be>
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	6809      	ldr	r1, [r1, #0]
 8001e30:	1d02      	adds	r2, r0, #4
 8001e32:	060d      	lsls	r5, r1, #24
 8001e34:	d50b      	bpl.n	8001e4e <_printf_i+0xa2>
 8001e36:	6806      	ldr	r6, [r0, #0]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	2e00      	cmp	r6, #0
 8001e3c:	da03      	bge.n	8001e46 <_printf_i+0x9a>
 8001e3e:	232d      	movs	r3, #45	@ 0x2d
 8001e40:	9a03      	ldr	r2, [sp, #12]
 8001e42:	4276      	negs	r6, r6
 8001e44:	7013      	strb	r3, [r2, #0]
 8001e46:	4b5d      	ldr	r3, [pc, #372]	@ (8001fbc <_printf_i+0x210>)
 8001e48:	270a      	movs	r7, #10
 8001e4a:	9304      	str	r3, [sp, #16]
 8001e4c:	e018      	b.n	8001e80 <_printf_i+0xd4>
 8001e4e:	6806      	ldr	r6, [r0, #0]
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	0649      	lsls	r1, r1, #25
 8001e54:	d5f1      	bpl.n	8001e3a <_printf_i+0x8e>
 8001e56:	b236      	sxth	r6, r6
 8001e58:	e7ef      	b.n	8001e3a <_printf_i+0x8e>
 8001e5a:	6808      	ldr	r0, [r1, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	c940      	ldmia	r1!, {r6}
 8001e60:	0605      	lsls	r5, r0, #24
 8001e62:	d402      	bmi.n	8001e6a <_printf_i+0xbe>
 8001e64:	0640      	lsls	r0, r0, #25
 8001e66:	d500      	bpl.n	8001e6a <_printf_i+0xbe>
 8001e68:	b2b6      	uxth	r6, r6
 8001e6a:	6019      	str	r1, [r3, #0]
 8001e6c:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <_printf_i+0x210>)
 8001e6e:	270a      	movs	r7, #10
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	2a6f      	cmp	r2, #111	@ 0x6f
 8001e74:	d100      	bne.n	8001e78 <_printf_i+0xcc>
 8001e76:	3f02      	subs	r7, #2
 8001e78:	0023      	movs	r3, r4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	3343      	adds	r3, #67	@ 0x43
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	6863      	ldr	r3, [r4, #4]
 8001e82:	60a3      	str	r3, [r4, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db06      	blt.n	8001e96 <_printf_i+0xea>
 8001e88:	2104      	movs	r1, #4
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	9d03      	ldr	r5, [sp, #12]
 8001e8e:	438a      	bics	r2, r1
 8001e90:	6022      	str	r2, [r4, #0]
 8001e92:	4333      	orrs	r3, r6
 8001e94:	d00c      	beq.n	8001eb0 <_printf_i+0x104>
 8001e96:	9d03      	ldr	r5, [sp, #12]
 8001e98:	0030      	movs	r0, r6
 8001e9a:	0039      	movs	r1, r7
 8001e9c:	f7fe f9a0 	bl	80001e0 <__aeabi_uidivmod>
 8001ea0:	9b04      	ldr	r3, [sp, #16]
 8001ea2:	3d01      	subs	r5, #1
 8001ea4:	5c5b      	ldrb	r3, [r3, r1]
 8001ea6:	702b      	strb	r3, [r5, #0]
 8001ea8:	0033      	movs	r3, r6
 8001eaa:	0006      	movs	r6, r0
 8001eac:	429f      	cmp	r7, r3
 8001eae:	d9f3      	bls.n	8001e98 <_printf_i+0xec>
 8001eb0:	2f08      	cmp	r7, #8
 8001eb2:	d109      	bne.n	8001ec8 <_printf_i+0x11c>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	07db      	lsls	r3, r3, #31
 8001eb8:	d506      	bpl.n	8001ec8 <_printf_i+0x11c>
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	6923      	ldr	r3, [r4, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dc02      	bgt.n	8001ec8 <_printf_i+0x11c>
 8001ec2:	2330      	movs	r3, #48	@ 0x30
 8001ec4:	3d01      	subs	r5, #1
 8001ec6:	702b      	strb	r3, [r5, #0]
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	1b5b      	subs	r3, r3, r5
 8001ecc:	6123      	str	r3, [r4, #16]
 8001ece:	9b07      	ldr	r3, [sp, #28]
 8001ed0:	0021      	movs	r1, r4
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	9805      	ldr	r0, [sp, #20]
 8001ed6:	9b06      	ldr	r3, [sp, #24]
 8001ed8:	aa09      	add	r2, sp, #36	@ 0x24
 8001eda:	f7ff fef7 	bl	8001ccc <_printf_common>
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d148      	bne.n	8001f74 <_printf_i+0x1c8>
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	4240      	negs	r0, r0
 8001ee6:	b00b      	add	sp, #44	@ 0x2c
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eea:	2220      	movs	r2, #32
 8001eec:	6809      	ldr	r1, [r1, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	6022      	str	r2, [r4, #0]
 8001ef2:	2278      	movs	r2, #120	@ 0x78
 8001ef4:	4932      	ldr	r1, [pc, #200]	@ (8001fc0 <_printf_i+0x214>)
 8001ef6:	9104      	str	r1, [sp, #16]
 8001ef8:	0021      	movs	r1, r4
 8001efa:	3145      	adds	r1, #69	@ 0x45
 8001efc:	700a      	strb	r2, [r1, #0]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	6822      	ldr	r2, [r4, #0]
 8001f02:	c940      	ldmia	r1!, {r6}
 8001f04:	0610      	lsls	r0, r2, #24
 8001f06:	d402      	bmi.n	8001f0e <_printf_i+0x162>
 8001f08:	0650      	lsls	r0, r2, #25
 8001f0a:	d500      	bpl.n	8001f0e <_printf_i+0x162>
 8001f0c:	b2b6      	uxth	r6, r6
 8001f0e:	6019      	str	r1, [r3, #0]
 8001f10:	07d3      	lsls	r3, r2, #31
 8001f12:	d502      	bpl.n	8001f1a <_printf_i+0x16e>
 8001f14:	2320      	movs	r3, #32
 8001f16:	4313      	orrs	r3, r2
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d001      	beq.n	8001f22 <_printf_i+0x176>
 8001f1e:	2710      	movs	r7, #16
 8001f20:	e7aa      	b.n	8001e78 <_printf_i+0xcc>
 8001f22:	2220      	movs	r2, #32
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	4393      	bics	r3, r2
 8001f28:	6023      	str	r3, [r4, #0]
 8001f2a:	e7f8      	b.n	8001f1e <_printf_i+0x172>
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	680d      	ldr	r5, [r1, #0]
 8001f30:	1d10      	adds	r0, r2, #4
 8001f32:	6949      	ldr	r1, [r1, #20]
 8001f34:	6018      	str	r0, [r3, #0]
 8001f36:	6813      	ldr	r3, [r2, #0]
 8001f38:	062e      	lsls	r6, r5, #24
 8001f3a:	d501      	bpl.n	8001f40 <_printf_i+0x194>
 8001f3c:	6019      	str	r1, [r3, #0]
 8001f3e:	e002      	b.n	8001f46 <_printf_i+0x19a>
 8001f40:	066d      	lsls	r5, r5, #25
 8001f42:	d5fb      	bpl.n	8001f3c <_printf_i+0x190>
 8001f44:	8019      	strh	r1, [r3, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9d03      	ldr	r5, [sp, #12]
 8001f4a:	6123      	str	r3, [r4, #16]
 8001f4c:	e7bf      	b.n	8001ece <_printf_i+0x122>
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	1d11      	adds	r1, r2, #4
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	6815      	ldr	r5, [r2, #0]
 8001f56:	2100      	movs	r1, #0
 8001f58:	0028      	movs	r0, r5
 8001f5a:	6862      	ldr	r2, [r4, #4]
 8001f5c:	f000 f91c 	bl	8002198 <memchr>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d001      	beq.n	8001f68 <_printf_i+0x1bc>
 8001f64:	1b40      	subs	r0, r0, r5
 8001f66:	6060      	str	r0, [r4, #4]
 8001f68:	6863      	ldr	r3, [r4, #4]
 8001f6a:	6123      	str	r3, [r4, #16]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9a03      	ldr	r2, [sp, #12]
 8001f70:	7013      	strb	r3, [r2, #0]
 8001f72:	e7ac      	b.n	8001ece <_printf_i+0x122>
 8001f74:	002a      	movs	r2, r5
 8001f76:	6923      	ldr	r3, [r4, #16]
 8001f78:	9906      	ldr	r1, [sp, #24]
 8001f7a:	9805      	ldr	r0, [sp, #20]
 8001f7c:	9d07      	ldr	r5, [sp, #28]
 8001f7e:	47a8      	blx	r5
 8001f80:	3001      	adds	r0, #1
 8001f82:	d0ae      	beq.n	8001ee2 <_printf_i+0x136>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	079b      	lsls	r3, r3, #30
 8001f88:	d415      	bmi.n	8001fb6 <_printf_i+0x20a>
 8001f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f8c:	68e0      	ldr	r0, [r4, #12]
 8001f8e:	4298      	cmp	r0, r3
 8001f90:	daa9      	bge.n	8001ee6 <_printf_i+0x13a>
 8001f92:	0018      	movs	r0, r3
 8001f94:	e7a7      	b.n	8001ee6 <_printf_i+0x13a>
 8001f96:	0022      	movs	r2, r4
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9906      	ldr	r1, [sp, #24]
 8001f9c:	9805      	ldr	r0, [sp, #20]
 8001f9e:	9e07      	ldr	r6, [sp, #28]
 8001fa0:	3219      	adds	r2, #25
 8001fa2:	47b0      	blx	r6
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d09c      	beq.n	8001ee2 <_printf_i+0x136>
 8001fa8:	3501      	adds	r5, #1
 8001faa:	68e3      	ldr	r3, [r4, #12]
 8001fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	42ab      	cmp	r3, r5
 8001fb2:	dcf0      	bgt.n	8001f96 <_printf_i+0x1ea>
 8001fb4:	e7e9      	b.n	8001f8a <_printf_i+0x1de>
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	e7f7      	b.n	8001faa <_printf_i+0x1fe>
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	08002559 	.word	0x08002559
 8001fc0:	0800256a 	.word	0x0800256a

08001fc4 <__swbuf_r>:
 8001fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc6:	0006      	movs	r6, r0
 8001fc8:	000d      	movs	r5, r1
 8001fca:	0014      	movs	r4, r2
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d004      	beq.n	8001fda <__swbuf_r+0x16>
 8001fd0:	6a03      	ldr	r3, [r0, #32]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <__swbuf_r+0x16>
 8001fd6:	f7ff fa39 	bl	800144c <__sinit>
 8001fda:	69a3      	ldr	r3, [r4, #24]
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	071b      	lsls	r3, r3, #28
 8001fe2:	d502      	bpl.n	8001fea <__swbuf_r+0x26>
 8001fe4:	6923      	ldr	r3, [r4, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <__swbuf_r+0x3a>
 8001fea:	0021      	movs	r1, r4
 8001fec:	0030      	movs	r0, r6
 8001fee:	f000 f82b 	bl	8002048 <__swsetup_r>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d003      	beq.n	8001ffe <__swbuf_r+0x3a>
 8001ff6:	2501      	movs	r5, #1
 8001ff8:	426d      	negs	r5, r5
 8001ffa:	0028      	movs	r0, r5
 8001ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ffe:	6923      	ldr	r3, [r4, #16]
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	b2ef      	uxtb	r7, r5
 8002004:	1ac0      	subs	r0, r0, r3
 8002006:	6963      	ldr	r3, [r4, #20]
 8002008:	b2ed      	uxtb	r5, r5
 800200a:	4283      	cmp	r3, r0
 800200c:	dc05      	bgt.n	800201a <__swbuf_r+0x56>
 800200e:	0021      	movs	r1, r4
 8002010:	0030      	movs	r0, r6
 8002012:	f7ff fcc3 	bl	800199c <_fflush_r>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1ed      	bne.n	8001ff6 <__swbuf_r+0x32>
 800201a:	68a3      	ldr	r3, [r4, #8]
 800201c:	3001      	adds	r0, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	60a3      	str	r3, [r4, #8]
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	6022      	str	r2, [r4, #0]
 8002028:	701f      	strb	r7, [r3, #0]
 800202a:	6963      	ldr	r3, [r4, #20]
 800202c:	4283      	cmp	r3, r0
 800202e:	d004      	beq.n	800203a <__swbuf_r+0x76>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	07db      	lsls	r3, r3, #31
 8002034:	d5e1      	bpl.n	8001ffa <__swbuf_r+0x36>
 8002036:	2d0a      	cmp	r5, #10
 8002038:	d1df      	bne.n	8001ffa <__swbuf_r+0x36>
 800203a:	0021      	movs	r1, r4
 800203c:	0030      	movs	r0, r6
 800203e:	f7ff fcad 	bl	800199c <_fflush_r>
 8002042:	2800      	cmp	r0, #0
 8002044:	d0d9      	beq.n	8001ffa <__swbuf_r+0x36>
 8002046:	e7d6      	b.n	8001ff6 <__swbuf_r+0x32>

08002048 <__swsetup_r>:
 8002048:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <__swsetup_r+0xb8>)
 800204a:	b570      	push	{r4, r5, r6, lr}
 800204c:	0005      	movs	r5, r0
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	000c      	movs	r4, r1
 8002052:	2800      	cmp	r0, #0
 8002054:	d004      	beq.n	8002060 <__swsetup_r+0x18>
 8002056:	6a03      	ldr	r3, [r0, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <__swsetup_r+0x18>
 800205c:	f7ff f9f6 	bl	800144c <__sinit>
 8002060:	220c      	movs	r2, #12
 8002062:	5ea3      	ldrsh	r3, [r4, r2]
 8002064:	071a      	lsls	r2, r3, #28
 8002066:	d423      	bmi.n	80020b0 <__swsetup_r+0x68>
 8002068:	06da      	lsls	r2, r3, #27
 800206a:	d407      	bmi.n	800207c <__swsetup_r+0x34>
 800206c:	2209      	movs	r2, #9
 800206e:	602a      	str	r2, [r5, #0]
 8002070:	2240      	movs	r2, #64	@ 0x40
 8002072:	2001      	movs	r0, #1
 8002074:	4313      	orrs	r3, r2
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	4240      	negs	r0, r0
 800207a:	e03a      	b.n	80020f2 <__swsetup_r+0xaa>
 800207c:	075b      	lsls	r3, r3, #29
 800207e:	d513      	bpl.n	80020a8 <__swsetup_r+0x60>
 8002080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002082:	2900      	cmp	r1, #0
 8002084:	d008      	beq.n	8002098 <__swsetup_r+0x50>
 8002086:	0023      	movs	r3, r4
 8002088:	3344      	adds	r3, #68	@ 0x44
 800208a:	4299      	cmp	r1, r3
 800208c:	d002      	beq.n	8002094 <__swsetup_r+0x4c>
 800208e:	0028      	movs	r0, r5
 8002090:	f7ff faf8 	bl	8001684 <_free_r>
 8002094:	2300      	movs	r3, #0
 8002096:	6363      	str	r3, [r4, #52]	@ 0x34
 8002098:	2224      	movs	r2, #36	@ 0x24
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	4393      	bics	r3, r2
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	2300      	movs	r3, #0
 80020a2:	6063      	str	r3, [r4, #4]
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	6023      	str	r3, [r4, #0]
 80020a8:	2308      	movs	r3, #8
 80020aa:	89a2      	ldrh	r2, [r4, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	81a3      	strh	r3, [r4, #12]
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10b      	bne.n	80020ce <__swsetup_r+0x86>
 80020b6:	21a0      	movs	r1, #160	@ 0xa0
 80020b8:	2280      	movs	r2, #128	@ 0x80
 80020ba:	89a3      	ldrh	r3, [r4, #12]
 80020bc:	0089      	lsls	r1, r1, #2
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	400b      	ands	r3, r1
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <__swsetup_r+0x86>
 80020c6:	0021      	movs	r1, r4
 80020c8:	0028      	movs	r0, r5
 80020ca:	f000 f89b 	bl	8002204 <__smakebuf_r>
 80020ce:	220c      	movs	r2, #12
 80020d0:	5ea3      	ldrsh	r3, [r4, r2]
 80020d2:	2101      	movs	r1, #1
 80020d4:	001a      	movs	r2, r3
 80020d6:	400a      	ands	r2, r1
 80020d8:	420b      	tst	r3, r1
 80020da:	d00b      	beq.n	80020f4 <__swsetup_r+0xac>
 80020dc:	2200      	movs	r2, #0
 80020de:	60a2      	str	r2, [r4, #8]
 80020e0:	6962      	ldr	r2, [r4, #20]
 80020e2:	4252      	negs	r2, r2
 80020e4:	61a2      	str	r2, [r4, #24]
 80020e6:	2000      	movs	r0, #0
 80020e8:	6922      	ldr	r2, [r4, #16]
 80020ea:	4282      	cmp	r2, r0
 80020ec:	d101      	bne.n	80020f2 <__swsetup_r+0xaa>
 80020ee:	061a      	lsls	r2, r3, #24
 80020f0:	d4be      	bmi.n	8002070 <__swsetup_r+0x28>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	0799      	lsls	r1, r3, #30
 80020f6:	d400      	bmi.n	80020fa <__swsetup_r+0xb2>
 80020f8:	6962      	ldr	r2, [r4, #20]
 80020fa:	60a2      	str	r2, [r4, #8]
 80020fc:	e7f3      	b.n	80020e6 <__swsetup_r+0x9e>
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	2000001c 	.word	0x2000001c

08002104 <_raise_r>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	0004      	movs	r4, r0
 8002108:	000d      	movs	r5, r1
 800210a:	291f      	cmp	r1, #31
 800210c:	d904      	bls.n	8002118 <_raise_r+0x14>
 800210e:	2316      	movs	r3, #22
 8002110:	6003      	str	r3, [r0, #0]
 8002112:	2001      	movs	r0, #1
 8002114:	4240      	negs	r0, r0
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <_raise_r+0x24>
 800211e:	008a      	lsls	r2, r1, #2
 8002120:	189b      	adds	r3, r3, r2
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2a00      	cmp	r2, #0
 8002126:	d108      	bne.n	800213a <_raise_r+0x36>
 8002128:	0020      	movs	r0, r4
 800212a:	f000 f831 	bl	8002190 <_getpid_r>
 800212e:	002a      	movs	r2, r5
 8002130:	0001      	movs	r1, r0
 8002132:	0020      	movs	r0, r4
 8002134:	f000 f81a 	bl	800216c <_kill_r>
 8002138:	e7ed      	b.n	8002116 <_raise_r+0x12>
 800213a:	2a01      	cmp	r2, #1
 800213c:	d009      	beq.n	8002152 <_raise_r+0x4e>
 800213e:	1c51      	adds	r1, r2, #1
 8002140:	d103      	bne.n	800214a <_raise_r+0x46>
 8002142:	2316      	movs	r3, #22
 8002144:	6003      	str	r3, [r0, #0]
 8002146:	2001      	movs	r0, #1
 8002148:	e7e5      	b.n	8002116 <_raise_r+0x12>
 800214a:	2100      	movs	r1, #0
 800214c:	0028      	movs	r0, r5
 800214e:	6019      	str	r1, [r3, #0]
 8002150:	4790      	blx	r2
 8002152:	2000      	movs	r0, #0
 8002154:	e7df      	b.n	8002116 <_raise_r+0x12>
	...

08002158 <raise>:
 8002158:	b510      	push	{r4, lr}
 800215a:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <raise+0x10>)
 800215c:	0001      	movs	r1, r0
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	f7ff ffd0 	bl	8002104 <_raise_r>
 8002164:	bd10      	pop	{r4, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	2000001c 	.word	0x2000001c

0800216c <_kill_r>:
 800216c:	2300      	movs	r3, #0
 800216e:	b570      	push	{r4, r5, r6, lr}
 8002170:	4d06      	ldr	r5, [pc, #24]	@ (800218c <_kill_r+0x20>)
 8002172:	0004      	movs	r4, r0
 8002174:	0008      	movs	r0, r1
 8002176:	0011      	movs	r1, r2
 8002178:	602b      	str	r3, [r5, #0]
 800217a:	f000 f8c9 	bl	8002310 <_kill>
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	d103      	bne.n	800218a <_kill_r+0x1e>
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d000      	beq.n	800218a <_kill_r+0x1e>
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	20000234 	.word	0x20000234

08002190 <_getpid_r>:
 8002190:	b510      	push	{r4, lr}
 8002192:	f000 f8ad 	bl	80022f0 <_getpid>
 8002196:	bd10      	pop	{r4, pc}

08002198 <memchr>:
 8002198:	b2c9      	uxtb	r1, r1
 800219a:	1882      	adds	r2, r0, r2
 800219c:	4290      	cmp	r0, r2
 800219e:	d101      	bne.n	80021a4 <memchr+0xc>
 80021a0:	2000      	movs	r0, #0
 80021a2:	4770      	bx	lr
 80021a4:	7803      	ldrb	r3, [r0, #0]
 80021a6:	428b      	cmp	r3, r1
 80021a8:	d0fb      	beq.n	80021a2 <memchr+0xa>
 80021aa:	3001      	adds	r0, #1
 80021ac:	e7f6      	b.n	800219c <memchr+0x4>
	...

080021b0 <__swhatbuf_r>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	000e      	movs	r6, r1
 80021b4:	001d      	movs	r5, r3
 80021b6:	230e      	movs	r3, #14
 80021b8:	5ec9      	ldrsh	r1, [r1, r3]
 80021ba:	0014      	movs	r4, r2
 80021bc:	b096      	sub	sp, #88	@ 0x58
 80021be:	2900      	cmp	r1, #0
 80021c0:	da0c      	bge.n	80021dc <__swhatbuf_r+0x2c>
 80021c2:	89b2      	ldrh	r2, [r6, #12]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	0011      	movs	r1, r2
 80021c8:	4019      	ands	r1, r3
 80021ca:	421a      	tst	r2, r3
 80021cc:	d114      	bne.n	80021f8 <__swhatbuf_r+0x48>
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	2000      	movs	r0, #0
 80021d4:	6029      	str	r1, [r5, #0]
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	b016      	add	sp, #88	@ 0x58
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	466a      	mov	r2, sp
 80021de:	f000 f853 	bl	8002288 <_fstat_r>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	dbed      	blt.n	80021c2 <__swhatbuf_r+0x12>
 80021e6:	23f0      	movs	r3, #240	@ 0xf0
 80021e8:	9901      	ldr	r1, [sp, #4]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4019      	ands	r1, r3
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__swhatbuf_r+0x50>)
 80021f0:	18c9      	adds	r1, r1, r3
 80021f2:	424b      	negs	r3, r1
 80021f4:	4159      	adcs	r1, r3
 80021f6:	e7ea      	b.n	80021ce <__swhatbuf_r+0x1e>
 80021f8:	2100      	movs	r1, #0
 80021fa:	2340      	movs	r3, #64	@ 0x40
 80021fc:	e7e9      	b.n	80021d2 <__swhatbuf_r+0x22>
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	ffffe000 	.word	0xffffe000

08002204 <__smakebuf_r>:
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	2602      	movs	r6, #2
 8002208:	898b      	ldrh	r3, [r1, #12]
 800220a:	0005      	movs	r5, r0
 800220c:	000c      	movs	r4, r1
 800220e:	b085      	sub	sp, #20
 8002210:	4233      	tst	r3, r6
 8002212:	d007      	beq.n	8002224 <__smakebuf_r+0x20>
 8002214:	0023      	movs	r3, r4
 8002216:	3347      	adds	r3, #71	@ 0x47
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	6123      	str	r3, [r4, #16]
 800221c:	2301      	movs	r3, #1
 800221e:	6163      	str	r3, [r4, #20]
 8002220:	b005      	add	sp, #20
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002224:	ab03      	add	r3, sp, #12
 8002226:	aa02      	add	r2, sp, #8
 8002228:	f7ff ffc2 	bl	80021b0 <__swhatbuf_r>
 800222c:	9f02      	ldr	r7, [sp, #8]
 800222e:	9001      	str	r0, [sp, #4]
 8002230:	0039      	movs	r1, r7
 8002232:	0028      	movs	r0, r5
 8002234:	f7ff fa9c 	bl	8001770 <_malloc_r>
 8002238:	2800      	cmp	r0, #0
 800223a:	d108      	bne.n	800224e <__smakebuf_r+0x4a>
 800223c:	220c      	movs	r2, #12
 800223e:	5ea3      	ldrsh	r3, [r4, r2]
 8002240:	059a      	lsls	r2, r3, #22
 8002242:	d4ed      	bmi.n	8002220 <__smakebuf_r+0x1c>
 8002244:	2203      	movs	r2, #3
 8002246:	4393      	bics	r3, r2
 8002248:	431e      	orrs	r6, r3
 800224a:	81a6      	strh	r6, [r4, #12]
 800224c:	e7e2      	b.n	8002214 <__smakebuf_r+0x10>
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	89a2      	ldrh	r2, [r4, #12]
 8002252:	6020      	str	r0, [r4, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	81a3      	strh	r3, [r4, #12]
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	6120      	str	r0, [r4, #16]
 800225c:	6167      	str	r7, [r4, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <__smakebuf_r+0x78>
 8002262:	0028      	movs	r0, r5
 8002264:	230e      	movs	r3, #14
 8002266:	5ee1      	ldrsh	r1, [r4, r3]
 8002268:	f000 f820 	bl	80022ac <_isatty_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	d005      	beq.n	800227c <__smakebuf_r+0x78>
 8002270:	2303      	movs	r3, #3
 8002272:	89a2      	ldrh	r2, [r4, #12]
 8002274:	439a      	bics	r2, r3
 8002276:	3b02      	subs	r3, #2
 8002278:	4313      	orrs	r3, r2
 800227a:	81a3      	strh	r3, [r4, #12]
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	9a01      	ldr	r2, [sp, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	81a3      	strh	r3, [r4, #12]
 8002284:	e7cc      	b.n	8002220 <__smakebuf_r+0x1c>
	...

08002288 <_fstat_r>:
 8002288:	2300      	movs	r3, #0
 800228a:	b570      	push	{r4, r5, r6, lr}
 800228c:	4d06      	ldr	r5, [pc, #24]	@ (80022a8 <_fstat_r+0x20>)
 800228e:	0004      	movs	r4, r0
 8002290:	0008      	movs	r0, r1
 8002292:	0011      	movs	r1, r2
 8002294:	602b      	str	r3, [r5, #0]
 8002296:	f000 f823 	bl	80022e0 <_fstat>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	d103      	bne.n	80022a6 <_fstat_r+0x1e>
 800229e:	682b      	ldr	r3, [r5, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d000      	beq.n	80022a6 <_fstat_r+0x1e>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	20000234 	.word	0x20000234

080022ac <_isatty_r>:
 80022ac:	2300      	movs	r3, #0
 80022ae:	b570      	push	{r4, r5, r6, lr}
 80022b0:	4d06      	ldr	r5, [pc, #24]	@ (80022cc <_isatty_r+0x20>)
 80022b2:	0004      	movs	r4, r0
 80022b4:	0008      	movs	r0, r1
 80022b6:	602b      	str	r3, [r5, #0]
 80022b8:	f000 f822 	bl	8002300 <_isatty>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d103      	bne.n	80022c8 <_isatty_r+0x1c>
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d000      	beq.n	80022c8 <_isatty_r+0x1c>
 80022c6:	6023      	str	r3, [r4, #0]
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	20000234 	.word	0x20000234

080022d0 <_close>:
 80022d0:	2258      	movs	r2, #88	@ 0x58
 80022d2:	2001      	movs	r0, #1
 80022d4:	4b01      	ldr	r3, [pc, #4]	@ (80022dc <_close+0xc>)
 80022d6:	4240      	negs	r0, r0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4770      	bx	lr
 80022dc:	20000234 	.word	0x20000234

080022e0 <_fstat>:
 80022e0:	2258      	movs	r2, #88	@ 0x58
 80022e2:	2001      	movs	r0, #1
 80022e4:	4b01      	ldr	r3, [pc, #4]	@ (80022ec <_fstat+0xc>)
 80022e6:	4240      	negs	r0, r0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4770      	bx	lr
 80022ec:	20000234 	.word	0x20000234

080022f0 <_getpid>:
 80022f0:	2258      	movs	r2, #88	@ 0x58
 80022f2:	2001      	movs	r0, #1
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <_getpid+0xc>)
 80022f6:	4240      	negs	r0, r0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	4770      	bx	lr
 80022fc:	20000234 	.word	0x20000234

08002300 <_isatty>:
 8002300:	2258      	movs	r2, #88	@ 0x58
 8002302:	4b02      	ldr	r3, [pc, #8]	@ (800230c <_isatty+0xc>)
 8002304:	2000      	movs	r0, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4770      	bx	lr
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	20000234 	.word	0x20000234

08002310 <_kill>:
 8002310:	2258      	movs	r2, #88	@ 0x58
 8002312:	2001      	movs	r0, #1
 8002314:	4b01      	ldr	r3, [pc, #4]	@ (800231c <_kill+0xc>)
 8002316:	4240      	negs	r0, r0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4770      	bx	lr
 800231c:	20000234 	.word	0x20000234

08002320 <_lseek>:
 8002320:	2258      	movs	r2, #88	@ 0x58
 8002322:	2001      	movs	r0, #1
 8002324:	4b01      	ldr	r3, [pc, #4]	@ (800232c <_lseek+0xc>)
 8002326:	4240      	negs	r0, r0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4770      	bx	lr
 800232c:	20000234 	.word	0x20000234

08002330 <_read>:
 8002330:	2258      	movs	r2, #88	@ 0x58
 8002332:	2001      	movs	r0, #1
 8002334:	4b01      	ldr	r3, [pc, #4]	@ (800233c <_read+0xc>)
 8002336:	4240      	negs	r0, r0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4770      	bx	lr
 800233c:	20000234 	.word	0x20000234

08002340 <_sbrk>:
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <_sbrk+0x14>)
 8002342:	0003      	movs	r3, r0
 8002344:	6810      	ldr	r0, [r2, #0]
 8002346:	2800      	cmp	r0, #0
 8002348:	d002      	beq.n	8002350 <_sbrk+0x10>
 800234a:	18c3      	adds	r3, r0, r3
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4770      	bx	lr
 8002350:	4801      	ldr	r0, [pc, #4]	@ (8002358 <_sbrk+0x18>)
 8002352:	e7fa      	b.n	800234a <_sbrk+0xa>
 8002354:	20000244 	.word	0x20000244
 8002358:	20000248 	.word	0x20000248

0800235c <_write>:
 800235c:	2258      	movs	r2, #88	@ 0x58
 800235e:	2001      	movs	r0, #1
 8002360:	4b01      	ldr	r3, [pc, #4]	@ (8002368 <_write+0xc>)
 8002362:	4240      	negs	r0, r0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4770      	bx	lr
 8002368:	20000234 	.word	0x20000234

0800236c <_exit>:
 800236c:	e7fe      	b.n	800236c <_exit>
 800236e:	46c0      	nop			@ (mov r8, r8)

08002370 <__aeabi_lmul>:
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	46ce      	mov	lr, r9
 8002374:	4699      	mov	r9, r3
 8002376:	0c03      	lsrs	r3, r0, #16
 8002378:	469c      	mov	ip, r3
 800237a:	0413      	lsls	r3, r2, #16
 800237c:	4647      	mov	r7, r8
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	001d      	movs	r5, r3
 8002382:	000e      	movs	r6, r1
 8002384:	4661      	mov	r1, ip
 8002386:	0404      	lsls	r4, r0, #16
 8002388:	0c24      	lsrs	r4, r4, #16
 800238a:	b580      	push	{r7, lr}
 800238c:	0007      	movs	r7, r0
 800238e:	0c10      	lsrs	r0, r2, #16
 8002390:	434b      	muls	r3, r1
 8002392:	4365      	muls	r5, r4
 8002394:	4341      	muls	r1, r0
 8002396:	4360      	muls	r0, r4
 8002398:	0c2c      	lsrs	r4, r5, #16
 800239a:	18c0      	adds	r0, r0, r3
 800239c:	1824      	adds	r4, r4, r0
 800239e:	468c      	mov	ip, r1
 80023a0:	42a3      	cmp	r3, r4
 80023a2:	d903      	bls.n	80023ac <__aeabi_lmul+0x3c>
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	4698      	mov	r8, r3
 80023aa:	44c4      	add	ip, r8
 80023ac:	4649      	mov	r1, r9
 80023ae:	4379      	muls	r1, r7
 80023b0:	4356      	muls	r6, r2
 80023b2:	0c23      	lsrs	r3, r4, #16
 80023b4:	042d      	lsls	r5, r5, #16
 80023b6:	0c2d      	lsrs	r5, r5, #16
 80023b8:	1989      	adds	r1, r1, r6
 80023ba:	4463      	add	r3, ip
 80023bc:	0424      	lsls	r4, r4, #16
 80023be:	1960      	adds	r0, r4, r5
 80023c0:	18c9      	adds	r1, r1, r3
 80023c2:	bcc0      	pop	{r6, r7}
 80023c4:	46b9      	mov	r9, r7
 80023c6:	46b0      	mov	r8, r6
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)

080023cc <_init>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr

080023d8 <_fini>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr
